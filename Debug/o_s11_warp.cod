; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28316.0 

	TITLE	C:\Users\DonutStopGaming\Desktop\Mod\Tsonic\src\stage\stage11_Warp\o_s11_warp.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?sS11WarpOnCount@@3HA				; sS11WarpOnCount
PUBLIC	?sS11WarpJumpSpeed@@3MA				; sS11WarpJumpSpeed
PUBLIC	?sS11WarpRotSpd@@3HA				; sS11WarpRotSpd
PUBLIC	?sS11WarpScale@@3MA				; sS11WarpScale
PUBLIC	?sS11WarpEffectRotateDelay@@3HA			; sS11WarpEffectRotateDelay
PUBLIC	?S11_WARP_BRIGHTNESS_SPEED@@3HA			; S11_WARP_BRIGHTNESS_SPEED
PUBLIC	?S11_WARP_MAX_BRIGHTNESS@@3MA			; S11_WARP_MAX_BRIGHTNESS
PUBLIC	?S11_WARP_MIN_BRIGHTNESS@@3MA			; S11_WARP_MIN_BRIGHTNESS
msvcjmc	SEGMENT
__F2BDCE38_pch@h DB 01H
__6EE8A1C6_mod@pch DB 01H
__AAD340E9_o_s11_warp@cpp DB 01H
__2CCBBE23_propidl@h DB 01H
__24E9E95F_stdlib@h DB 01H
__BB40F913_TObject@hpp DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
?sS11WarpOnCount@@3HA DD 01eH				; sS11WarpOnCount
?sS11WarpJumpSpeed@@3MA DD 03d4ccccdr		; 0.05	; sS11WarpJumpSpeed
?sS11WarpRotSpd@@3HA DD 03cH				; sS11WarpRotSpd
?sS11WarpScale@@3MA DD 03fc00000r		; 1.5	; sS11WarpScale
?sS11WarpEffectRotateDelay@@3HA DD 02H			; sS11WarpEffectRotateDelay
?S11_WARP_BRIGHTNESS_SPEED@@3HA DD 0200H		; S11_WARP_BRIGHTNESS_SPEED
?S11_WARP_MAX_BRIGHTNESS@@3MA DD 03f800000r	; 1	; S11_WARP_MAX_BRIGHTNESS
?S11_WARP_MIN_BRIGHTNESS@@3MA DD 03dcccccdr	; 0.1	; S11_WARP_MIN_BRIGHTNESS
_DATA	ENDS
PUBLIC	?CheckPlayer@TObjS11Warp@@QAEHXZ		; TObjS11Warp::CheckPlayer
PUBLIC	?NoSpeed@TObjS11Warp@@QAEPAURwV3d@@XZ		; TObjS11Warp::NoSpeed
PUBLIC	?Exec@TObjS11Warp@@UAEXXZ			; TObjS11Warp::Exec
PUBLIC	?IsNowFading@TObjS11Warp@@QAE_NXZ		; TObjS11Warp::IsNowFading
PUBLIC	?SetPosition@TObjS11Warp@@QAEXXZ		; TObjS11Warp::SetPosition
PUBLIC	?TObjS11Warp_Exec_Hook@@YAXXZ			; TObjS11Warp_Exec_Hook
PUBLIC	__JustMyCode_Default
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@4041800000000000
PUBLIC	__real@4059000000000000
EXTRN	?RwMatrixRotateOneMinusCosineSine@@YAPAURwMatrix@@PAU1@QAURwV3d@@MMW4RwOpCombineType@@@Z:PROC ; RwMatrixRotateOneMinusCosineSine
EXTRN	?RwFrameUpdateObjects@@YAPAURwFrame@@PAU1@@Z:PROC ; RwFrameUpdateObjects
EXTRN	?RwFrameScale@@YAHPAURwFrame@@PBURwV3d@@W4RwOpCombineType@@@Z:PROC ; RwFrameScale
EXTRN	?RwFrameTranslate@@YAPAURwFrame@@PAU1@PBURwV3d@@W4RwOpCombineType@@@Z:PROC ; RwFrameTranslate
EXTRN	?Kill@TObject@@QAEXXZ:PROC			; TObject::Kill
EXTRN	?setobjCheckRangeOut2@@YAHPBURwV3d@@M@Z:PROC	; setobjCheckRangeOut2
EXTRN	?GetCharacterId@C_COLLI@@QAEHXZ:PROC		; C_COLLI::GetCharacterId
EXTRN	?IsHitKind@C_COLLI@@QAEPAU1@E@Z:PROC		; C_COLLI::IsHitKind
EXTRN	?IsHitPlayer@C_COLLI@@QAEPAU1@XZ:PROC		; C_COLLI::IsHitPlayer
EXTRN	?Entry@C_COLLI@@QAEHPAURwV3d@@PAUsAngle@@@Z:PROC ; C_COLLI::Entry
EXTRN	?ClearSearch@CCL_MASTER@@SAXXZ:PROC		; CCL_MASTER::ClearSearch
EXTRN	?GetPlayerNumberFromCCLCharacterId@@YAHH@Z:PROC	; GetPlayerNumberFromCCLCharacterId
EXTRN	?GetLeaderPlayerNo@TObjTeam@@QAEDXZ:PROC	; TObjTeam::GetLeaderPlayerNo
EXTRN	?GetNowLeaderPlayerNo@TObjTeam@@QAEDXZ:PROC	; TObjTeam::GetNowLeaderPlayerNo
EXTRN	?SetMutekiTime@TObjTeam@@QAEXI@Z:PROC		; TObjTeam::SetMutekiTime
EXTRN	?IsThisPostedPlayer@TObjTeam@@QAE_NH@Z:PROC	; TObjTeam::IsThisPostedPlayer
EXTRN	?GetPlayerPositionHistory@PlayerMaster@@SAPAURwV3d@@HE@Z:PROC ; PlayerMaster::GetPlayerPositionHistory
EXTRN	?WarpCameraAndPlayerKeepRelativePosition@TObjCamera@@SAXHPAUsAngle@@PAURwV3d@@@Z:PROC ; TObjCamera::WarpCameraAndPlayerKeepRelativePosition
EXTRN	?Play@IsndSE@@SAHFPAU1@DH@Z:PROC		; IsndSE::Play
EXTRN	?GetMainFadeScreenPointer@FADESCREEN@@SAPAU1@XZ:PROC ; FADESCREEN::GetMainFadeScreenPointer
EXTRN	?Construct_PtclTask_Stage@@YAXIPAURwV3d@@PAUsAngle@@@Z:PROC ; Construct_PtclTask_Stage
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?AxisZ@@3AAURwV3d@@A:DWORD			; AxisZ
EXTRN	?AxisY@@3AAURwV3d@@A:DWORD			; AxisY
EXTRN	?sine@@3ABQAMB:DWORD				; sine
EXTRN	?dword_9FEE08@@3AAMA:DWORD			; dword_9FEE08
EXTRN	?flt_A0EE08@@3AAMA:DWORD			; flt_A0EE08
EXTRN	?teamTOp@@3PAPAUTObjTeam@@A:DWORD		; teamTOp
EXTRN	?pos_history@PlayerMaster@@2AAPAUpos_history_struct@1@A:DWORD ; PlayerMaster::pos_history
EXTRN	?n_history@PlayerMaster@@2PAEA:DWORD		; PlayerMaster::n_history
EXTRN	?playerTOp@@3QAPAUTObjPlayer@@A:DWORD		; playerTOp
EXTRN	?pModeSwitch@@3AAPAUMODESWITCH@@A:DWORD		; pModeSwitch
EXTRN	?Action@@3AAUACTION@@A:DWORD			; Action
EXTRN	?PeriCtrlMap@@3ABQAHB:DWORD			; PeriCtrlMap
EXTRN	?PeriCtrl@@3AAUPeriCtrlStruct@@A:DWORD		; PeriCtrl
EXTRN	?SndSE@@3AAPAUIsndSE@@A:DWORD			; SndSE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@4041800000000000
CONST	SEGMENT
__real@4041800000000000 DQ 04041800000000000r	; 35
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\Tsonic\src\stage\stage11_Warp\o_s11_warp.cpp
;	COMDAT ?TObjS11Warp_Exec_Hook@@YAXXZ
_TEXT	SEGMENT
_v1$ = -8						; size = 4
?TObjS11Warp_Exec_Hook@@YAXXZ PROC			; TObjS11Warp_Exec_Hook, COMDAT

; 351  :     TObjS11Warp* v1;
; 352  :     __asm
; 353  :     {
; 354  :         mov v1, esi;

  00000	89 75 f8	 mov	 DWORD PTR _v1$[ebp], esi

; 355  :         mov ecx, esi;

  00003	8b ce		 mov	 ecx, esi

; 356  :         call TObjS11Warp::Exec;

  00005	e8 00 00 00 00	 call	 ?Exec@TObjS11Warp@@UAEXXZ ; TObjS11Warp::Exec

; 357  :         ret;

  0000a	c3		 ret	 0
?TObjS11Warp_Exec_Hook@@YAXXZ ENDP			; TObjS11Warp_Exec_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\Tsonic\src\stage\stage11_Warp\o_s11_warp.cpp
;	COMDAT ?SetPosition@TObjS11Warp@@QAEXXZ
_TEXT	SEGMENT
tv131 = -516						; size = 4
_scale$ = -316						; size = 12
_translation$ = -296					; size = 12
_v21$ = -276						; size = 4
_v20$ = -264						; size = 4
_v19$ = -252						; size = 4
_v18$ = -240						; size = 2
_v17$ = -228						; size = 4
_v16$ = -216						; size = 4
_v15$ = -204						; size = 8
_v14$ = -188						; size = 4
_v13$ = -176						; size = 4
_v12$ = -164						; size = 4
_v11$ = -152						; size = 4
_v10$ = -140						; size = 4
_v9$ = -128						; size = 4
_v8$ = -116						; size = 8
_v7$ = -97						; size = 1
_v6$ = -88						; size = 4
_v5$ = -76						; size = 8
_v4$ = -60						; size = 4
_oneMinusCosine$ = -48					; size = 4
_v2$ = -36						; size = 4
_result$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?SetPosition@TObjS11Warp@@QAEXXZ PROC			; TObjS11Warp::SetPosition, COMDAT
; _this$ = ecx

; 245  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 02 00
	00		 sub	 esp, 516		; 00000204H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd fc fd ff
	ff		 lea	 edi, DWORD PTR [ebp-516]
  00013	b9 81 00 00 00	 mov	 ecx, 129		; 00000081H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __AAD340E9_o_s11_warp@cpp
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 246  :     int result; // eax
; 247  :     RwFrame* v2; // esi
; 248  :     RwReal oneMinusCosine; // ST18_4
; 249  :     RwReal v4; // ecx
; 250  :     double v5; // st7
; 251  :     RwReal v6; // edx
; 252  :     bool v7; // zf
; 253  :     double v8; // st7
; 254  :     int v9; // eax
; 255  :     RwFrame* v10; // esi
; 256  :     RwReal v11; // ST18_4
; 257  :     RwReal v12; // ST18_4
; 258  :     signed int v13; // ebx
; 259  :     float* v14; // ebp
; 260  :     double v15; // st7
; 261  :     float v16; // eax
; 262  :     int v17; // edi
; 263  :     unsigned __int16 v18; // di
; 264  :     RwFrame* v19; // esi
; 265  :     RwReal v20; // ST18_4
; 266  :     RwReal v21; // ST18_4
; 267  :     RwV3d translation; // [esp+1Ch] [ebp-18h]
; 268  :     RwV3d scale; // [esp+28h] [ebp-Ch]
; 269  : 
; 270  :     result = (int)this->pBaseMaybe;

  00037	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [eax+320]
  00040	89 4d e8	 mov	 DWORD PTR _result$[ebp], ecx

; 271  :     if (result)

  00043	83 7d e8 00	 cmp	 DWORD PTR _result$[ebp], 0
  00047	0f 84 25 05 00
	00		 je	 $LN3@SetPositio

; 272  :     {
; 273  :         scale.z = sS11WarpScale;

  0004d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sS11WarpScale@@3MA
  00055	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _scale$[ebp+8], xmm0

; 274  :         scale.y = sS11WarpScale;

  0005d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sS11WarpScale@@3MA
  00065	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _scale$[ebp+4], xmm0

; 275  :         scale.x = sS11WarpScale;

  0006d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sS11WarpScale@@3MA
  00075	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _scale$[ebp], xmm0

; 276  :         v2 = *(RwFrame**)(result + 4);

  0007d	8b 45 e8	 mov	 eax, DWORD PTR _result$[ebp]
  00080	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00083	89 4d dc	 mov	 DWORD PTR _v2$[ebp], ecx

; 277  :         RwFrameTranslate(*(RwFrame**)(result + 4), &this->position, rwCOMBINEREPLACE);

  00086	6a 00		 push	 0
  00088	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	05 b8 00 00 00	 add	 eax, 184		; 000000b8H
  00090	50		 push	 eax
  00091	8b 4d e8	 mov	 ecx, DWORD PTR _result$[ebp]
  00094	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00097	52		 push	 edx
  00098	e8 00 00 00 00	 call	 ?RwFrameTranslate@@YAPAURwFrame@@PAU1@PBURwV3d@@W4RwOpCombineType@@@Z ; RwFrameTranslate
  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 278  :         if (this->isUpsideDown == 1)

  000a0	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	83 b8 3c 01 00
	00 01		 cmp	 DWORD PTR [eax+316], 1
  000aa	75 5c		 jne	 SHORT $LN6@SetPositio

; 279  :         {
; 280  :             oneMinusCosine = 1.0 - flt_A0EE08;

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?flt_A0EE08@@3AAMA ; flt_A0EE08
  000b1	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  000b5	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000bd	f2 0f 5c c8	 subsd	 xmm1, xmm0
  000c1	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000c5	f3 0f 11 45 d0	 movss	 DWORD PTR _oneMinusCosine$[ebp], xmm0

; 281  :             RwMatrixRotateOneMinusCosineSine(&v2->modelling, &AxisZ, oneMinusCosine, dword_9FEE08, rwCOMBINEPRECONCA);

  000ca	6a 01		 push	 1
  000cc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?dword_9FEE08@@3AAMA ; dword_9FEE08
  000d1	51		 push	 ecx
  000d2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000db	51		 push	 ecx
  000dc	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _oneMinusCosine$[ebp]
  000e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?AxisZ@@3AAURwV3d@@A ; AxisZ
  000ec	51		 push	 ecx
  000ed	8b 55 dc	 mov	 edx, DWORD PTR _v2$[ebp]
  000f0	83 c2 10	 add	 edx, 16			; 00000010H
  000f3	52		 push	 edx
  000f4	e8 00 00 00 00	 call	 ?RwMatrixRotateOneMinusCosineSine@@YAPAURwMatrix@@PAU1@QAURwV3d@@MMW4RwOpCombineType@@@Z ; RwMatrixRotateOneMinusCosineSine
  000f9	83 c4 14	 add	 esp, 20			; 00000014H

; 282  :             RwFrameUpdateObjects(v2);

  000fc	8b 45 dc	 mov	 eax, DWORD PTR _v2$[ebp]
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 ?RwFrameUpdateObjects@@YAPAURwFrame@@PAU1@@Z ; RwFrameUpdateObjects
  00105	83 c4 04	 add	 esp, 4
$LN6@SetPositio:

; 283  :         }
; 284  :         RwFrameScale(v2, &scale, rwCOMBINEPRECONCA);

  00108	6a 01		 push	 1
  0010a	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _scale$[ebp]
  00110	50		 push	 eax
  00111	8b 4d dc	 mov	 ecx, DWORD PTR _v2$[ebp]
  00114	51		 push	 ecx
  00115	e8 00 00 00 00	 call	 ?RwFrameScale@@YAHPAURwFrame@@PBURwV3d@@W4RwOpCombineType@@@Z ; RwFrameScale
  0011a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 285  :         result = this->isInactive;

  0011d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00120	8b 88 38 01 00
	00		 mov	 ecx, DWORD PTR [eax+312]
  00126	89 4d e8	 mov	 DWORD PTR _result$[ebp], ecx

; 286  :         if (!result)

  00129	83 7d e8 00	 cmp	 DWORD PTR _result$[ebp], 0
  0012d	0f 85 3f 04 00
	00		 jne	 $LN3@SetPositio

; 287  :         {
; 288  :             v4 = this->position.y;

  00133	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00136	f3 0f 10 80 bc
	00 00 00	 movss	 xmm0, DWORD PTR [eax+188]
  0013e	f3 0f 11 45 c4	 movss	 DWORD PTR _v4$[ebp], xmm0

; 289  :             v5 = sS11WarpScale * 10.0;

  00143	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?sS11WarpScale@@3MA
  0014b	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4024000000000000
  00153	f2 0f 11 45 b4	 movsd	 QWORD PTR _v5$[ebp], xmm0

; 290  :             v6 = this->position.z;

  00158	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0015b	f3 0f 10 80 c0
	00 00 00	 movss	 xmm0, DWORD PTR [eax+192]
  00163	f3 0f 11 45 a8	 movss	 DWORD PTR _v6$[ebp], xmm0

; 291  :             translation.x = this->position.x;

  00168	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0016b	f3 0f 10 80 b8
	00 00 00	 movss	 xmm0, DWORD PTR [eax+184]
  00173	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR _translation$[ebp], xmm0

; 292  :             v7 = this->isUpsideDown == 1;

  0017b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0017e	83 b8 3c 01 00
	00 01		 cmp	 DWORD PTR [eax+316], 1
  00185	75 0c		 jne	 SHORT $LN13@SetPositio
  00187	c7 85 fc fd ff
	ff 01 00 00 00	 mov	 DWORD PTR tv131[ebp], 1
  00191	eb 0a		 jmp	 SHORT $LN14@SetPositio
$LN13@SetPositio:
  00193	c7 85 fc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv131[ebp], 0
$LN14@SetPositio:
  0019d	8a 8d fc fd ff
	ff		 mov	 cl, BYTE PTR tv131[ebp]
  001a3	88 4d 9f	 mov	 BYTE PTR _v7$[ebp], cl

; 293  :             translation.y = v4;

  001a6	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _v4$[ebp]
  001ab	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _translation$[ebp+4], xmm0

; 294  :             translation.z = v6;

  001b3	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _v6$[ebp]
  001b8	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _translation$[ebp+8], xmm0

; 295  :             if (v7)

  001c0	0f b6 45 9f	 movzx	 eax, BYTE PTR _v7$[ebp]
  001c4	85 c0		 test	 eax, eax
  001c6	74 14		 je	 SHORT $LN8@SetPositio

; 296  :                 v8 = translation.y - v5;

  001c8	f3 0f 5a 85 dc
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _translation$[ebp+4]
  001d0	f2 0f 5c 45 b4	 subsd	 xmm0, QWORD PTR _v5$[ebp]
  001d5	f2 0f 11 45 8c	 movsd	 QWORD PTR _v8$[ebp], xmm0
  001da	eb 12		 jmp	 SHORT $LN9@SetPositio
$LN8@SetPositio:

; 297  :             else
; 298  :                 v8 = v5 + translation.y;

  001dc	f3 0f 5a 85 dc
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _translation$[ebp+4]
  001e4	f2 0f 58 45 b4	 addsd	 xmm0, QWORD PTR _v5$[ebp]
  001e9	f2 0f 11 45 8c	 movsd	 QWORD PTR _v8$[ebp], xmm0
$LN9@SetPositio:

; 299  :             v9 = *(int*)this->gap144;

  001ee	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  001f1	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [eax+324]
  001f7	89 4d 80	 mov	 DWORD PTR _v9$[ebp], ecx

; 300  :             translation.y = v8;

  001fa	f2 0f 5a 45 8c	 cvtsd2ss xmm0, QWORD PTR _v8$[ebp]
  001ff	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _translation$[ebp+4], xmm0

; 301  :             v10 = *(RwFrame**)(v9 + 4);

  00207	8b 45 80	 mov	 eax, DWORD PTR _v9$[ebp]
  0020a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0020d	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _v10$[ebp], ecx

; 302  :             RwFrameTranslate(*(RwFrame**)(v9 + 4), &translation, rwCOMBINEREPLACE);

  00213	6a 00		 push	 0
  00215	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _translation$[ebp]
  0021b	50		 push	 eax
  0021c	8b 4d 80	 mov	 ecx, DWORD PTR _v9$[ebp]
  0021f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00222	52		 push	 edx
  00223	e8 00 00 00 00	 call	 ?RwFrameTranslate@@YAPAURwFrame@@PAU1@PBURwV3d@@W4RwOpCombineType@@@Z ; RwFrameTranslate
  00228	83 c4 0c	 add	 esp, 12			; 0000000cH

; 303  :             if (this->isUpsideDown == 1)

  0022b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0022e	83 b8 3c 01 00
	00 01		 cmp	 DWORD PTR [eax+316], 1
  00235	75 68		 jne	 SHORT $LN10@SetPositio

; 304  :             {
; 305  :                 v11 = 1.0 - flt_A0EE08;

  00237	a1 00 00 00 00	 mov	 eax, DWORD PTR ?flt_A0EE08@@3AAMA ; flt_A0EE08
  0023c	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00240	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00248	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0024c	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00250	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _v11$[ebp], xmm0

; 306  :                 RwMatrixRotateOneMinusCosineSine(&v10->modelling, &AxisZ, v11, dword_9FEE08, rwCOMBINEPRECONCA);

  00258	6a 01		 push	 1
  0025a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?dword_9FEE08@@3AAMA ; dword_9FEE08
  0025f	51		 push	 ecx
  00260	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00264	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00269	51		 push	 ecx
  0026a	f3 0f 10 85 68
	ff ff ff	 movss	 xmm0, DWORD PTR _v11$[ebp]
  00272	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00277	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?AxisZ@@3AAURwV3d@@A ; AxisZ
  0027d	51		 push	 ecx
  0027e	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _v10$[ebp]
  00284	83 c2 10	 add	 edx, 16			; 00000010H
  00287	52		 push	 edx
  00288	e8 00 00 00 00	 call	 ?RwMatrixRotateOneMinusCosineSine@@YAPAURwMatrix@@PAU1@QAURwV3d@@MMW4RwOpCombineType@@@Z ; RwMatrixRotateOneMinusCosineSine
  0028d	83 c4 14	 add	 esp, 20			; 00000014H

; 307  :                 RwFrameUpdateObjects(v10);

  00290	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _v10$[ebp]
  00296	50		 push	 eax
  00297	e8 00 00 00 00	 call	 ?RwFrameUpdateObjects@@YAPAURwFrame@@PAU1@@Z ; RwFrameUpdateObjects
  0029c	83 c4 04	 add	 esp, 4
$LN10@SetPositio:

; 308  :             }
; 309  :             v12 = 1.0 - sine[(unsigned __int16)(sS11WarpRotSpd * pModeSwitch->frame + 0x4000)];

  0029f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pModeSwitch@@3AAPAUMODESWITCH@@A ; pModeSwitch
  002a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?sS11WarpRotSpd@@3HA ; sS11WarpRotSpd
  002ac	0f af 51 30	 imul	 edx, DWORD PTR [ecx+48]
  002b0	81 c2 00 40 00
	00		 add	 edx, 16384		; 00004000H
  002b6	0f b7 c2	 movzx	 eax, dx
  002b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?sine@@3ABQAMB ; sine
  002bf	8b 11		 mov	 edx, DWORD PTR [ecx]
  002c1	f3 0f 5a 04 82	 cvtss2sd xmm0, DWORD PTR [edx+eax*4]
  002c6	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  002ce	f2 0f 5c c8	 subsd	 xmm1, xmm0
  002d2	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  002d6	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _v12$[ebp], xmm0

; 310  :             RwMatrixRotateOneMinusCosineSine(

  002de	6a 01		 push	 1
  002e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pModeSwitch@@3AAPAUMODESWITCH@@A ; pModeSwitch
  002e5	8b 08		 mov	 ecx, DWORD PTR [eax]
  002e7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?sS11WarpRotSpd@@3HA ; sS11WarpRotSpd
  002ed	0f af 51 30	 imul	 edx, DWORD PTR [ecx+48]
  002f1	0f b7 c2	 movzx	 eax, dx
  002f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?sine@@3ABQAMB ; sine
  002fa	8b 11		 mov	 edx, DWORD PTR [ecx]
  002fc	51		 push	 ecx
  002fd	f3 0f 10 04 82	 movss	 xmm0, DWORD PTR [edx+eax*4]
  00302	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00307	51		 push	 ecx
  00308	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _v12$[ebp]
  00310	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00315	a1 00 00 00 00	 mov	 eax, DWORD PTR ?AxisY@@3AAURwV3d@@A ; AxisY
  0031a	50		 push	 eax
  0031b	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _v10$[ebp]
  00321	83 c1 10	 add	 ecx, 16			; 00000010H
  00324	51		 push	 ecx
  00325	e8 00 00 00 00	 call	 ?RwMatrixRotateOneMinusCosineSine@@YAPAURwMatrix@@PAU1@QAURwV3d@@MMW4RwOpCombineType@@@Z ; RwMatrixRotateOneMinusCosineSine
  0032a	83 c4 14	 add	 esp, 20			; 00000014H

; 311  :                 &v10->modelling,
; 312  :                 &AxisY,
; 313  :                 v12,
; 314  :                 sine[(unsigned __int16)(sS11WarpRotSpd * pModeSwitch->frame)],
; 315  :                 rwCOMBINEPRECONCA);
; 316  :             RwFrameUpdateObjects(v10);

  0032d	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _v10$[ebp]
  00333	50		 push	 eax
  00334	e8 00 00 00 00	 call	 ?RwFrameUpdateObjects@@YAPAURwFrame@@PAU1@@Z ; RwFrameUpdateObjects
  00339	83 c4 04	 add	 esp, 4

; 317  :             RwFrameScale(v10, &scale, rwCOMBINEPRECONCA);

  0033c	6a 01		 push	 1
  0033e	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _scale$[ebp]
  00344	50		 push	 eax
  00345	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _v10$[ebp]
  0034b	51		 push	 ecx
  0034c	e8 00 00 00 00	 call	 ?RwFrameScale@@YAHPAURwFrame@@PBURwV3d@@W4RwOpCombineType@@@Z ; RwFrameScale
  00351	83 c4 0c	 add	 esp, 12			; 0000000cH

; 318  :             v13 = 0;

  00354	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _v13$[ebp], 0

; 319  :             v14 = (float*)&this->gap144[4];

  0035e	b8 01 00 00 00	 mov	 eax, 1
  00363	c1 e0 02	 shl	 eax, 2
  00366	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00369	8d 94 01 44 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+324]
  00370	89 95 44 ff ff
	ff		 mov	 DWORD PTR _v14$[ebp], edx
$LN4@SetPositio:

; 320  :             do
; 321  :             {
; 322  :                 v15 = sS11WarpScale + *(v14 - 14);

  00376	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _v14$[ebp]
  0037c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sS11WarpScale@@3MA
  00384	f3 0f 58 40 c8	 addss	 xmm0, DWORD PTR [eax-56]
  00389	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0038d	f2 0f 11 85 34
	ff ff ff	 movsd	 QWORD PTR _v15$[ebp], xmm0

; 323  :                 v16 = *v14;

  00395	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _v14$[ebp]
  0039b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0039f	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR _v16$[ebp], xmm0

; 324  :                 v17 = pModeSwitch->frame - v13 * sS11WarpEffectRotateDelay;

  003a7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pModeSwitch@@3AAPAUMODESWITCH@@A ; pModeSwitch
  003ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ae	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _v13$[ebp]
  003b4	0f af 15 00 00
	00 00		 imul	 edx, DWORD PTR ?sS11WarpEffectRotateDelay@@3HA ; sS11WarpEffectRotateDelay
  003bb	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  003be	2b c2		 sub	 eax, edx
  003c0	89 85 1c ff ff
	ff		 mov	 DWORD PTR _v17$[ebp], eax

; 325  :                 scale.z = v15;

  003c6	f2 0f 5a 85 34
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR _v15$[ebp]
  003ce	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _scale$[ebp+8], xmm0

; 326  :                 v18 = sS11WarpRotSpd * v17;

  003d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sS11WarpRotSpd@@3HA ; sS11WarpRotSpd
  003db	0f af 85 1c ff
	ff ff		 imul	 eax, DWORD PTR _v17$[ebp]
  003e2	66 89 85 10 ff
	ff ff		 mov	 WORD PTR _v18$[ebp], ax

; 327  :                 scale.y = v15;

  003e9	f2 0f 5a 85 34
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR _v15$[ebp]
  003f1	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _scale$[ebp+4], xmm0

; 328  :                 scale.x = v15;

  003f9	f2 0f 5a 85 34
	ff ff ff	 cvtsd2ss xmm0, QWORD PTR _v15$[ebp]
  00401	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _scale$[ebp], xmm0

; 329  :                 v19 = *(RwFrame**)(LODWORD(v16) + 4);

  00409	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _v16$[ebp]
  0040f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00412	89 8d 04 ff ff
	ff		 mov	 DWORD PTR _v19$[ebp], ecx

; 330  :                 RwFrameTranslate(*(RwFrame**)(LODWORD(v16) + 4), &translation, rwCOMBINEREPLACE);

  00418	6a 00		 push	 0
  0041a	8d 85 d8 fe ff
	ff		 lea	 eax, DWORD PTR _translation$[ebp]
  00420	50		 push	 eax
  00421	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _v16$[ebp]
  00427	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0042a	52		 push	 edx
  0042b	e8 00 00 00 00	 call	 ?RwFrameTranslate@@YAPAURwFrame@@PAU1@PBURwV3d@@W4RwOpCombineType@@@Z ; RwFrameTranslate
  00430	83 c4 0c	 add	 esp, 12			; 0000000cH

; 331  :                 if (this->isUpsideDown == 1)

  00433	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00436	83 b8 3c 01 00
	00 01		 cmp	 DWORD PTR [eax+316], 1
  0043d	75 68		 jne	 SHORT $LN11@SetPositio

; 332  :                 {
; 333  :                     v20 = 1.0 - flt_A0EE08;

  0043f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?flt_A0EE08@@3AAMA ; flt_A0EE08
  00444	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00448	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00450	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00454	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00458	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _v20$[ebp], xmm0

; 334  :                     RwMatrixRotateOneMinusCosineSine(&v19->modelling, &AxisZ, v20, dword_9FEE08, rwCOMBINEPRECONCA);

  00460	6a 01		 push	 1
  00462	a1 00 00 00 00	 mov	 eax, DWORD PTR ?dword_9FEE08@@3AAMA ; dword_9FEE08
  00467	51		 push	 ecx
  00468	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0046c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00471	51		 push	 ecx
  00472	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _v20$[ebp]
  0047a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?AxisZ@@3AAURwV3d@@A ; AxisZ
  00485	51		 push	 ecx
  00486	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _v19$[ebp]
  0048c	83 c2 10	 add	 edx, 16			; 00000010H
  0048f	52		 push	 edx
  00490	e8 00 00 00 00	 call	 ?RwMatrixRotateOneMinusCosineSine@@YAPAURwMatrix@@PAU1@QAURwV3d@@MMW4RwOpCombineType@@@Z ; RwMatrixRotateOneMinusCosineSine
  00495	83 c4 14	 add	 esp, 20			; 00000014H

; 335  :                     RwFrameUpdateObjects(v19);

  00498	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _v19$[ebp]
  0049e	50		 push	 eax
  0049f	e8 00 00 00 00	 call	 ?RwFrameUpdateObjects@@YAPAURwFrame@@PAU1@@Z ; RwFrameUpdateObjects
  004a4	83 c4 04	 add	 esp, 4
$LN11@SetPositio:

; 336  :                 }
; 337  :                 v21 = 1.0 - sine[(unsigned __int16)(v18 + 0x4000)];

  004a7	0f b7 85 10 ff
	ff ff		 movzx	 eax, WORD PTR _v18$[ebp]
  004ae	05 00 40 00 00	 add	 eax, 16384		; 00004000H
  004b3	0f b7 c8	 movzx	 ecx, ax
  004b6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?sine@@3ABQAMB ; sine
  004bc	8b 02		 mov	 eax, DWORD PTR [edx]
  004be	f3 0f 5a 04 88	 cvtss2sd xmm0, DWORD PTR [eax+ecx*4]
  004c3	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  004cb	f2 0f 5c c8	 subsd	 xmm1, xmm0
  004cf	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  004d3	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _v21$[ebp], xmm0

; 338  :                 RwMatrixRotateOneMinusCosineSine(&v19->modelling, &AxisY, v21, sine[v18], rwCOMBINEPRECONCA);

  004db	6a 01		 push	 1
  004dd	0f b7 85 10 ff
	ff ff		 movzx	 eax, WORD PTR _v18$[ebp]
  004e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?sine@@3ABQAMB ; sine
  004ea	8b 11		 mov	 edx, DWORD PTR [ecx]
  004ec	51		 push	 ecx
  004ed	f3 0f 10 04 82	 movss	 xmm0, DWORD PTR [edx+eax*4]
  004f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004f7	51		 push	 ecx
  004f8	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _v21$[ebp]
  00500	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00505	a1 00 00 00 00	 mov	 eax, DWORD PTR ?AxisY@@3AAURwV3d@@A ; AxisY
  0050a	50		 push	 eax
  0050b	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _v19$[ebp]
  00511	83 c1 10	 add	 ecx, 16			; 00000010H
  00514	51		 push	 ecx
  00515	e8 00 00 00 00	 call	 ?RwMatrixRotateOneMinusCosineSine@@YAPAURwMatrix@@PAU1@QAURwV3d@@MMW4RwOpCombineType@@@Z ; RwMatrixRotateOneMinusCosineSine
  0051a	83 c4 14	 add	 esp, 20			; 00000014H

; 339  :                 RwFrameUpdateObjects(v19);

  0051d	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _v19$[ebp]
  00523	50		 push	 eax
  00524	e8 00 00 00 00	 call	 ?RwFrameUpdateObjects@@YAPAURwFrame@@PAU1@@Z ; RwFrameUpdateObjects
  00529	83 c4 04	 add	 esp, 4

; 340  :                 result = RwFrameScale(v19, &scale, rwCOMBINEPRECONCA);

  0052c	6a 01		 push	 1
  0052e	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _scale$[ebp]
  00534	50		 push	 eax
  00535	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _v19$[ebp]
  0053b	51		 push	 ecx
  0053c	e8 00 00 00 00	 call	 ?RwFrameScale@@YAHPAURwFrame@@PBURwV3d@@W4RwOpCombineType@@@Z ; RwFrameScale
  00541	83 c4 0c	 add	 esp, 12			; 0000000cH
  00544	89 45 e8	 mov	 DWORD PTR _result$[ebp], eax

; 341  :                 ++v13;

  00547	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _v13$[ebp]
  0054d	83 c0 01	 add	 eax, 1
  00550	89 85 50 ff ff
	ff		 mov	 DWORD PTR _v13$[ebp], eax

; 342  :                 ++v14;

  00556	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _v14$[ebp]
  0055c	83 c0 04	 add	 eax, 4
  0055f	89 85 44 ff ff
	ff		 mov	 DWORD PTR _v14$[ebp], eax

; 343  :             } while (v13 < 10);

  00565	83 bd 50 ff ff
	ff 0a		 cmp	 DWORD PTR _v13$[ebp], 10 ; 0000000aH
  0056c	0f 8c 04 fe ff
	ff		 jl	 $LN4@SetPositio
$LN3@SetPositio:

; 344  :         }
; 345  :     }
; 346  : }

  00572	52		 push	 edx
  00573	8b cd		 mov	 ecx, ebp
  00575	50		 push	 eax
  00576	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN18@SetPositio
  0057c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00581	58		 pop	 eax
  00582	5a		 pop	 edx
  00583	5f		 pop	 edi
  00584	5e		 pop	 esi
  00585	5b		 pop	 ebx
  00586	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00589	33 cd		 xor	 ecx, ebp
  0058b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00590	81 c4 04 02 00
	00		 add	 esp, 516		; 00000204H
  00596	3b ec		 cmp	 ebp, esp
  00598	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0059d	8b e5		 mov	 esp, ebp
  0059f	5d		 pop	 ebp
  005a0	c3		 ret	 0
  005a1	0f 1f 00	 npad	 3
$LN18@SetPositio:
  005a4	02 00 00 00	 DD	 2
  005a8	00 00 00 00	 DD	 $LN17@SetPositio
$LN17@SetPositio:
  005ac	d8 fe ff ff	 DD	 -296			; fffffed8H
  005b0	0c 00 00 00	 DD	 12			; 0000000cH
  005b4	00 00 00 00	 DD	 $LN15@SetPositio
  005b8	c4 fe ff ff	 DD	 -316			; fffffec4H
  005bc	0c 00 00 00	 DD	 12			; 0000000cH
  005c0	00 00 00 00	 DD	 $LN16@SetPositio
$LN16@SetPositio:
  005c4	73		 DB	 115			; 00000073H
  005c5	63		 DB	 99			; 00000063H
  005c6	61		 DB	 97			; 00000061H
  005c7	6c		 DB	 108			; 0000006cH
  005c8	65		 DB	 101			; 00000065H
  005c9	00		 DB	 0
$LN15@SetPositio:
  005ca	74		 DB	 116			; 00000074H
  005cb	72		 DB	 114			; 00000072H
  005cc	61		 DB	 97			; 00000061H
  005cd	6e		 DB	 110			; 0000006eH
  005ce	73		 DB	 115			; 00000073H
  005cf	6c		 DB	 108			; 0000006cH
  005d0	61		 DB	 97			; 00000061H
  005d1	74		 DB	 116			; 00000074H
  005d2	69		 DB	 105			; 00000069H
  005d3	6f		 DB	 111			; 0000006fH
  005d4	6e		 DB	 110			; 0000006eH
  005d5	00		 DB	 0
?SetPosition@TObjS11Warp@@QAEXXZ ENDP			; TObjS11Warp::SetPosition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\Tsonic\src\stage\stage11_Warp\o_s11_warp.cpp
;	COMDAT ?IsNowFading@TObjS11Warp@@QAE_NXZ
_TEXT	SEGMENT
tv77 = -228						; size = 4
tv132 = -224						; size = 4
tv138 = -220						; size = 4
tv92 = -216						; size = 4
tv72 = -212						; size = 4
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?IsNowFading@TObjS11Warp@@QAE_NXZ PROC			; TObjS11Warp::IsNowFading, COMDAT
; _this$ = ecx

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00013	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __AAD340E9_o_s11_warp@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 164  :     return FADESCREEN::GetMainFadeScreenPointer()->GetRatio() != FADESCREEN::GetMainFadeScreenPointer()->GetRatioTarget();

  0002d	e8 00 00 00 00	 call	 ?GetMainFadeScreenPointer@FADESCREEN@@SAPAU1@XZ ; FADESCREEN::GetMainFadeScreenPointer
  00032	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv66[ebp], eax
  00038	e8 00 00 00 00	 call	 ?GetMainFadeScreenPointer@FADESCREEN@@SAPAU1@XZ ; FADESCREEN::GetMainFadeScreenPointer
  0003d	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv72[ebp], eax
  00043	8b f4		 mov	 esi, esp
  00045	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv72[ebp]
  0004b	8b 10		 mov	 edx, DWORD PTR [eax]
  0004d	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00053	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00056	ff d0		 call	 eax
  00058	3b f4		 cmp	 esi, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	d9 9d 28 ff ff
	ff		 fstp	 DWORD PTR tv92[ebp]
  00065	f3 0f 10 85 28
	ff ff ff	 movss	 xmm0, DWORD PTR tv92[ebp]
  0006d	8b f4		 mov	 esi, esp
  0006f	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv66[ebp]
  00075	8b 11		 mov	 edx, DWORD PTR [ecx]
  00077	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv66[ebp]
  0007d	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00080	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR tv138[ebp], xmm0
  00088	ff d0		 call	 eax
  0008a	3b f4		 cmp	 esi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	d9 9d 20 ff ff
	ff		 fstp	 DWORD PTR tv132[ebp]
  00097	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR tv132[ebp]
  0009f	f3 0f 10 8d 24
	ff ff ff	 movss	 xmm1, DWORD PTR tv138[ebp]
  000a7	0f 2e c1	 ucomiss xmm0, xmm1
  000aa	9f		 lahf
  000ab	f6 c4 44	 test	 ah, 68			; 00000044H
  000ae	7b 0c		 jnp	 SHORT $LN3@IsNowFadin
  000b0	c7 85 1c ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv77[ebp], 1
  000ba	eb 0a		 jmp	 SHORT $LN4@IsNowFadin
$LN3@IsNowFadin:
  000bc	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv77[ebp], 0
$LN4@IsNowFadin:
  000c6	8a 85 1c ff ff
	ff		 mov	 al, BYTE PTR tv77[ebp]

; 165  : }

  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000d5	3b ec		 cmp	 ebp, esp
  000d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
?IsNowFading@TObjS11Warp@@QAE_NXZ ENDP			; TObjS11Warp::IsNowFading
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\Tsonic\src\stage\stage11_Warp\o_s11_warp.cpp
;	COMDAT ?Exec@TObjS11Warp@@UAEXXZ
_TEXT	SEGMENT
tv290 = -408						; size = 4
tv269 = -408						; size = 4
tv194 = -408						; size = 4
tv189 = -408						; size = 4
tv150 = -408						; size = 4
_i$1 = -208						; size = 4
_v20$ = -196						; size = 12
_v19$ = -176						; size = 12
_rotation$ = -156					; size = 12
_targetPosition$ = -136					; size = 4
_v16$ = -124						; size = 4
_warpPlayerNo$ = -96					; size = 4
_currentPlayerTeam$ = -84				; size = 4
_v9$ = -72						; size = 4
_v8$ = -57						; size = 1
_a2$ = -48						; size = 4
_v4$ = -36						; size = 4
_v3$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?Exec@TObjS11Warp@@UAEXXZ PROC				; TObjS11Warp::Exec, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 01 00
	00		 sub	 esp, 408		; 00000198H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 68 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-408]
  00013	b9 66 00 00 00	 mov	 ecx, 102		; 00000066H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __AAD340E9_o_s11_warp@cpp
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 18   :     ::SETOBJ_PARAM* v3; // eax
; 19   :     int v4; // ecx
; 20   :     float a2; // ST10_4
; 21   :     bool v8; // zf
; 22   :     TObjTeam* v9; // edx
; 23   :     TObjTeam* currentPlayerTeam; // eax
; 24   :     int warpPlayerNo; // eax
; 25   :     double v15; // st6
; 26   :     sAngle* v16; // ecx
; 27   :     RwV3d* targetPosition; // [esp-4h] [ebp-38h]
; 28   :     sAngle rotation; // [esp+10h] [ebp-24h]
; 29   :     sAngle v19; // [esp+1Ch] [ebp-18h]
; 30   :     sAngle v20; // [esp+28h] [ebp-Ch]
; 31   : 
; 32   :     v3 = SETOBJ_PARAM;

  00037	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0003d	89 4d e8	 mov	 DWORD PTR _v3$[ebp], ecx

; 33   :     v4 = *&v3->SETFlag_HHC;

  00040	8b 45 e8	 mov	 eax, DWORD PTR _v3$[ebp]
  00043	0f be 48 18	 movsx	 ecx, BYTE PTR [eax+24]
  00047	89 4d dc	 mov	 DWORD PTR _v4$[ebp], ecx

; 34   :     v20.x = 0;

  0004a	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _v20$[ebp], 0

; 35   :     v20.y = 0;

  00054	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _v20$[ebp+4], 0

; 36   :     v20.z = 0;

  0005e	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _v20$[ebp+8], 0

; 37   :     if (!(v4 & 0x400) && (a2 = (v3->renderDistance + 1) * 100.0 * ((v3->renderDistance + 1) * 100.0), setobjCheckRangeOut2(&v3->position, a2)) || v3->SETFlag_HHC & 4)  //#inline TObjSetObj::CheckMustKill((void))

  00068	8b 45 dc	 mov	 eax, DWORD PTR _v4$[ebp]
  0006b	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00070	75 54		 jne	 SHORT $LN10@Exec
  00072	8b 45 e8	 mov	 eax, DWORD PTR _v3$[ebp]
  00075	0f be 48 2b	 movsx	 ecx, BYTE PTR [eax+43]
  00079	83 c1 01	 add	 ecx, 1
  0007c	f2 0f 2a c1	 cvtsi2sd xmm0, ecx
  00080	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4059000000000000
  00088	8b 55 e8	 mov	 edx, DWORD PTR _v3$[ebp]
  0008b	0f be 42 2b	 movsx	 eax, BYTE PTR [edx+43]
  0008f	83 c0 01	 add	 eax, 1
  00092	f2 0f 2a c8	 cvtsi2sd xmm1, eax
  00096	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@4059000000000000
  0009e	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  000a2	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000a6	f3 0f 11 45 d0	 movss	 DWORD PTR _a2$[ebp], xmm0
  000ab	51		 push	 ecx
  000ac	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _a2$[ebp]
  000b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b6	8b 4d e8	 mov	 ecx, DWORD PTR _v3$[ebp]
  000b9	51		 push	 ecx
  000ba	e8 00 00 00 00	 call	 ?setobjCheckRangeOut2@@YAHPBURwV3d@@M@Z ; setobjCheckRangeOut2
  000bf	83 c4 08	 add	 esp, 8
  000c2	85 c0		 test	 eax, eax
  000c4	75 0c		 jne	 SHORT $LN9@Exec
$LN10@Exec:
  000c6	8b 45 e8	 mov	 eax, DWORD PTR _v3$[ebp]
  000c9	0f be 48 18	 movsx	 ecx, BYTE PTR [eax+24]
  000cd	83 e1 04	 and	 ecx, 4
  000d0	74 0d		 je	 SHORT $LN7@Exec
$LN9@Exec:

; 38   :     {
; 39   :         Kill();

  000d2	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	e8 00 00 00 00	 call	 ?Kill@TObject@@QAEXXZ	; TObject::Kill

; 40   :     }

  000da	e9 af 04 00 00	 jmp	 $LN8@Exec
$LN7@Exec:

; 41   :     else
; 42   :     {
; 43   :         if (isInactive != 1)

  000df	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000e2	83 b8 38 01 00
	00 01		 cmp	 DWORD PTR [eax+312], 1
  000e9	0f 84 83 04 00
	00		 je	 $LN11@Exec

; 44   :         {
; 45   :             switch (warpState)

  000ef	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000f2	8b 88 00 01 00
	00		 mov	 ecx, DWORD PTR [eax+256]
  000f8	89 8d 68 fe ff
	ff		 mov	 DWORD PTR tv150[ebp], ecx
  000fe	83 bd 68 fe ff
	ff 03		 cmp	 DWORD PTR tv150[ebp], 3
  00105	0f 87 5f 04 00
	00		 ja	 $LN29@Exec
  0010b	8b 95 68 fe ff
	ff		 mov	 edx, DWORD PTR tv150[ebp]
  00111	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN35@Exec[edx*4]
$LN12@Exec:

; 46   :             {
; 47   :                 case 0:
; 48   :                 {
; 49   :                     symbolGlowIntensity = (sine[(unsigned short)(S11_WARP_BRIGHTNESS_SPEED * pModeSwitch->frame + 0x4000)] + 1.0) * ((S11_WARP_MAX_BRIGHTNESS - S11_WARP_MIN_BRIGHTNESS) * 0.5) + S11_WARP_MIN_BRIGHTNESS;

  00118	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pModeSwitch@@3AAPAUMODESWITCH@@A ; pModeSwitch
  0011d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?S11_WARP_BRIGHTNESS_SPEED@@3HA ; S11_WARP_BRIGHTNESS_SPEED
  00125	0f af 51 30	 imul	 edx, DWORD PTR [ecx+48]
  00129	81 c2 00 40 00
	00		 add	 edx, 16384		; 00004000H
  0012f	0f b7 c2	 movzx	 eax, dx
  00132	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?sine@@3ABQAMB ; sine
  00138	8b 11		 mov	 edx, DWORD PTR [ecx]
  0013a	f3 0f 5a 04 82	 cvtss2sd xmm0, DWORD PTR [edx+eax*4]
  0013f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00147	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?S11_WARP_MAX_BRIGHTNESS@@3MA
  0014f	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR ?S11_WARP_MIN_BRIGHTNESS@@3MA
  00157	f3 0f 5a c9	 cvtss2sd xmm1, xmm1
  0015b	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
  00163	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00167	f3 0f 5a 0d 00
	00 00 00	 cvtss2sd xmm1, DWORD PTR ?S11_WARP_MIN_BRIGHTNESS@@3MA
  0016f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00173	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00177	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0017a	f3 0f 11 80 0c
	01 00 00	 movss	 DWORD PTR [eax+268], xmm0

; 50   :                     if (CheckPlayer() && !IsNowFading())

  00182	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00185	e8 00 00 00 00	 call	 ?CheckPlayer@TObjS11Warp@@QAEHXZ ; TObjS11Warp::CheckPlayer
  0018a	85 c0		 test	 eax, eax
  0018c	0f 84 c1 01 00
	00		 je	 $LN13@Exec
  00192	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00195	e8 00 00 00 00	 call	 ?IsNowFading@TObjS11Warp@@QAE_NXZ ; TObjS11Warp::IsNowFading
  0019a	0f b6 c0	 movzx	 eax, al
  0019d	85 c0		 test	 eax, eax
  0019f	0f 85 ae 01 00
	00		 jne	 $LN13@Exec

; 51   :                     {
; 52   :                         warpState = 1;

  001a5	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  001a8	c7 80 00 01 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+256], 1

; 53   :                         warpDelayTimer = 0;

  001b2	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  001b5	c7 80 08 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+264], 0

; 54   :                         if (SndSE)

  001bf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SndSE@@3AAPAUIsndSE@@A ; SndSE
  001c4	83 38 00	 cmp	 DWORD PTR [eax], 0
  001c7	74 3c		 je	 SHORT $LN15@Exec

; 55   :                         {
; 56   :                             IsndSE::Play(0x5A00, SndSE, 0, 0);

  001c9	6a 00		 push	 0
  001cb	6a 00		 push	 0
  001cd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SndSE@@3AAPAUIsndSE@@A ; SndSE
  001d2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d4	51		 push	 ecx
  001d5	68 00 5a 00 00	 push	 23040			; 00005a00H
  001da	e8 00 00 00 00	 call	 ?Play@IsndSE@@SAHFPAU1@DH@Z ; IsndSE::Play
  001df	83 c4 10	 add	 esp, 16			; 00000010H

; 57   :                             if (SndSE)

  001e2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SndSE@@3AAPAUIsndSE@@A ; SndSE
  001e7	83 38 00	 cmp	 DWORD PTR [eax], 0
  001ea	74 19		 je	 SHORT $LN15@Exec

; 58   :                             {
; 59   :                                 IsndSE::Play(0x5A01, SndSE, 0, 0);

  001ec	6a 00		 push	 0
  001ee	6a 00		 push	 0
  001f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SndSE@@3AAPAUIsndSE@@A ; SndSE
  001f5	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f7	51		 push	 ecx
  001f8	68 01 5a 00 00	 push	 23041			; 00005a01H
  001fd	e8 00 00 00 00	 call	 ?Play@IsndSE@@SAHFPAU1@DH@Z ; IsndSE::Play
  00202	83 c4 10	 add	 esp, 16			; 00000010H
$LN15@Exec:

; 60   :                             }
; 61   :                         }
; 62   :                         FADESCREEN::GetMainFadeScreenPointer()->CustomOut();

  00205	e8 00 00 00 00	 call	 ?GetMainFadeScreenPointer@FADESCREEN@@SAPAU1@XZ ; FADESCREEN::GetMainFadeScreenPointer
  0020a	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv189[ebp], eax
  00210	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR tv189[ebp]
  00216	8b 10		 mov	 edx, DWORD PTR [eax]
  00218	8b f4		 mov	 esi, esp
  0021a	8b 8d 68 fe ff
	ff		 mov	 ecx, DWORD PTR tv189[ebp]
  00220	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00223	ff d0		 call	 eax
  00225	3b f4		 cmp	 esi, esp
  00227	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 63   :                         v8 = this->isUpsideDown == 1;

  0022c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0022f	83 b8 3c 01 00
	00 01		 cmp	 DWORD PTR [eax+316], 1
  00236	75 0c		 jne	 SHORT $LN31@Exec
  00238	c7 85 68 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv194[ebp], 1
  00242	eb 0a		 jmp	 SHORT $LN32@Exec
$LN31@Exec:
  00244	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv194[ebp], 0
$LN32@Exec:
  0024e	8a 8d 68 fe ff
	ff		 mov	 cl, BYTE PTR tv194[ebp]
  00254	88 4d c7	 mov	 BYTE PTR _v8$[ebp], cl

; 64   :                         rotation.x = 0;

  00257	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rotation$[ebp], 0

; 65   :                         rotation.y = 0;

  00261	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rotation$[ebp+4], 0

; 66   :                         rotation.z = 0;

  0026b	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _rotation$[ebp+8], 0

; 67   :                         if (v8)

  00275	0f b6 45 c7	 movzx	 eax, BYTE PTR _v8$[ebp]
  00279	85 c0		 test	 eax, eax
  0027b	74 0a		 je	 SHORT $LN16@Exec

; 68   :                         {
; 69   :                             rotation.z = 0x8000;

  0027d	c7 85 6c ff ff
	ff 00 80 00 00	 mov	 DWORD PTR _rotation$[ebp+8], 32768 ; 00008000H
$LN16@Exec:

; 70   :                         }
; 71   :                         Construct_PtclTask_Stage(0, &this->position, &rotation);

  00287	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _rotation$[ebp]
  0028d	50		 push	 eax
  0028e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00291	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  00297	51		 push	 ecx
  00298	6a 00		 push	 0
  0029a	e8 00 00 00 00	 call	 ?Construct_PtclTask_Stage@@YAXIPAURwV3d@@PAUsAngle@@@Z ; Construct_PtclTask_Stage
  0029f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 72   :                         v9 = teamTOp[currentPlayerNo];

  002a2	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  002a5	8b 88 04 01 00
	00		 mov	 ecx, DWORD PTR [eax+260]
  002ab	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  002b1	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  002b4	89 45 b8	 mov	 DWORD PTR _v9$[ebp], eax

; 73   : 
; 74   : 
; 75   :                         for (int i = 0; i < 3; ++i)

  002b7	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1[ebp], 0
  002c1	eb 0f		 jmp	 SHORT $LN6@Exec
$LN4@Exec:
  002c3	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _i$1[ebp]
  002c9	83 c0 01	 add	 eax, 1
  002cc	89 85 30 ff ff
	ff		 mov	 DWORD PTR _i$1[ebp], eax
$LN6@Exec:
  002d2	83 bd 30 ff ff
	ff 03		 cmp	 DWORD PTR _i$1[ebp], 3
  002d9	7d 54		 jge	 SHORT $LN5@Exec

; 76   :                         {
; 77   :                             warpDelayPosition[(v9->playerNo[i] % 3)] = *PlayerMaster::GetPlayerPositionHistory(v9->playerNo[i], 0);

  002db	6a 00		 push	 0
  002dd	8b 45 b8	 mov	 eax, DWORD PTR _v9$[ebp]
  002e0	03 85 30 ff ff
	ff		 add	 eax, DWORD PTR _i$1[ebp]
  002e6	0f be 88 10 01
	00 00		 movsx	 ecx, BYTE PTR [eax+272]
  002ed	51		 push	 ecx
  002ee	e8 00 00 00 00	 call	 ?GetPlayerPositionHistory@PlayerMaster@@SAPAURwV3d@@HE@Z ; PlayerMaster::GetPlayerPositionHistory
  002f3	83 c4 08	 add	 esp, 8
  002f6	8b c8		 mov	 ecx, eax
  002f8	8b 55 b8	 mov	 edx, DWORD PTR _v9$[ebp]
  002fb	03 95 30 ff ff
	ff		 add	 edx, DWORD PTR _i$1[ebp]
  00301	0f be 82 10 01
	00 00		 movsx	 eax, BYTE PTR [edx+272]
  00308	99		 cdq
  00309	be 03 00 00 00	 mov	 esi, 3
  0030e	f7 fe		 idiv	 esi
  00310	6b c2 0c	 imul	 eax, edx, 12
  00313	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00316	8d 84 02 dc 00
	00 00		 lea	 eax, DWORD PTR [edx+eax+220]
  0031d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0031f	89 10		 mov	 DWORD PTR [eax], edx
  00321	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00324	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00327	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0032a	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 78   :                         }

  0032d	eb 94		 jmp	 SHORT $LN4@Exec
$LN5@Exec:

; 79   :                         NoSpeed();

  0032f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00332	e8 00 00 00 00	 call	 ?NoSpeed@TObjS11Warp@@QAEPAURwV3d@@XZ ; TObjS11Warp::NoSpeed

; 80   :                         teamTOp[currentPlayerNo]->SetMutekiTime(sS11WarpOnCount);

  00337	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sS11WarpOnCount@@3HA ; sS11WarpOnCount
  0033c	50		 push	 eax
  0033d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00340	8b 91 04 01 00
	00		 mov	 edx, DWORD PTR [ecx+260]
  00346	a1 00 00 00 00	 mov	 eax, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  0034b	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0034e	e8 00 00 00 00	 call	 ?SetMutekiTime@TObjTeam@@QAEXI@Z ; TObjTeam::SetMutekiTime
$LN13@Exec:

; 81   :                     }
; 82   :                     break;

  00353	e9 12 02 00 00	 jmp	 $LN2@Exec
$LN17@Exec:

; 83   :                 }
; 84   :                 case 1:
; 85   :                 {
; 86   :                     ++warpDelayTimer;

  00358	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0035b	8b 88 08 01 00
	00		 mov	 ecx, DWORD PTR [eax+264]
  00361	83 c1 01	 add	 ecx, 1
  00364	8b 55 f4	 mov	 edx, DWORD PTR _this$[ebp]
  00367	89 8a 08 01 00
	00		 mov	 DWORD PTR [edx+264], ecx

; 87   :                     NoSpeed();

  0036d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00370	e8 00 00 00 00	 call	 ?NoSpeed@TObjS11Warp@@QAEPAURwV3d@@XZ ; TObjS11Warp::NoSpeed

; 88   :                     if (warpDelayTimer == sS11WarpOnCount)

  00375	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00378	8b 88 08 01 00
	00		 mov	 ecx, DWORD PTR [eax+264]
  0037e	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?sS11WarpOnCount@@3HA ; sS11WarpOnCount
  00384	75 15		 jne	 SHORT $LN18@Exec

; 89   :                     {
; 90   :                         warpState = 2;

  00386	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00389	c7 80 00 01 00
	00 02 00 00 00	 mov	 DWORD PTR [eax+256], 2

; 91   :                         NoSpeed();

  00393	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00396	e8 00 00 00 00	 call	 ?NoSpeed@TObjS11Warp@@QAEPAURwV3d@@XZ ; TObjS11Warp::NoSpeed
$LN18@Exec:

; 92   :                     }
; 93   :                     currentPlayerTeam = teamTOp[this->currentPlayerNo];

  0039b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0039e	8b 88 04 01 00
	00		 mov	 ecx, DWORD PTR [eax+260]
  003a4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  003aa	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  003ad	89 45 ac	 mov	 DWORD PTR _currentPlayerTeam$[ebp], eax

; 94   :                     if (currentPlayerTeam->MutekiTime <= 1)// #inline TObjTeam::GetMutekiTime(const(void))

  003b0	8b 45 ac	 mov	 eax, DWORD PTR _currentPlayerTeam$[ebp]
  003b3	0f bf 88 02 02
	00 00		 movsx	 ecx, WORD PTR [eax+514]
  003ba	83 f9 01	 cmp	 ecx, 1
  003bd	7f 0a		 jg	 SHORT $LN19@Exec

; 95   :                     {
; 96   :                         currentPlayerTeam->SetMutekiTime(2);

  003bf	6a 02		 push	 2
  003c1	8b 4d ac	 mov	 ecx, DWORD PTR _currentPlayerTeam$[ebp]
  003c4	e8 00 00 00 00	 call	 ?SetMutekiTime@TObjTeam@@QAEXI@Z ; TObjTeam::SetMutekiTime
$LN19@Exec:

; 97   :                     }
; 98   :                     break;

  003c9	e9 9c 01 00 00	 jmp	 $LN2@Exec
$LN20@Exec:

; 99   :                 }
; 100  :                 case 2:
; 101  :                 {
; 102  :                     if (IsNowFading())

  003ce	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  003d1	e8 00 00 00 00	 call	 ?IsNowFading@TObjS11Warp@@QAE_NXZ ; TObjS11Warp::IsNowFading
  003d6	0f b6 c0	 movzx	 eax, al
  003d9	85 c0		 test	 eax, eax
  003db	74 3b		 je	 SHORT $LN21@Exec

; 103  :                     {
; 104  :                         NoSpeed();

  003dd	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  003e0	e8 00 00 00 00	 call	 ?NoSpeed@TObjS11Warp@@QAEPAURwV3d@@XZ ; TObjS11Warp::NoSpeed

; 105  :                         currentPlayerTeam = teamTOp[this->currentPlayerNo];

  003e5	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  003e8	8b 88 04 01 00
	00		 mov	 ecx, DWORD PTR [eax+260]
  003ee	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  003f4	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  003f7	89 45 ac	 mov	 DWORD PTR _currentPlayerTeam$[ebp], eax

; 106  :                         if (currentPlayerTeam->MutekiTime <= 1)// #inline TObjTeam::GetMutekiTime(const(void))

  003fa	8b 45 ac	 mov	 eax, DWORD PTR _currentPlayerTeam$[ebp]
  003fd	0f bf 88 02 02
	00 00		 movsx	 ecx, WORD PTR [eax+514]
  00404	83 f9 01	 cmp	 ecx, 1
  00407	7f 0a		 jg	 SHORT $LN23@Exec

; 107  :                         {
; 108  :                             currentPlayerTeam->SetMutekiTime(2);

  00409	6a 02		 push	 2
  0040b	8b 4d ac	 mov	 ecx, DWORD PTR _currentPlayerTeam$[ebp]
  0040e	e8 00 00 00 00	 call	 ?SetMutekiTime@TObjTeam@@QAEXI@Z ; TObjTeam::SetMutekiTime
$LN23@Exec:

; 109  :                         }
; 110  :                     }

  00413	e9 43 01 00 00	 jmp	 $LN22@Exec
$LN21@Exec:

; 111  :                     else
; 112  :                     {
; 113  :                         if (Action.stageNo == LevelID_HangCastle)// #inline ACTION::GetCurrentStageNo(void)

  00418	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Action@@3AAUACTION@@A ; Action
  0041d	83 78 28 0c	 cmp	 DWORD PTR [eax+40], 12	; 0000000cH
  00421	0f 85 c8 00 00
	00		 jne	 $LN24@Exec

; 114  :                         {
; 115  :                             warpPlayerNo = this->currentPlayerNo;

  00427	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0042a	8b 88 04 01 00
	00		 mov	 ecx, DWORD PTR [eax+260]
  00430	89 4d a0	 mov	 DWORD PTR _warpPlayerNo$[ebp], ecx

; 116  :                             v8 = teamTOp[warpPlayerNo]->formationNo == 2;

  00433	8b 45 a0	 mov	 eax, DWORD PTR _warpPlayerNo$[ebp]
  00436	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  0043c	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0043f	83 ba 40 01 00
	00 02		 cmp	 DWORD PTR [edx+320], 2
  00446	75 0c		 jne	 SHORT $LN33@Exec
  00448	c7 85 68 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv269[ebp], 1
  00452	eb 0a		 jmp	 SHORT $LN34@Exec
$LN33@Exec:
  00454	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv269[ebp], 0
$LN34@Exec:
  0045e	8a 85 68 fe ff
	ff		 mov	 al, BYTE PTR tv269[ebp]
  00464	88 45 c7	 mov	 BYTE PTR _v8$[ebp], al

; 117  :                             v19.x = 0;

  00467	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _v19$[ebp], 0

; 118  :                             v19.y = 0;

  00471	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _v19$[ebp+4], 0

; 119  :                             v19.z = 0x8000;

  0047b	c7 85 58 ff ff
	ff 00 80 00 00	 mov	 DWORD PTR _v19$[ebp+8], 32768 ; 00008000H

; 120  :                             if (v8)

  00485	0f b6 45 c7	 movzx	 eax, BYTE PTR _v8$[ebp]
  00489	85 c0		 test	 eax, eax
  0048b	74 49		 je	 SHORT $LN26@Exec

; 121  :                             {
; 122  :                                 rotation.x = LODWORD(this->targetPosition.x);

  0048d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00490	8b 88 d0 00 00
	00		 mov	 ecx, DWORD PTR [eax+208]
  00496	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _rotation$[ebp], ecx

; 123  :                                 *&rotation.y = this->targetPosition.y - 35.0;

  0049c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0049f	f3 0f 5a 80 d4
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+212]
  004a7	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@4041800000000000
  004af	f2 0f 2c c8	 cvttsd2si ecx, xmm0
  004b3	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _rotation$[ebp+4], ecx

; 124  :                                 targetPosition = (RwV3d*)&rotation;

  004b9	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _rotation$[ebp]
  004bf	89 85 78 ff ff
	ff		 mov	 DWORD PTR _targetPosition$[ebp], eax

; 125  :                                 rotation.z = LODWORD(this->targetPosition.z);

  004c5	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  004c8	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  004ce	89 8d 6c ff ff
	ff		 mov	 DWORD PTR _rotation$[ebp+8], ecx

; 126  :                             }

  004d4	eb 0e		 jmp	 SHORT $LN27@Exec
$LN26@Exec:

; 127  :                             else
; 128  :                             {
; 129  :                                 targetPosition = &this->targetPosition;

  004d6	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  004d9	05 d0 00 00 00	 add	 eax, 208		; 000000d0H
  004de	89 85 78 ff ff
	ff		 mov	 DWORD PTR _targetPosition$[ebp], eax
$LN27@Exec:

; 130  :                             }
; 131  :                             v16 = &v19;

  004e4	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _v19$[ebp]
  004ea	89 45 84	 mov	 DWORD PTR _v16$[ebp], eax

; 132  :                         }

  004ed	eb 21		 jmp	 SHORT $LN25@Exec
$LN24@Exec:

; 133  :                         else
; 134  :                         {
; 135  :                             targetPosition = &this->targetPosition;

  004ef	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  004f2	05 d0 00 00 00	 add	 eax, 208		; 000000d0H
  004f7	89 85 78 ff ff
	ff		 mov	 DWORD PTR _targetPosition$[ebp], eax

; 136  :                             warpPlayerNo = this->currentPlayerNo;

  004fd	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00500	8b 88 04 01 00
	00		 mov	 ecx, DWORD PTR [eax+260]
  00506	89 4d a0	 mov	 DWORD PTR _warpPlayerNo$[ebp], ecx

; 137  :                             v16 = 0;

  00509	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _v16$[ebp], 0
$LN25@Exec:

; 138  :                         }
; 139  :                         TObjCamera::WarpCameraAndPlayerKeepRelativePosition(warpPlayerNo, v16, targetPosition);

  00510	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _targetPosition$[ebp]
  00516	50		 push	 eax
  00517	8b 4d 84	 mov	 ecx, DWORD PTR _v16$[ebp]
  0051a	51		 push	 ecx
  0051b	8b 55 a0	 mov	 edx, DWORD PTR _warpPlayerNo$[ebp]
  0051e	52		 push	 edx
  0051f	e8 00 00 00 00	 call	 ?WarpCameraAndPlayerKeepRelativePosition@TObjCamera@@SAXHPAUsAngle@@PAURwV3d@@@Z ; TObjCamera::WarpCameraAndPlayerKeepRelativePosition
  00524	83 c4 0c	 add	 esp, 12			; 0000000cH

; 140  :                         FADESCREEN::GetMainFadeScreenPointer()->CustomIn();

  00527	e8 00 00 00 00	 call	 ?GetMainFadeScreenPointer@FADESCREEN@@SAPAU1@XZ ; FADESCREEN::GetMainFadeScreenPointer
  0052c	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  00532	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR tv290[ebp]
  00538	8b 10		 mov	 edx, DWORD PTR [eax]
  0053a	8b f4		 mov	 esi, esp
  0053c	8b 8d 68 fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  00542	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  00545	ff d0		 call	 eax
  00547	3b f4		 cmp	 esi, esp
  00549	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 141  :                         this->warpState = 3;

  0054e	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00551	c7 80 00 01 00
	00 03 00 00 00	 mov	 DWORD PTR [eax+256], 3
$LN22@Exec:

; 142  :                     }
; 143  :                     break;

  0055b	eb 0d		 jmp	 SHORT $LN2@Exec
$LN28@Exec:

; 144  :                 }
; 145  :                 case 3:
; 146  :                 {
; 147  :                     this->warpState = 0;

  0055d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00560	c7 80 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+256], 0
$LN29@Exec:
$LN2@Exec:

; 148  :                     break;
; 149  :                 }
; 150  :                 default:
; 151  :                 {
; 152  :                     break;
; 153  :                 }
; 154  :             }
; 155  :             TObjS11Warp::SetPosition();

  0056a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0056d	e8 00 00 00 00	 call	 ?SetPosition@TObjS11Warp@@QAEXXZ ; TObjS11Warp::SetPosition
$LN11@Exec:

; 156  :         }
; 157  :         this->C_COLLI.Entry(&this->position, &v20);

  00572	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _v20$[ebp]
  00578	50		 push	 eax
  00579	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0057c	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  00582	51		 push	 ecx
  00583	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00586	83 c1 30	 add	 ecx, 48			; 00000030H
  00589	e8 00 00 00 00	 call	 ?Entry@C_COLLI@@QAEHPAURwV3d@@PAUsAngle@@@Z ; C_COLLI::Entry
$LN8@Exec:

; 158  :     }
; 159  : }

  0058e	52		 push	 edx
  0058f	8b cd		 mov	 ecx, ebp
  00591	50		 push	 eax
  00592	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN40@Exec
  00598	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0059d	58		 pop	 eax
  0059e	5a		 pop	 edx
  0059f	5f		 pop	 edi
  005a0	5e		 pop	 esi
  005a1	5b		 pop	 ebx
  005a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005a5	33 cd		 xor	 ecx, ebp
  005a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005ac	81 c4 98 01 00
	00		 add	 esp, 408		; 00000198H
  005b2	3b ec		 cmp	 ebp, esp
  005b4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005b9	8b e5		 mov	 esp, ebp
  005bb	5d		 pop	 ebp
  005bc	c3		 ret	 0
  005bd	0f 1f 00	 npad	 3
$LN40@Exec:
  005c0	03 00 00 00	 DD	 3
  005c4	00 00 00 00	 DD	 $LN39@Exec
$LN39@Exec:
  005c8	64 ff ff ff	 DD	 -156			; ffffff64H
  005cc	0c 00 00 00	 DD	 12			; 0000000cH
  005d0	00 00 00 00	 DD	 $LN36@Exec
  005d4	50 ff ff ff	 DD	 -176			; ffffff50H
  005d8	0c 00 00 00	 DD	 12			; 0000000cH
  005dc	00 00 00 00	 DD	 $LN37@Exec
  005e0	3c ff ff ff	 DD	 -196			; ffffff3cH
  005e4	0c 00 00 00	 DD	 12			; 0000000cH
  005e8	00 00 00 00	 DD	 $LN38@Exec
$LN38@Exec:
  005ec	76		 DB	 118			; 00000076H
  005ed	32		 DB	 50			; 00000032H
  005ee	30		 DB	 48			; 00000030H
  005ef	00		 DB	 0
$LN37@Exec:
  005f0	76		 DB	 118			; 00000076H
  005f1	31		 DB	 49			; 00000031H
  005f2	39		 DB	 57			; 00000039H
  005f3	00		 DB	 0
$LN36@Exec:
  005f4	72		 DB	 114			; 00000072H
  005f5	6f		 DB	 111			; 0000006fH
  005f6	74		 DB	 116			; 00000074H
  005f7	61		 DB	 97			; 00000061H
  005f8	74		 DB	 116			; 00000074H
  005f9	69		 DB	 105			; 00000069H
  005fa	6f		 DB	 111			; 0000006fH
  005fb	6e		 DB	 110			; 0000006eH
  005fc	00		 DB	 0
  005fd	0f 1f 00	 npad	 3
$LN35@Exec:
  00600	00 00 00 00	 DD	 $LN12@Exec
  00604	00 00 00 00	 DD	 $LN17@Exec
  00608	00 00 00 00	 DD	 $LN20@Exec
  0060c	00 00 00 00	 DD	 $LN28@Exec
?Exec@TObjS11Warp@@UAEXXZ ENDP				; TObjS11Warp::Exec
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\Tsonic\src\stage\stage11_Warp\o_s11_warp.cpp
;	COMDAT ?NoSpeed@TObjS11Warp@@QAEPAURwV3d@@XZ
_TEXT	SEGMENT
_v5$1 = -68						; size = 4
_v4$2 = -56						; size = 4
_v3$3 = -44						; size = 4
_i$4 = -32						; size = 4
_TObjTeam$ = -20					; size = 4
_this$ = -8						; size = 4
?NoSpeed@TObjS11Warp@@QAEPAURwV3d@@XZ PROC		; TObjS11Warp::NoSpeed, COMDAT
; _this$ = ecx

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00013	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __AAD340E9_o_s11_warp@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 209  :     TObjTeam* TObjTeam = teamTOp[currentPlayerNo];

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 88 04 01 00
	00		 mov	 ecx, DWORD PTR [eax+260]
  00036	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  0003c	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  0003f	89 45 ec	 mov	 DWORD PTR _TObjTeam$[ebp], eax

; 210  :     PeriCtrl.controlsDisabled[PeriCtrlMap[TObjTeam->controllerNo]] = 1;

  00042	8b 45 ec	 mov	 eax, DWORD PTR _TObjTeam$[ebp]
  00045	0f be 88 4c 01
	00 00		 movsx	 ecx, BYTE PTR [eax+332]
  0004c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?PeriCtrlMap@@3ABQAHB ; PeriCtrlMap
  00052	8b 02		 mov	 eax, DWORD PTR [edx]
  00054	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00057	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?PeriCtrl@@3AAUPeriCtrlStruct@@A ; PeriCtrl
  0005d	c7 44 8a 30 01
	00 00 00	 mov	 DWORD PTR [edx+ecx*4+48], 1

; 211  :     for (int i = 0; i < 3; ++i)

  00065	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  0006c	eb 09		 jmp	 SHORT $LN4@NoSpeed
$LN2@NoSpeed:
  0006e	8b 45 e0	 mov	 eax, DWORD PTR _i$4[ebp]
  00071	83 c0 01	 add	 eax, 1
  00074	89 45 e0	 mov	 DWORD PTR _i$4[ebp], eax
$LN4@NoSpeed:
  00077	83 7d e0 03	 cmp	 DWORD PTR _i$4[ebp], 3
  0007b	0f 8d bf 01 00
	00		 jge	 $LN3@NoSpeed

; 212  :     {
; 213  :         int v3 = TObjTeam->playerNo[i];

  00081	8b 45 ec	 mov	 eax, DWORD PTR _TObjTeam$[ebp]
  00084	03 45 e0	 add	 eax, DWORD PTR _i$4[ebp]
  00087	0f be 88 10 01
	00 00		 movsx	 ecx, BYTE PTR [eax+272]
  0008e	89 4d d4	 mov	 DWORD PTR _v3$3[ebp], ecx

; 214  :         TObjPlayer* v4 = playerTOp[v3];

  00091	8b 45 d4	 mov	 eax, DWORD PTR _v3$3[ebp]
  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?playerTOp@@3QAPAUTObjPlayer@@A ; playerTOp
  0009a	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0009d	89 55 c8	 mov	 DWORD PTR _v4$2[ebp], edx

; 215  :         if (v4)

  000a0	83 7d c8 00	 cmp	 DWORD PTR _v4$2[ebp], 0
  000a4	0f 84 91 01 00
	00		 je	 $LN5@NoSpeed

; 216  :         {
; 217  :             v4->speedCopy.z = 0.0;

  000aa	8b 45 c8	 mov	 eax, DWORD PTR _v4$2[ebp]
  000ad	0f 57 c0	 xorps	 xmm0, xmm0
  000b0	f3 0f 11 80 40
	01 00 00	 movss	 DWORD PTR [eax+320], xmm0

; 218  :             v4->speedCopy.y = 0.0;

  000b8	8b 45 c8	 mov	 eax, DWORD PTR _v4$2[ebp]
  000bb	0f 57 c0	 xorps	 xmm0, xmm0
  000be	f3 0f 11 80 3c
	01 00 00	 movss	 DWORD PTR [eax+316], xmm0

; 219  :             v4->speedCopy.x = 0.0;

  000c6	8b 45 c8	 mov	 eax, DWORD PTR _v4$2[ebp]
  000c9	0f 57 c0	 xorps	 xmm0, xmm0
  000cc	f3 0f 11 80 38
	01 00 00	 movss	 DWORD PTR [eax+312], xmm0

; 220  :             v4->sidewaysSpeedMaybe = 0.0;

  000d4	8b 45 c8	 mov	 eax, DWORD PTR _v4$2[ebp]
  000d7	0f 57 c0	 xorps	 xmm0, xmm0
  000da	f3 0f 11 80 10
	01 00 00	 movss	 DWORD PTR [eax+272], xmm0

; 221  :             v4->VSpeed = 0.0;

  000e2	8b 45 c8	 mov	 eax, DWORD PTR _v4$2[ebp]
  000e5	0f 57 c0	 xorps	 xmm0, xmm0
  000e8	f3 0f 11 80 0c
	01 00 00	 movss	 DWORD PTR [eax+268], xmm0

; 222  :             v4->hSpeed = 0.0;

  000f0	8b 45 c8	 mov	 eax, DWORD PTR _v4$2[ebp]
  000f3	0f 57 c0	 xorps	 xmm0, xmm0
  000f6	f3 0f 11 80 08
	01 00 00	 movss	 DWORD PTR [eax+264], xmm0

; 223  :             v4->acceleration.z = 0.0;

  000fe	8b 45 c8	 mov	 eax, DWORD PTR _v4$2[ebp]
  00101	0f 57 c0	 xorps	 xmm0, xmm0
  00104	f3 0f 11 80 4c
	01 00 00	 movss	 DWORD PTR [eax+332], xmm0

; 224  :             v4->acceleration.y = 0.0;

  0010c	8b 45 c8	 mov	 eax, DWORD PTR _v4$2[ebp]
  0010f	0f 57 c0	 xorps	 xmm0, xmm0
  00112	f3 0f 11 80 48
	01 00 00	 movss	 DWORD PTR [eax+328], xmm0

; 225  :             v4->acceleration.x = 0.0;

  0011a	8b 45 c8	 mov	 eax, DWORD PTR _v4$2[ebp]
  0011d	0f 57 c0	 xorps	 xmm0, xmm0
  00120	f3 0f 11 80 44
	01 00 00	 movss	 DWORD PTR [eax+324], xmm0

; 226  :             v4->flt_0xfc.z = 0.0;

  00128	8b 45 c8	 mov	 eax, DWORD PTR _v4$2[ebp]
  0012b	0f 57 c0	 xorps	 xmm0, xmm0
  0012e	f3 0f 11 80 04
	01 00 00	 movss	 DWORD PTR [eax+260], xmm0

; 227  :             v4->flt_0xfc.y = 0.0;

  00136	8b 45 c8	 mov	 eax, DWORD PTR _v4$2[ebp]
  00139	0f 57 c0	 xorps	 xmm0, xmm0
  0013c	f3 0f 11 80 00
	01 00 00	 movss	 DWORD PTR [eax+256], xmm0

; 228  :             v4->flt_0xfc.x = 0.0;

  00144	8b 45 c8	 mov	 eax, DWORD PTR _v4$2[ebp]
  00147	0f 57 c0	 xorps	 xmm0, xmm0
  0014a	f3 0f 11 80 fc
	00 00 00	 movss	 DWORD PTR [eax+252], xmm0

; 229  :             if (v4)                                  // #inline PlayerMaster::SetPositionP(int, float, float, float)

  00152	83 7d c8 00	 cmp	 DWORD PTR _v4$2[ebp], 0
  00156	0f 84 b7 00 00
	00		 je	 $LN6@NoSpeed

; 230  :             {
; 231  :                 v4->position = warpDelayPosition[i];

  0015c	6b 45 e0 0c	 imul	 eax, DWORD PTR _i$4[ebp], 12
  00160	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00163	8d 94 01 dc 00
	00 00		 lea	 edx, DWORD PTR [ecx+eax+220]
  0016a	8b 45 c8	 mov	 eax, DWORD PTR _v4$2[ebp]
  0016d	05 14 01 00 00	 add	 eax, 276		; 00000114H
  00172	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00174	89 08		 mov	 DWORD PTR [eax], ecx
  00176	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00179	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0017c	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  0017f	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 232  :                 RwV3d* v5 = &PlayerMaster::pos_history->entry[0x100 * TObjTeam->playerNo[i] + PlayerMaster::n_history[TObjTeam->playerNo[i]]];

  00182	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pos_history@PlayerMaster@@2AAPAUpos_history_struct@1@A ; PlayerMaster::pos_history
  00187	8b 08		 mov	 ecx, DWORD PTR [eax]
  00189	8b 55 ec	 mov	 edx, DWORD PTR _TObjTeam$[ebp]
  0018c	03 55 e0	 add	 edx, DWORD PTR _i$4[ebp]
  0018f	0f be 82 10 01
	00 00		 movsx	 eax, BYTE PTR [edx+272]
  00196	c1 e0 08	 shl	 eax, 8
  00199	8b 55 ec	 mov	 edx, DWORD PTR _TObjTeam$[ebp]
  0019c	03 55 e0	 add	 edx, DWORD PTR _i$4[ebp]
  0019f	0f be 92 10 01
	00 00		 movsx	 edx, BYTE PTR [edx+272]
  001a6	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?n_history@PlayerMaster@@2PAEA ; PlayerMaster::n_history
  001ac	0f b6 14 16	 movzx	 edx, BYTE PTR [esi+edx]
  001b0	03 c2		 add	 eax, edx
  001b2	6b c0 0c	 imul	 eax, eax, 12
  001b5	03 c8		 add	 ecx, eax
  001b7	89 4d bc	 mov	 DWORD PTR _v5$1[ebp], ecx

; 233  :                 v5->x = warpDelayPosition[v3 % 3].x;

  001ba	8b 45 d4	 mov	 eax, DWORD PTR _v3$3[ebp]
  001bd	99		 cdq
  001be	b9 03 00 00 00	 mov	 ecx, 3
  001c3	f7 f9		 idiv	 ecx
  001c5	6b d2 0c	 imul	 edx, edx, 12
  001c8	8b 45 bc	 mov	 eax, DWORD PTR _v5$1[ebp]
  001cb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001ce	8b 94 11 dc 00
	00 00		 mov	 edx, DWORD PTR [ecx+edx+220]
  001d5	89 10		 mov	 DWORD PTR [eax], edx

; 234  :                 v5->y = warpDelayPosition[v3 % 3].y;

  001d7	8b 45 d4	 mov	 eax, DWORD PTR _v3$3[ebp]
  001da	99		 cdq
  001db	b9 03 00 00 00	 mov	 ecx, 3
  001e0	f7 f9		 idiv	 ecx
  001e2	6b d2 0c	 imul	 edx, edx, 12
  001e5	8b 45 bc	 mov	 eax, DWORD PTR _v5$1[ebp]
  001e8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001eb	8b 94 11 e0 00
	00 00		 mov	 edx, DWORD PTR [ecx+edx+224]
  001f2	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 235  :                 v5->z = warpDelayPosition[v3 % 3].z;

  001f5	8b 45 d4	 mov	 eax, DWORD PTR _v3$3[ebp]
  001f8	99		 cdq
  001f9	b9 03 00 00 00	 mov	 ecx, 3
  001fe	f7 f9		 idiv	 ecx
  00200	6b d2 0c	 imul	 edx, edx, 12
  00203	8b 45 bc	 mov	 eax, DWORD PTR _v5$1[ebp]
  00206	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00209	8b 94 11 e4 00
	00 00		 mov	 edx, DWORD PTR [ecx+edx+228]
  00210	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN6@NoSpeed:

; 236  :             }
; 237  :             warpDelayPosition[i].y = sS11WarpJumpSpeed + warpDelayPosition[i].y;

  00213	6b 45 e0 0c	 imul	 eax, DWORD PTR _i$4[ebp], 12
  00217	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0021a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sS11WarpJumpSpeed@@3MA
  00222	f3 0f 58 84 01
	e0 00 00 00	 addss	 xmm0, DWORD PTR [ecx+eax+224]
  0022b	6b 55 e0 0c	 imul	 edx, DWORD PTR _i$4[ebp], 12
  0022f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00232	f3 0f 11 84 10
	e0 00 00 00	 movss	 DWORD PTR [eax+edx+224], xmm0
$LN5@NoSpeed:

; 238  :         }
; 239  :     }

  0023b	e9 2e fe ff ff	 jmp	 $LN2@NoSpeed
$LN3@NoSpeed:

; 240  :     return 0;

  00240	33 c0		 xor	 eax, eax

; 241  : }

  00242	5f		 pop	 edi
  00243	5e		 pop	 esi
  00244	5b		 pop	 ebx
  00245	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  0024b	3b ec		 cmp	 ebp, esp
  0024d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00252	8b e5		 mov	 esp, ebp
  00254	5d		 pop	 ebp
  00255	c3		 ret	 0
?NoSpeed@TObjS11Warp@@QAEPAURwV3d@@XZ ENDP		; TObjS11Warp::NoSpeed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\Tsonic\src\stage\stage11_Warp\o_s11_warp.cpp
;	COMDAT ?CheckPlayer@TObjS11Warp@@QAEHXZ
_TEXT	SEGMENT
_v3$1 = -68						; size = 4
_v7$2 = -56						; size = 4
_v6$3 = -44						; size = 4
_v1$4 = -32						; size = 4
_hitTarget$ = -20					; size = 4
_this$ = -8						; size = 4
?CheckPlayer@TObjS11Warp@@QAEHXZ PROC			; TObjS11Warp::CheckPlayer, COMDAT
; _this$ = ecx

; 170  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00013	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __AAD340E9_o_s11_warp@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 171  :     CCL_MASTER::ClearSearch();

  0002d	e8 00 00 00 00	 call	 ?ClearSearch@CCL_MASTER@@SAXXZ ; CCL_MASTER::ClearSearch

; 172  :     ::C_COLLI* hitTarget = C_COLLI.IsHitKind(0x14u);

  00032	6a 14		 push	 20			; 00000014H
  00034	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 30	 add	 ecx, 48			; 00000030H
  0003a	e8 00 00 00 00	 call	 ?IsHitKind@C_COLLI@@QAEPAU1@E@Z ; C_COLLI::IsHitKind
  0003f	89 45 ec	 mov	 DWORD PTR _hitTarget$[ebp], eax

; 173  :     if (!hitTarget)

  00042	83 7d ec 00	 cmp	 DWORD PTR _hitTarget$[ebp], 0
  00046	0f 85 eb 00 00
	00		 jne	 $LN4@CheckPlaye

; 174  :     {
; 175  :         CCL_MASTER::ClearSearch();

  0004c	e8 00 00 00 00	 call	 ?ClearSearch@CCL_MASTER@@SAXXZ ; CCL_MASTER::ClearSearch
$LN2@CheckPlaye:

; 176  :         while (1)

  00051	b8 01 00 00 00	 mov	 eax, 1
  00056	85 c0		 test	 eax, eax
  00058	0f 84 d9 00 00
	00		 je	 $LN4@CheckPlaye

; 177  :         {
; 178  :             hitTarget = C_COLLI.IsHitPlayer();

  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	83 c1 30	 add	 ecx, 48			; 00000030H
  00064	e8 00 00 00 00	 call	 ?IsHitPlayer@C_COLLI@@QAEPAU1@XZ ; C_COLLI::IsHitPlayer
  00069	89 45 ec	 mov	 DWORD PTR _hitTarget$[ebp], eax

; 179  :             if (!hitTarget)

  0006c	83 7d ec 00	 cmp	 DWORD PTR _hitTarget$[ebp], 0
  00070	75 05		 jne	 SHORT $LN5@CheckPlaye

; 180  :             {
; 181  :                 break;

  00072	e9 c0 00 00 00	 jmp	 $LN4@CheckPlaye
$LN5@CheckPlaye:

; 182  :             }
; 183  :             int v1 = GetPlayerNumberFromCCLCharacterId(hitTarget->GetCharacterId());

  00077	8b 4d ec	 mov	 ecx, DWORD PTR _hitTarget$[ebp]
  0007a	e8 00 00 00 00	 call	 ?GetCharacterId@C_COLLI@@QAEHXZ ; C_COLLI::GetCharacterId
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?GetPlayerNumberFromCCLCharacterId@@YAHH@Z ; GetPlayerNumberFromCCLCharacterId
  00085	83 c4 04	 add	 esp, 4
  00088	89 45 e0	 mov	 DWORD PTR _v1$4[ebp], eax

; 184  :             TObjPlayer* v6 = playerTOp[v1];

  0008b	8b 45 e0	 mov	 eax, DWORD PTR _v1$4[ebp]
  0008e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?playerTOp@@3QAPAUTObjPlayer@@A ; playerTOp
  00094	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00097	89 55 d4	 mov	 DWORD PTR _v6$3[ebp], edx

; 185  :             if (v6)

  0009a	83 7d d4 00	 cmp	 DWORD PTR _v6$3[ebp], 0
  0009e	0f 84 8e 00 00
	00		 je	 $LN6@CheckPlaye

; 186  :             {
; 187  :                 int v7 = v6->teamNo;

  000a4	8b 45 d4	 mov	 eax, DWORD PTR _v6$3[ebp]
  000a7	0f be 88 be 00
	00 00		 movsx	 ecx, BYTE PTR [eax+190]
  000ae	89 4d c8	 mov	 DWORD PTR _v7$2[ebp], ecx

; 188  :                 TObjTeam* v3 = teamTOp[v7];

  000b1	8b 45 c8	 mov	 eax, DWORD PTR _v7$2[ebp]
  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  000ba	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000bd	89 55 bc	 mov	 DWORD PTR _v3$1[ebp], edx

; 189  :                 if (v3)

  000c0	83 7d bc 00	 cmp	 DWORD PTR _v3$1[ebp], 0
  000c4	74 6c		 je	 SHORT $LN6@CheckPlaye

; 190  :                 {
; 191  :                     if (v3->playerNo[v3->GetNowLeaderPlayerNo() % 3] == v1 || v3->playerNo[v3->GetLeaderPlayerNo() % 3] == v1)

  000c6	8b 4d bc	 mov	 ecx, DWORD PTR _v3$1[ebp]
  000c9	e8 00 00 00 00	 call	 ?GetNowLeaderPlayerNo@TObjTeam@@QAEDXZ ; TObjTeam::GetNowLeaderPlayerNo
  000ce	0f be c0	 movsx	 eax, al
  000d1	99		 cdq
  000d2	b9 03 00 00 00	 mov	 ecx, 3
  000d7	f7 f9		 idiv	 ecx
  000d9	8b 45 bc	 mov	 eax, DWORD PTR _v3$1[ebp]
  000dc	0f be 8c 10 10
	01 00 00	 movsx	 ecx, BYTE PTR [eax+edx+272]
  000e4	3b 4d e0	 cmp	 ecx, DWORD PTR _v1$4[ebp]
  000e7	74 23		 je	 SHORT $LN9@CheckPlaye
  000e9	8b 4d bc	 mov	 ecx, DWORD PTR _v3$1[ebp]
  000ec	e8 00 00 00 00	 call	 ?GetLeaderPlayerNo@TObjTeam@@QAEDXZ ; TObjTeam::GetLeaderPlayerNo
  000f1	0f be c0	 movsx	 eax, al
  000f4	99		 cdq
  000f5	b9 03 00 00 00	 mov	 ecx, 3
  000fa	f7 f9		 idiv	 ecx
  000fc	8b 45 bc	 mov	 eax, DWORD PTR _v3$1[ebp]
  000ff	0f be 8c 10 10
	01 00 00	 movsx	 ecx, BYTE PTR [eax+edx+272]
  00107	3b 4d e0	 cmp	 ecx, DWORD PTR _v1$4[ebp]
  0010a	75 26		 jne	 SHORT $LN6@CheckPlaye
$LN9@CheckPlaye:

; 192  :                     {
; 193  :                         if (v3->IsThisPostedPlayer(v1))

  0010c	8b 45 e0	 mov	 eax, DWORD PTR _v1$4[ebp]
  0010f	50		 push	 eax
  00110	8b 4d bc	 mov	 ecx, DWORD PTR _v3$1[ebp]
  00113	e8 00 00 00 00	 call	 ?IsThisPostedPlayer@TObjTeam@@QAE_NH@Z ; TObjTeam::IsThisPostedPlayer
  00118	0f b6 c8	 movzx	 ecx, al
  0011b	85 c9		 test	 ecx, ecx
  0011d	74 13		 je	 SHORT $LN6@CheckPlaye

; 194  :                         {
; 195  :                             this->currentPlayerNo = v7;

  0011f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00122	8b 4d c8	 mov	 ecx, DWORD PTR _v7$2[ebp]
  00125	89 88 04 01 00
	00		 mov	 DWORD PTR [eax+260], ecx

; 196  :                             return 1;

  0012b	b8 01 00 00 00	 mov	 eax, 1
  00130	eb 07		 jmp	 SHORT $LN1@CheckPlaye
$LN6@CheckPlaye:

; 197  :                         }
; 198  :                     }
; 199  :                 }
; 200  :             }
; 201  :         }

  00132	e9 1a ff ff ff	 jmp	 $LN2@CheckPlaye
$LN4@CheckPlaye:

; 202  :     }
; 203  :     return 0;

  00137	33 c0		 xor	 eax, eax
$LN1@CheckPlaye:

; 204  : }

  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx
  0013c	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  00142	3b ec		 cmp	 ebp, esp
  00144	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c3		 ret	 0
?CheckPlayer@TObjS11Warp@@QAEHXZ ENDP			; TObjS11Warp::CheckPlayer
_TEXT	ENDS
END
