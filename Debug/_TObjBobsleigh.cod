; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28316.0 

	TITLE	C:\Users\DonutStopGaming\Desktop\Mod\_TObjBobsleigh.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?sBobArrowOffsetY@@3MA				; sBobArrowOffsetY
PUBLIC	?pClumpBobArrow@@3PAPAURpClump@@A		; pClumpBobArrow
msvcjmc	SEGMENT
__F2BDCE38_pch@h DB 01H
__6EE8A1C6_mod@pch DB 01H
__35E0B1B6__TObjBobsleigh@cpp DB 01H
__2CCBBE23_propidl@h DB 01H
__24E9E95F_stdlib@h DB 01H
__BB40F913_TObject@hpp DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
?sBobArrowOffsetY@@3MA DD 041c80000r		; 25	; sBobArrowOffsetY
?pClumpBobArrow@@3PAPAURpClump@@A DD 0a77ad4H		; pClumpBobArrow
_DATA	ENDS
PUBLIC	?SetArrowPosition@TObjBobsleigh@@SAPAURwV3d@@PAU1@@Z ; TObjBobsleigh::SetArrowPosition
PUBLIC	?initObjS31Bob@@YAXXZ				; initObjS31Bob
PUBLIC	?SetArrowPosition_hook@@YAXPAUTObjBobsleigh@@@Z	; SetArrowPosition_hook
PUBLIC	?arrowdisptest@@YAXXZ				; arrowdisptest
PUBLIC	?arrowdisptest_hook@@YAXXZ			; arrowdisptest_hook
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0L@LCMMFLFE@s31obj?4one@			; `string'
PUBLIC	__real@3ff0000000000000
EXTRN	?RwMatrixTranslate@@YAPAURwMatrix@@PAU1@PAURwV3d@@W4RwOpCombineType@@@Z:PROC ; RwMatrixTranslate
EXTRN	?RwMatrixRotateOneMinusCosineSine@@YAPAURwMatrix@@PAU1@QAURwV3d@@MMW4RwOpCombineType@@@Z:PROC ; RwMatrixRotateOneMinusCosineSine
EXTRN	?RwMatrixInvert@@YAPAURwMatrix@@PAU1@0@Z:PROC	; RwMatrixInvert
EXTRN	?RwFrameGetLTM@@YAPAURwMatrix@@PAURwFrame@@@Z:PROC ; RwFrameGetLTM
EXTRN	?RwV3dTransformPoints@@YAPAURwV3d@@PAU1@0HPBURwMatrix@@@Z:PROC ; RwV3dTransformPoints
EXTRN	?RwRenderStateGet@@YAHW4RwRenderState@@PAX@Z:PROC ; RwRenderStateGet
EXTRN	?RwRenderStateSet@@YAHW4RwRenderState@@PAX@Z:PROC ; RwRenderStateSet
EXTRN	?RpClumpRender@@YAPAURpClump@@PAU1@@Z:PROC	; RpClumpRender
EXTRN	?RwTexDictionarySetCurrent@@YAPAURwTexDictionary@@PAU1@@Z:PROC ; RwTexDictionarySetCurrent
EXTRN	?CheckFileID@ONEFILE@@QAEHPAD@Z:PROC		; ONEFILE::CheckFileID
EXTRN	?OneFileLoadClump@ONEFILE@@QAEPAURpClump@@HPAX@Z:PROC ; ONEFILE::OneFileLoadClump
EXTRN	?LoadOneFile@ONEFILE@@QAEHPAD@Z:PROC		; ONEFILE::LoadOneFile
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?bobArrow@@3PAPADA:DWORD			; bobArrow
EXTRN	?AxisZ@@3AAURwV3d@@A:DWORD			; AxisZ
EXTRN	?AxisX@@3AAURwV3d@@A:DWORD			; AxisX
EXTRN	?AxisY@@3AAURwV3d@@A:DWORD			; AxisY
EXTRN	?sine@@3ABQAMB:DWORD				; sine
EXTRN	?LandManager@@3PAULandManagerStruct@@A:DWORD	; LandManager
EXTRN	?teamTOp@@3PAPAUTObjTeam@@A:DWORD		; teamTOp
EXTRN	?playerTOp@@3QAPAUTObjPlayer@@A:DWORD		; playerTOp
EXTRN	?SetGenTp@@3AAPAUTObjSetGen@@A:DWORD		; SetGenTp
EXTRN	?pModeSwitch@@3AAPAUMODESWITCH@@A:DWORD		; pModeSwitch
EXTRN	?CurrentCameraParameterP@TObjCamera@@2QAPAUcameraParamType@1@A:DWORD ; TObjCamera::CurrentCameraParameterP
EXTRN	?currentCamera@TObjCamera@@2AAHA:DWORD		; TObjCamera::currentCamera
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
?address@?1??arrowdisptest_hook@@YAXXZ@4HA DD 05b391dH	; `arrowdisptest_hook'::`2'::address
_DATA	ENDS
;	COMDAT ??_C@_0L@LCMMFLFE@s31obj?4one@
CONST	SEGMENT
??_C@_0L@LCMMFLFE@s31obj?4one@ DB 's31obj.one', 00H	; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_TObjBobsleigh.cpp
;	COMDAT ?arrowdisptest_hook@@YAXXZ
_TEXT	SEGMENT
?arrowdisptest_hook@@YAXXZ PROC				; arrowdisptest_hook, COMDAT

; 243  : 	static int address = 0x5B391D;
; 244  : 
; 245  : 	__asm
; 246  : 	{
; 247  : 		call arrowdisptest;

  00000	e8 00 00 00 00	 call	 ?arrowdisptest@@YAXXZ	; arrowdisptest

; 248  : 		jmp address;

  00005	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?address@?1??arrowdisptest_hook@@YAXXZ@4HA
?arrowdisptest_hook@@YAXXZ ENDP				; arrowdisptest_hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_TObjBobsleigh.cpp
;	COMDAT ?arrowdisptest@@YAXXZ
_TEXT	SEGMENT
_i$ = -424						; size = 4
_a2$ = -412						; size = 4
_v3$1 = -400						; size = 4
_a1$ = -388						; size = 4
_dst$ = -376						; size = 64
_bobArrowPoints$ = -304					; size = 12
_matrix$ = -284						; size = 64
_bobArrowPos$ = -212					; size = 12
_v16$ = -192						; size = 4
_v15$ = -180						; size = 4
_v14$ = -168						; size = 4
_v13$ = -156						; size = 4
_v12$ = -144						; size = 4
_v11$ = -132						; size = 4
_v10$ = -120						; size = 4
_v9$ = -108						; size = 4
_v8$ = -96						; size = 4
_v7$ = -84						; size = 4
_v5$ = -60						; size = 4
_v4$ = -48						; size = 4
_result$ = -24						; size = 4
_v1$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?arrowdisptest@@YAXXZ PROC				; arrowdisptest, COMDAT

; 144  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 6c 02 00
	00		 sub	 esp, 620		; 0000026cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 94 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-620]
  00012	b9 9b 00 00 00	 mov	 ecx, 155		; 0000009bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __35E0B1B6__TObjBobsleigh@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 145  : 	int v1;
; 146  : 	RwV3d* result;
; 147  : 	int* v3;
; 148  : 	float v4;
; 149  : 	float v5;
; 150  : 	unsigned int v6;
; 151  : 	float v7;
; 152  : 	float v8;
; 153  : 	float v9;
; 154  : 	RwFrame* v10;
; 155  : 	RwMatrix* v11;
; 156  : 	RwV3d* v12;
; 157  : 	RwV3d* v13;
; 158  : 	RwMatrix* v14;
; 159  : 	RwV3d* v15;
; 160  : 	RwV3d* v16;
; 161  : 	RwV3d bobArrowPos;
; 162  : 	RwMatrix matrix;
; 163  : 	RwV3d bobArrowPoints;
; 164  : 	RwMatrix dst;
; 165  : 	TObjTeam* a1;
; 166  : 
; 167  : 	v1 = 0;

  00032	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _v1$[ebp], 0
$LN4@arrowdispt:

; 168  : 	do
; 169  : 	{
; 170  : 		a1 = teamTOp[v1];

  00039	8b 45 f4	 mov	 eax, DWORD PTR _v1$[ebp]
  0003c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  00042	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00045	89 95 7c fe ff
	ff		 mov	 DWORD PTR _a1$[ebp], edx

; 171  : 		result = (RwV3d*)pClumpBobArrow[v1];

  0004b	8b 45 f4	 mov	 eax, DWORD PTR _v1$[ebp]
  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pClumpBobArrow@@3PAPAURpClump@@A ; pClumpBobArrow
  00054	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00057	89 55 e8	 mov	 DWORD PTR _result$[ebp], edx

; 172  : 		if (!result)

  0005a	83 7d e8 00	 cmp	 DWORD PTR _result$[ebp], 0
  0005e	75 05		 jne	 SHORT $LN8@arrowdispt

; 173  : 		{
; 174  : 			return;

  00060	e9 35 05 00 00	 jmp	 $LN1@arrowdispt
$LN8@arrowdispt:

; 175  : 		}
; 176  : 		if (result && TObjCamera::currentCamera != v1 && a1->controllerNo == v1)

  00065	83 7d e8 00	 cmp	 DWORD PTR _result$[ebp], 0
  00069	0f 84 8f 04 00
	00		 je	 $LN9@arrowdispt
  0006f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?currentCamera@TObjCamera@@2AAHA ; TObjCamera::currentCamera
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	3b 4d f4	 cmp	 ecx, DWORD PTR _v1$[ebp]
  00079	0f 84 7f 04 00
	00		 je	 $LN9@arrowdispt
  0007f	8b 85 7c fe ff
	ff		 mov	 eax, DWORD PTR _a1$[ebp]
  00085	0f be 88 4c 01
	00 00		 movsx	 ecx, BYTE PTR [eax+332]
  0008c	3b 4d f4	 cmp	 ecx, DWORD PTR _v1$[ebp]
  0008f	0f 85 69 04 00
	00		 jne	 $LN9@arrowdispt

; 177  : 		{
; 178  : 			sAngle* v3 = &TObjCamera::CurrentCameraParameterP[0]->angle;

  00095	b8 04 00 00 00	 mov	 eax, 4
  0009a	6b c8 00	 imul	 ecx, eax, 0
  0009d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?CurrentCameraParameterP@TObjCamera@@2QAPAUcameraParamType@1@A ; TObjCamera::CurrentCameraParameterP
  000a3	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000a6	83 c0 0c	 add	 eax, 12			; 0000000cH
  000a9	89 85 70 fe ff
	ff		 mov	 DWORD PTR _v3$1[ebp], eax

; 179  : 			RwMatrixTranslate(&matrix, (RwV3d*)TObjCamera::CurrentCameraParameterP[0], rwCOMBINEREPLACE);

  000af	6a 00		 push	 0
  000b1	b8 04 00 00 00	 mov	 eax, 4
  000b6	6b c8 00	 imul	 ecx, eax, 0
  000b9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?CurrentCameraParameterP@TObjCamera@@2QAPAUcameraParamType@1@A ; TObjCamera::CurrentCameraParameterP
  000bf	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  000c2	50		 push	 eax
  000c3	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _matrix$[ebp]
  000c9	51		 push	 ecx
  000ca	e8 00 00 00 00	 call	 ?RwMatrixTranslate@@YAPAURwMatrix@@PAU1@PAURwV3d@@W4RwOpCombineType@@@Z ; RwMatrixTranslate
  000cf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 180  : 			v4 = 1.0 - sine[(unsigned short)(v3->y + 0x4000)];

  000d2	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR _v3$1[ebp]
  000d8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000db	81 c1 00 40 00
	00		 add	 ecx, 16384		; 00004000H
  000e1	0f b7 d1	 movzx	 edx, cx
  000e4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sine@@3ABQAMB ; sine
  000e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000eb	f3 0f 5a 04 91	 cvtss2sd xmm0, DWORD PTR [ecx+edx*4]
  000f0	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000f8	f2 0f 5c c8	 subsd	 xmm1, xmm0
  000fc	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00100	f3 0f 11 45 d0	 movss	 DWORD PTR _v4$[ebp], xmm0

; 181  : 			RwMatrixRotateOneMinusCosineSine(&matrix, &AxisY, v4, sine[(unsigned short)v3->y], rwCOMBINEPRECONCA);

  00105	6a 01		 push	 1
  00107	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR _v3$1[ebp]
  0010d	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  00111	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?sine@@3ABQAMB ; sine
  00117	8b 02		 mov	 eax, DWORD PTR [edx]
  00119	51		 push	 ecx
  0011a	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [eax+ecx*4]
  0011f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00124	51		 push	 ecx
  00125	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _v4$[ebp]
  0012a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?AxisY@@3AAURwV3d@@A ; AxisY
  00135	51		 push	 ecx
  00136	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR _matrix$[ebp]
  0013c	52		 push	 edx
  0013d	e8 00 00 00 00	 call	 ?RwMatrixRotateOneMinusCosineSine@@YAPAURwMatrix@@PAU1@QAURwV3d@@MMW4RwOpCombineType@@@Z ; RwMatrixRotateOneMinusCosineSine
  00142	83 c4 14	 add	 esp, 20			; 00000014H

; 182  : 			v5 = 1.0 - sine[(unsigned short)(v3->x + 0x4000)];

  00145	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR _v3$1[ebp]
  0014b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014d	81 c1 00 40 00
	00		 add	 ecx, 16384		; 00004000H
  00153	0f b7 d1	 movzx	 edx, cx
  00156	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sine@@3ABQAMB ; sine
  0015b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0015d	f3 0f 5a 04 91	 cvtss2sd xmm0, DWORD PTR [ecx+edx*4]
  00162	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0016a	f2 0f 5c c8	 subsd	 xmm1, xmm0
  0016e	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00172	f3 0f 11 45 c4	 movss	 DWORD PTR _v5$[ebp], xmm0

; 183  : 			RwMatrixRotateOneMinusCosineSine(&matrix, &AxisX, v5, sine[(unsigned short)v3->x], rwCOMBINEPRECONCA);

  00177	6a 01		 push	 1
  00179	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR _v3$1[ebp]
  0017f	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00182	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?sine@@3ABQAMB ; sine
  00188	8b 02		 mov	 eax, DWORD PTR [edx]
  0018a	51		 push	 ecx
  0018b	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [eax+ecx*4]
  00190	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00195	51		 push	 ecx
  00196	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _v5$[ebp]
  0019b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?AxisX@@3AAURwV3d@@A ; AxisX
  001a6	51		 push	 ecx
  001a7	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR _matrix$[ebp]
  001ad	52		 push	 edx
  001ae	e8 00 00 00 00	 call	 ?RwMatrixRotateOneMinusCosineSine@@YAPAURwMatrix@@PAU1@QAURwV3d@@MMW4RwOpCombineType@@@Z ; RwMatrixRotateOneMinusCosineSine
  001b3	83 c4 14	 add	 esp, 20			; 00000014H

; 184  : 			v7 = 1.0 - sine[(unsigned short)(v3->z + 0x4000)];

  001b6	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR _v3$1[ebp]
  001bc	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001bf	81 c1 00 40 00
	00		 add	 ecx, 16384		; 00004000H
  001c5	0f b7 d1	 movzx	 edx, cx
  001c8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sine@@3ABQAMB ; sine
  001cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  001cf	f3 0f 5a 04 91	 cvtss2sd xmm0, DWORD PTR [ecx+edx*4]
  001d4	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  001dc	f2 0f 5c c8	 subsd	 xmm1, xmm0
  001e0	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  001e4	f3 0f 11 45 ac	 movss	 DWORD PTR _v7$[ebp], xmm0

; 185  : 			RwMatrixRotateOneMinusCosineSine(&matrix, &AxisZ, v7, sine[(unsigned short)v3->z], rwCOMBINEPRECONCA);

  001e9	6a 01		 push	 1
  001eb	8b 85 70 fe ff
	ff		 mov	 eax, DWORD PTR _v3$1[ebp]
  001f1	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  001f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?sine@@3ABQAMB ; sine
  001fb	8b 02		 mov	 eax, DWORD PTR [edx]
  001fd	51		 push	 ecx
  001fe	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [eax+ecx*4]
  00203	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00208	51		 push	 ecx
  00209	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _v7$[ebp]
  0020e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00213	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?AxisZ@@3AAURwV3d@@A ; AxisZ
  00219	51		 push	 ecx
  0021a	8d 95 e4 fe ff
	ff		 lea	 edx, DWORD PTR _matrix$[ebp]
  00220	52		 push	 edx
  00221	e8 00 00 00 00	 call	 ?RwMatrixRotateOneMinusCosineSine@@YAPAURwMatrix@@PAU1@QAURwV3d@@MMW4RwOpCombineType@@@Z ; RwMatrixRotateOneMinusCosineSine
  00226	83 c4 14	 add	 esp, 20			; 00000014H

; 186  : 			RwMatrixInvert(&dst, &matrix);

  00229	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _matrix$[ebp]
  0022f	50		 push	 eax
  00230	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR _dst$[ebp]
  00236	51		 push	 ecx
  00237	e8 00 00 00 00	 call	 ?RwMatrixInvert@@YAPAURwMatrix@@PAU1@0@Z ; RwMatrixInvert
  0023c	83 c4 08	 add	 esp, 8

; 187  : 			v8 = a1->playerPtr[0]->position.y;

  0023f	b8 04 00 00 00	 mov	 eax, 4
  00244	6b c8 00	 imul	 ecx, eax, 0
  00247	8b 95 7c fe ff
	ff		 mov	 edx, DWORD PTR _a1$[ebp]
  0024d	8b 84 0a 14 01
	00 00		 mov	 eax, DWORD PTR [edx+ecx+276]
  00254	f3 0f 10 80 18
	01 00 00	 movss	 xmm0, DWORD PTR [eax+280]
  0025c	f3 0f 11 45 a0	 movss	 DWORD PTR _v8$[ebp], xmm0

; 188  : 			v9 = a1->playerPtr[0]->position.z;

  00261	b8 04 00 00 00	 mov	 eax, 4
  00266	6b c8 00	 imul	 ecx, eax, 0
  00269	8b 95 7c fe ff
	ff		 mov	 edx, DWORD PTR _a1$[ebp]
  0026f	8b 84 0a 14 01
	00 00		 mov	 eax, DWORD PTR [edx+ecx+276]
  00276	f3 0f 10 80 1c
	01 00 00	 movss	 xmm0, DWORD PTR [eax+284]
  0027e	f3 0f 11 45 94	 movss	 DWORD PTR _v9$[ebp], xmm0

; 189  : 			bobArrowPos.x = a1->playerPtr[0]->position.x;

  00283	b8 04 00 00 00	 mov	 eax, 4
  00288	6b c8 00	 imul	 ecx, eax, 0
  0028b	8b 95 7c fe ff
	ff		 mov	 edx, DWORD PTR _a1$[ebp]
  00291	8b 84 0a 14 01
	00 00		 mov	 eax, DWORD PTR [edx+ecx+276]
  00298	f3 0f 10 80 14
	01 00 00	 movss	 xmm0, DWORD PTR [eax+276]
  002a0	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR _bobArrowPos$[ebp], xmm0

; 190  : 			bobArrowPos.z = v9;

  002a8	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _v9$[ebp]
  002ad	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _bobArrowPos$[ebp+8], xmm0

; 191  : 			bobArrowPos.y = sBobArrowOffsetY + v8;

  002b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sBobArrowOffsetY@@3MA
  002bd	f3 0f 58 45 a0	 addss	 xmm0, DWORD PTR _v8$[ebp]
  002c2	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _bobArrowPos$[ebp+4], xmm0

; 192  : 			RwV3dTransformPoints(&bobArrowPoints, &bobArrowPos, 1, &dst);

  002ca	8d 85 88 fe ff
	ff		 lea	 eax, DWORD PTR _dst$[ebp]
  002d0	50		 push	 eax
  002d1	6a 01		 push	 1
  002d3	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR _bobArrowPos$[ebp]
  002d9	51		 push	 ecx
  002da	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR _bobArrowPoints$[ebp]
  002e0	52		 push	 edx
  002e1	e8 00 00 00 00	 call	 ?RwV3dTransformPoints@@YAPAURwV3d@@PAU1@0HPBURwMatrix@@@Z ; RwV3dTransformPoints
  002e6	83 c4 10	 add	 esp, 16			; 00000010H

; 193  : 			v10 = RpClumpGetFrame(pClumpBobArrow[v1])->child;

  002e9	8b 45 f4	 mov	 eax, DWORD PTR _v1$[ebp]
  002ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pClumpBobArrow@@3PAPAURpClump@@A ; pClumpBobArrow
  002f2	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  002f5	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  002f8	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  002fe	89 4d 88	 mov	 DWORD PTR _v10$[ebp], ecx

; 194  : 			v11 = RwFrameGetLTM(v10);

  00301	8b 45 88	 mov	 eax, DWORD PTR _v10$[ebp]
  00304	50		 push	 eax
  00305	e8 00 00 00 00	 call	 ?RwFrameGetLTM@@YAPAURwMatrix@@PAURwFrame@@@Z ; RwFrameGetLTM
  0030a	83 c4 04	 add	 esp, 4
  0030d	89 85 7c ff ff
	ff		 mov	 DWORD PTR _v11$[ebp], eax

; 195  : 			v11->right.x = matrix.right.x;

  00313	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _v11$[ebp]
  00319	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp]
  00321	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 196  : 			v11->right.y = matrix.right.y;

  00325	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _v11$[ebp]
  0032b	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+4]
  00333	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 197  : 			v11->right.z = matrix.right.z;

  00338	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _v11$[ebp]
  0033e	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+8]
  00346	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 198  : 			v12 = &v11->up;

  0034b	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _v11$[ebp]
  00351	83 c0 10	 add	 eax, 16			; 00000010H
  00354	89 85 70 ff ff
	ff		 mov	 DWORD PTR _v12$[ebp], eax

; 199  : 			v12->x = matrix.up.x;

  0035a	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _v12$[ebp]
  00360	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+16]
  00368	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 200  : 			v12->y = matrix.up.y;

  0036c	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _v12$[ebp]
  00372	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+20]
  0037a	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 201  : 			v12->z = matrix.up.z;

  0037f	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _v12$[ebp]
  00385	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+24]
  0038d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 202  : 			v13 = &v11->at;

  00392	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _v11$[ebp]
  00398	83 c0 20	 add	 eax, 32			; 00000020H
  0039b	89 85 64 ff ff
	ff		 mov	 DWORD PTR _v13$[ebp], eax

; 203  : 			v13->x = matrix.at.x;

  003a1	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _v13$[ebp]
  003a7	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+32]
  003af	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 204  : 			v13->y = matrix.at.y;

  003b3	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _v13$[ebp]
  003b9	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+36]
  003c1	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 205  : 			v13->z = matrix.at.z;

  003c6	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _v13$[ebp]
  003cc	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+40]
  003d4	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 206  : 			RwV3dTransformPoints(&v11->pos, &bobArrowPoints, 1, &matrix);

  003d9	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _matrix$[ebp]
  003df	50		 push	 eax
  003e0	6a 01		 push	 1
  003e2	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _bobArrowPoints$[ebp]
  003e8	51		 push	 ecx
  003e9	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _v11$[ebp]
  003ef	83 c2 30	 add	 edx, 48			; 00000030H
  003f2	52		 push	 edx
  003f3	e8 00 00 00 00	 call	 ?RwV3dTransformPoints@@YAPAURwV3d@@PAU1@0HPBURwMatrix@@@Z ; RwV3dTransformPoints
  003f8	83 c4 10	 add	 esp, 16			; 00000010H

; 207  : 			v14 = RwFrameGetLTM(v10->child);

  003fb	8b 45 88	 mov	 eax, DWORD PTR _v10$[ebp]
  003fe	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00404	51		 push	 ecx
  00405	e8 00 00 00 00	 call	 ?RwFrameGetLTM@@YAPAURwMatrix@@PAURwFrame@@@Z ; RwFrameGetLTM
  0040a	83 c4 04	 add	 esp, 4
  0040d	89 85 58 ff ff
	ff		 mov	 DWORD PTR _v14$[ebp], eax

; 208  : 			v14->right.x = matrix.right.x;

  00413	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _v14$[ebp]
  00419	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp]
  00421	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 209  : 			v14->right.y = matrix.right.y;

  00425	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _v14$[ebp]
  0042b	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+4]
  00433	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 210  : 			v14->right.z = matrix.right.z;

  00438	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _v14$[ebp]
  0043e	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+8]
  00446	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 211  : 			v15 = &v14->up;

  0044b	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _v14$[ebp]
  00451	83 c0 10	 add	 eax, 16			; 00000010H
  00454	89 85 4c ff ff
	ff		 mov	 DWORD PTR _v15$[ebp], eax

; 212  : 			v15->x = matrix.up.x;

  0045a	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _v15$[ebp]
  00460	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+16]
  00468	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 213  : 			v15->y = matrix.up.y;

  0046c	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _v15$[ebp]
  00472	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+20]
  0047a	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 214  : 			v15->z = matrix.up.z;

  0047f	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _v15$[ebp]
  00485	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+24]
  0048d	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 215  : 			v16 = &v14->at;

  00492	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _v14$[ebp]
  00498	83 c0 20	 add	 eax, 32			; 00000020H
  0049b	89 85 40 ff ff
	ff		 mov	 DWORD PTR _v16$[ebp], eax

; 216  : 			v16->x = matrix.at.x;

  004a1	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _v16$[ebp]
  004a7	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+32]
  004af	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 217  : 			v16->y = matrix.at.y;

  004b3	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _v16$[ebp]
  004b9	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+36]
  004c1	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 218  : 			v16->z = matrix.at.z;

  004c6	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _v16$[ebp]
  004cc	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+40]
  004d4	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 219  : 			result = RwV3dTransformPoints(&v14->pos, &bobArrowPoints, 1, &matrix);

  004d9	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _matrix$[ebp]
  004df	50		 push	 eax
  004e0	6a 01		 push	 1
  004e2	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR _bobArrowPoints$[ebp]
  004e8	51		 push	 ecx
  004e9	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _v14$[ebp]
  004ef	83 c2 30	 add	 edx, 48			; 00000030H
  004f2	52		 push	 edx
  004f3	e8 00 00 00 00	 call	 ?RwV3dTransformPoints@@YAPAURwV3d@@PAU1@0HPBURwMatrix@@@Z ; RwV3dTransformPoints
  004f8	83 c4 10	 add	 esp, 16			; 00000010H
  004fb	89 45 e8	 mov	 DWORD PTR _result$[ebp], eax
$LN9@arrowdispt:

; 220  : 		}
; 221  : 		++v1;

  004fe	8b 45 f4	 mov	 eax, DWORD PTR _v1$[ebp]
  00501	83 c0 01	 add	 eax, 1
  00504	89 45 f4	 mov	 DWORD PTR _v1$[ebp], eax

; 222  : 	} while (v1 < 2);

  00507	83 7d f4 02	 cmp	 DWORD PTR _v1$[ebp], 2
  0050b	0f 8c 28 fb ff
	ff		 jl	 $LN4@arrowdispt

; 223  : 
; 224  : 
; 225  : 	int a2;
; 226  : 	signed int i = 0;

  00511	c7 85 58 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
$LN7@arrowdispt:

; 227  : 	do
; 228  : 	{
; 229  : 		if (TObjCamera::currentCamera != i && pClumpBobArrow[i])// #inline TObjCamera::GetCurrentCameraNumber(void)

  0051b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?currentCamera@TObjCamera@@2AAHA ; TObjCamera::currentCamera
  00520	8b 08		 mov	 ecx, DWORD PTR [eax]
  00522	3b 8d 58 fe ff
	ff		 cmp	 ecx, DWORD PTR _i$[ebp]
  00528	74 58		 je	 SHORT $LN10@arrowdispt
  0052a	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00530	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pClumpBobArrow@@3PAPAURpClump@@A ; pClumpBobArrow
  00536	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  0053a	74 46		 je	 SHORT $LN10@arrowdispt

; 230  : 		{
; 231  : 			RwRenderStateGet(rwRENDERSTATECULLMODE, &a2);

  0053c	8d 85 64 fe ff
	ff		 lea	 eax, DWORD PTR _a2$[ebp]
  00542	50		 push	 eax
  00543	6a 14		 push	 20			; 00000014H
  00545	e8 00 00 00 00	 call	 ?RwRenderStateGet@@YAHW4RwRenderState@@PAX@Z ; RwRenderStateGet
  0054a	83 c4 08	 add	 esp, 8

; 232  : 			RwRenderStateSet(rwRENDERSTATECULLMODE, (void*)1);

  0054d	6a 01		 push	 1
  0054f	6a 14		 push	 20			; 00000014H
  00551	e8 00 00 00 00	 call	 ?RwRenderStateSet@@YAHW4RwRenderState@@PAX@Z ; RwRenderStateSet
  00556	83 c4 08	 add	 esp, 8

; 233  : 			RpClumpRender(pClumpBobArrow[i]);

  00559	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0055f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pClumpBobArrow@@3PAPAURpClump@@A ; pClumpBobArrow
  00565	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00568	52		 push	 edx
  00569	e8 00 00 00 00	 call	 ?RpClumpRender@@YAPAURpClump@@PAU1@@Z ; RpClumpRender
  0056e	83 c4 04	 add	 esp, 4

; 234  : 			RwRenderStateSet(rwRENDERSTATECULLMODE, (void*)a2);

  00571	8b 85 64 fe ff
	ff		 mov	 eax, DWORD PTR _a2$[ebp]
  00577	50		 push	 eax
  00578	6a 14		 push	 20			; 00000014H
  0057a	e8 00 00 00 00	 call	 ?RwRenderStateSet@@YAHW4RwRenderState@@PAX@Z ; RwRenderStateSet
  0057f	83 c4 08	 add	 esp, 8
$LN10@arrowdispt:

; 235  : 		}
; 236  : 		++i;

  00582	8b 85 58 fe ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00588	83 c0 01	 add	 eax, 1
  0058b	89 85 58 fe ff
	ff		 mov	 DWORD PTR _i$[ebp], eax

; 237  : 	} while (i < 2);

  00591	83 bd 58 fe ff
	ff 02		 cmp	 DWORD PTR _i$[ebp], 2
  00598	7c 81		 jl	 SHORT $LN7@arrowdispt
$LN1@arrowdispt:

; 238  : 
; 239  : }

  0059a	52		 push	 edx
  0059b	8b cd		 mov	 ecx, ebp
  0059d	50		 push	 eax
  0059e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN18@arrowdispt
  005a4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  005a9	58		 pop	 eax
  005aa	5a		 pop	 edx
  005ab	5f		 pop	 edi
  005ac	5e		 pop	 esi
  005ad	5b		 pop	 ebx
  005ae	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005b1	33 cd		 xor	 ecx, ebp
  005b3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005b8	81 c4 6c 02 00
	00		 add	 esp, 620		; 0000026cH
  005be	3b ec		 cmp	 ebp, esp
  005c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005c5	8b e5		 mov	 esp, ebp
  005c7	5d		 pop	 ebp
  005c8	c3		 ret	 0
  005c9	0f 1f 00	 npad	 3
$LN18@arrowdispt:
  005cc	05 00 00 00	 DD	 5
  005d0	00 00 00 00	 DD	 $LN17@arrowdispt
$LN17@arrowdispt:
  005d4	2c ff ff ff	 DD	 -212			; ffffff2cH
  005d8	0c 00 00 00	 DD	 12			; 0000000cH
  005dc	00 00 00 00	 DD	 $LN12@arrowdispt
  005e0	e4 fe ff ff	 DD	 -284			; fffffee4H
  005e4	40 00 00 00	 DD	 64			; 00000040H
  005e8	00 00 00 00	 DD	 $LN13@arrowdispt
  005ec	d0 fe ff ff	 DD	 -304			; fffffed0H
  005f0	0c 00 00 00	 DD	 12			; 0000000cH
  005f4	00 00 00 00	 DD	 $LN14@arrowdispt
  005f8	88 fe ff ff	 DD	 -376			; fffffe88H
  005fc	40 00 00 00	 DD	 64			; 00000040H
  00600	00 00 00 00	 DD	 $LN15@arrowdispt
  00604	64 fe ff ff	 DD	 -412			; fffffe64H
  00608	04 00 00 00	 DD	 4
  0060c	00 00 00 00	 DD	 $LN16@arrowdispt
$LN16@arrowdispt:
  00610	61		 DB	 97			; 00000061H
  00611	32		 DB	 50			; 00000032H
  00612	00		 DB	 0
$LN15@arrowdispt:
  00613	64		 DB	 100			; 00000064H
  00614	73		 DB	 115			; 00000073H
  00615	74		 DB	 116			; 00000074H
  00616	00		 DB	 0
$LN14@arrowdispt:
  00617	62		 DB	 98			; 00000062H
  00618	6f		 DB	 111			; 0000006fH
  00619	62		 DB	 98			; 00000062H
  0061a	41		 DB	 65			; 00000041H
  0061b	72		 DB	 114			; 00000072H
  0061c	72		 DB	 114			; 00000072H
  0061d	6f		 DB	 111			; 0000006fH
  0061e	77		 DB	 119			; 00000077H
  0061f	50		 DB	 80			; 00000050H
  00620	6f		 DB	 111			; 0000006fH
  00621	69		 DB	 105			; 00000069H
  00622	6e		 DB	 110			; 0000006eH
  00623	74		 DB	 116			; 00000074H
  00624	73		 DB	 115			; 00000073H
  00625	00		 DB	 0
$LN13@arrowdispt:
  00626	6d		 DB	 109			; 0000006dH
  00627	61		 DB	 97			; 00000061H
  00628	74		 DB	 116			; 00000074H
  00629	72		 DB	 114			; 00000072H
  0062a	69		 DB	 105			; 00000069H
  0062b	78		 DB	 120			; 00000078H
  0062c	00		 DB	 0
$LN12@arrowdispt:
  0062d	62		 DB	 98			; 00000062H
  0062e	6f		 DB	 111			; 0000006fH
  0062f	62		 DB	 98			; 00000062H
  00630	41		 DB	 65			; 00000041H
  00631	72		 DB	 114			; 00000072H
  00632	72		 DB	 114			; 00000072H
  00633	6f		 DB	 111			; 0000006fH
  00634	77		 DB	 119			; 00000077H
  00635	50		 DB	 80			; 00000050H
  00636	6f		 DB	 111			; 0000006fH
  00637	73		 DB	 115			; 00000073H
  00638	00		 DB	 0
?arrowdisptest@@YAXXZ ENDP				; arrowdisptest
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_TObjBobsleigh.cpp
;	COMDAT ?SetArrowPosition_hook@@YAXPAUTObjBobsleigh@@@Z
_TEXT	SEGMENT
_a1$ = 8						; size = 4
?SetArrowPosition_hook@@YAXPAUTObjBobsleigh@@@Z PROC	; SetArrowPosition_hook, COMDAT

; 48   : 	__asm 
; 49   : 	{
; 50   : 		push ebx;

  00000	53		 push	 ebx

; 51   : 		call TObjBobsleigh::SetArrowPosition;

  00001	e8 00 00 00 00	 call	 ?SetArrowPosition@TObjBobsleigh@@SAPAURwV3d@@PAU1@@Z ; TObjBobsleigh::SetArrowPosition

; 52   : 		add esp, 0x4;

  00006	83 c4 04	 add	 esp, 4

; 53   : 		ret;

  00009	c3		 ret	 0
?SetArrowPosition_hook@@YAXPAUTObjBobsleigh@@@Z ENDP	; SetArrowPosition_hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_TObjBobsleigh.cpp
;	COMDAT ?initObjS31Bob@@YAXXZ
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_v4$ = -8						; size = 4
?initObjS31Bob@@YAXXZ PROC				; initObjS31Bob, COMDAT

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __35E0B1B6__TObjBobsleigh@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 24   : 	int v4;
; 25   : 
; 26   : 	if (LandManager->texDictionary)

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?LandManager@@3PAULandManagerStruct@@A ; LandManager
  0002d	83 b8 1c 8c 00
	00 00		 cmp	 DWORD PTR [eax+35868], 0
  00034	0f 84 df 00 00
	00		 je	 $LN1@initObjS31

; 27   : 	{
; 28   : 		RwTexDictionarySetCurrent(LandManager->texDictionary);

  0003a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?LandManager@@3PAULandManagerStruct@@A ; LandManager
  0003f	8b 88 1c 8c 00
	00		 mov	 ecx, DWORD PTR [eax+35868]
  00045	51		 push	 ecx
  00046	e8 00 00 00 00	 call	 ?RwTexDictionarySetCurrent@@YAPAURwTexDictionary@@PAU1@@Z ; RwTexDictionarySetCurrent
  0004b	83 c4 04	 add	 esp, 4

; 29   : 		SetGenTp->field_A50->LoadOneFile((char*)"s31obj.one");

  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LCMMFLFE@s31obj?4one@
  00053	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SetGenTp@@3AAPAUTObjSetGen@@A ; SetGenTp
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	8b 89 50 0a 00
	00		 mov	 ecx, DWORD PTR [ecx+2640]
  00060	e8 00 00 00 00	 call	 ?LoadOneFile@ONEFILE@@QAEHPAD@Z ; ONEFILE::LoadOneFile

; 30   : 		for (int i = 0; i < 2; ++i)

  00065	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0006c	eb 09		 jmp	 SHORT $LN4@initObjS31
$LN2@initObjS31:
  0006e	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00071	83 c0 01	 add	 eax, 1
  00074	89 45 ec	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@initObjS31:
  00077	83 7d ec 02	 cmp	 DWORD PTR _i$1[ebp], 2
  0007b	0f 8d 98 00 00
	00		 jge	 $LN1@initObjS31

; 31   : 		{
; 32   : 			v4 = SetGenTp->field_A50->CheckFileID(bobArrow[(i * 7) + pModeSwitch->textLang]);

  00081	6b 45 ec 07	 imul	 eax, DWORD PTR _i$1[ebp], 7
  00085	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pModeSwitch@@3AAPAUMODESWITCH@@A ; pModeSwitch
  0008b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008d	0f be 4a 13	 movsx	 ecx, BYTE PTR [edx+19]
  00091	03 c1		 add	 eax, ecx
  00093	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bobArrow@@3PAPADA ; bobArrow
  00099	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0009c	50		 push	 eax
  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?SetGenTp@@3AAPAUTObjSetGen@@A ; SetGenTp
  000a3	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a5	8b 8a 50 0a 00
	00		 mov	 ecx, DWORD PTR [edx+2640]
  000ab	e8 00 00 00 00	 call	 ?CheckFileID@ONEFILE@@QAEHPAD@Z ; ONEFILE::CheckFileID
  000b0	89 45 f8	 mov	 DWORD PTR _v4$[ebp], eax

; 33   : 			if (SetGenTp->field_A50->LoadOneFile((char*)"s31obj.one"))

  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LCMMFLFE@s31obj?4one@
  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SetGenTp@@3AAPAUTObjSetGen@@A ; SetGenTp
  000bd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bf	8b 89 50 0a 00
	00		 mov	 ecx, DWORD PTR [ecx+2640]
  000c5	e8 00 00 00 00	 call	 ?LoadOneFile@ONEFILE@@QAEHPAD@Z ; ONEFILE::LoadOneFile
  000ca	85 c0		 test	 eax, eax
  000cc	74 36		 je	 SHORT $LN6@initObjS31

; 34   : 			{
; 35   : 				pClumpBobArrow[i] = SetGenTp->field_A50->OneFileLoadClump(v4, SetGenTp->field_A50->ExBuffer);

  000ce	a1 00 00 00 00	 mov	 eax, DWORD PTR ?SetGenTp@@3AAPAUTObjSetGen@@A ; SetGenTp
  000d3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d5	8b 91 50 0a 00
	00		 mov	 edx, DWORD PTR [ecx+2640]
  000db	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  000de	50		 push	 eax
  000df	8b 4d f8	 mov	 ecx, DWORD PTR _v4$[ebp]
  000e2	51		 push	 ecx
  000e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?SetGenTp@@3AAPAUTObjSetGen@@A ; SetGenTp
  000e9	8b 02		 mov	 eax, DWORD PTR [edx]
  000eb	8b 88 50 0a 00
	00		 mov	 ecx, DWORD PTR [eax+2640]
  000f1	e8 00 00 00 00	 call	 ?OneFileLoadClump@ONEFILE@@QAEPAURpClump@@HPAX@Z ; ONEFILE::OneFileLoadClump
  000f6	8b 4d ec	 mov	 ecx, DWORD PTR _i$1[ebp]
  000f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pClumpBobArrow@@3PAPAURpClump@@A ; pClumpBobArrow
  000ff	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 36   : 			}

  00102	eb 10		 jmp	 SHORT $LN7@initObjS31
$LN6@initObjS31:

; 37   : 			else
; 38   : 			{
; 39   : 				pClumpBobArrow[i] = 0;

  00104	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00107	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pClumpBobArrow@@3PAPAURpClump@@A ; pClumpBobArrow
  0010d	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 0
$LN7@initObjS31:

; 40   : 			}
; 41   : 		}

  00114	e9 55 ff ff ff	 jmp	 $LN2@initObjS31
$LN1@initObjS31:

; 42   : 	}
; 43   : }

  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00122	3b ec		 cmp	 ebp, esp
  00124	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c3		 ret	 0
?initObjS31Bob@@YAXXZ ENDP				; initObjS31Bob
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_TObjBobsleigh.cpp
;	COMDAT ?SetArrowPosition@TObjBobsleigh@@SAPAURwV3d@@PAU1@@Z
_TEXT	SEGMENT
_address$ = -388					; size = 4
_llv$ = -376						; size = 4
_v3$1 = -364						; size = 4
_dst$ = -352						; size = 64
_bobArrowPoints$ = -280					; size = 12
_matrix$ = -260						; size = 64
_bobArrowPos$ = -188					; size = 12
_v16$ = -168						; size = 4
_v15$ = -156						; size = 4
_v14$ = -144						; size = 4
_v13$ = -132						; size = 4
_v12$ = -120						; size = 4
_v11$ = -108						; size = 4
_v10$ = -96						; size = 4
_v9$ = -84						; size = 4
_v8$ = -72						; size = 4
_v7$ = -60						; size = 4
_v5$ = -48						; size = 4
_v4$ = -36						; size = 4
_result$ = -24						; size = 4
_v1$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_a1$ = 8						; size = 4
?SetArrowPosition@TObjBobsleigh@@SAPAURwV3d@@PAU1@@Z PROC ; TObjBobsleigh::SetArrowPosition, COMDAT

; 59   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 02 00
	00		 sub	 esp, 584		; 00000248H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd b8 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-584]
  00012	b9 92 00 00 00	 mov	 ecx, 146		; 00000092H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 60   : 	int v1;
; 61   : 	RwV3d* result;
; 62   : 	float v4;
; 63   : 	float v5;
; 64   : 	float v7;
; 65   : 	float v8;
; 66   : 	float v9;
; 67   : 	RwFrame* v10; 
; 68   : 	RwMatrix* v11;
; 69   : 	RwV3d* v12;
; 70   : 	RwV3d* v13;
; 71   : 	RwMatrix* v14;
; 72   : 	RwV3d* v15;
; 73   : 	RwV3d* v16;
; 74   : 	RwV3d bobArrowPos;
; 75   : 	RwMatrix matrix;
; 76   : 	RwV3d bobArrowPoints;
; 77   : 	RwMatrix dst;
; 78   : 
; 79   : 	v1 = 0;

  00028	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _v1$[ebp], 0
$LN4@SetArrowPo:

; 80   : 	do
; 81   : 	{
; 82   : 		result = (RwV3d*)pClumpBobArrow[v1];

  0002f	8b 45 f4	 mov	 eax, DWORD PTR _v1$[ebp]
  00032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pClumpBobArrow@@3PAPAURpClump@@A ; pClumpBobArrow
  00038	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0003b	89 55 e8	 mov	 DWORD PTR _result$[ebp], edx

; 83   : 		if (result && TObjCamera::currentCamera != v1 && a1->playerIndex == v1)

  0003e	83 7d e8 00	 cmp	 DWORD PTR _result$[ebp], 0
  00042	0f 84 34 04 00
	00		 je	 $LN5@SetArrowPo
  00048	a1 00 00 00 00	 mov	 eax, DWORD PTR ?currentCamera@TObjCamera@@2AAHA ; TObjCamera::currentCamera
  0004d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004f	3b 4d f4	 cmp	 ecx, DWORD PTR _v1$[ebp]
  00052	0f 84 24 04 00
	00		 je	 $LN5@SetArrowPo
  00058	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0005b	8b 88 98 01 00
	00		 mov	 ecx, DWORD PTR [eax+408]
  00061	3b 4d f4	 cmp	 ecx, DWORD PTR _v1$[ebp]
  00064	0f 85 12 04 00
	00		 jne	 $LN5@SetArrowPo

; 84   : 		{
; 85   : 			sAngle* v3 = &TObjCamera::CurrentCameraParameterP[0]->angle;

  0006a	b8 04 00 00 00	 mov	 eax, 4
  0006f	6b c8 00	 imul	 ecx, eax, 0
  00072	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?CurrentCameraParameterP@TObjCamera@@2QAPAUcameraParamType@1@A ; TObjCamera::CurrentCameraParameterP
  00078	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0007b	83 c0 0c	 add	 eax, 12			; 0000000cH
  0007e	89 85 94 fe ff
	ff		 mov	 DWORD PTR _v3$1[ebp], eax

; 86   : 			RwMatrixTranslate(&matrix, (RwV3d*)TObjCamera::CurrentCameraParameterP[0], rwCOMBINEREPLACE);

  00084	6a 00		 push	 0
  00086	b8 04 00 00 00	 mov	 eax, 4
  0008b	6b c8 00	 imul	 ecx, eax, 0
  0008e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?CurrentCameraParameterP@TObjCamera@@2QAPAUcameraParamType@1@A ; TObjCamera::CurrentCameraParameterP
  00094	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00097	50		 push	 eax
  00098	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR _matrix$[ebp]
  0009e	51		 push	 ecx
  0009f	e8 00 00 00 00	 call	 ?RwMatrixTranslate@@YAPAURwMatrix@@PAU1@PAURwV3d@@W4RwOpCombineType@@@Z ; RwMatrixTranslate
  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 87   : 			v4 = 1.0 - sine[(unsigned short)(v3->y + 0x4000)];

  000a7	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR _v3$1[ebp]
  000ad	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b0	81 c1 00 40 00
	00		 add	 ecx, 16384		; 00004000H
  000b6	0f b7 d1	 movzx	 edx, cx
  000b9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sine@@3ABQAMB ; sine
  000be	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c0	f3 0f 5a 04 91	 cvtss2sd xmm0, DWORD PTR [ecx+edx*4]
  000c5	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  000cd	f2 0f 5c c8	 subsd	 xmm1, xmm0
  000d1	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  000d5	f3 0f 11 45 dc	 movss	 DWORD PTR _v4$[ebp], xmm0

; 88   : 			RwMatrixRotateOneMinusCosineSine(&matrix, &AxisY, v4, sine[(unsigned short)v3->y], rwCOMBINEPRECONCA);

  000da	6a 01		 push	 1
  000dc	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR _v3$1[ebp]
  000e2	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  000e6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?sine@@3ABQAMB ; sine
  000ec	8b 02		 mov	 eax, DWORD PTR [edx]
  000ee	51		 push	 ecx
  000ef	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [eax+ecx*4]
  000f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f9	51		 push	 ecx
  000fa	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _v4$[ebp]
  000ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00104	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?AxisY@@3AAURwV3d@@A ; AxisY
  0010a	51		 push	 ecx
  0010b	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _matrix$[ebp]
  00111	52		 push	 edx
  00112	e8 00 00 00 00	 call	 ?RwMatrixRotateOneMinusCosineSine@@YAPAURwMatrix@@PAU1@QAURwV3d@@MMW4RwOpCombineType@@@Z ; RwMatrixRotateOneMinusCosineSine
  00117	83 c4 14	 add	 esp, 20			; 00000014H

; 89   : 			v5 = 1.0 - sine[(unsigned short)(v3->x + 0x4000)];

  0011a	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR _v3$1[ebp]
  00120	8b 08		 mov	 ecx, DWORD PTR [eax]
  00122	81 c1 00 40 00
	00		 add	 ecx, 16384		; 00004000H
  00128	0f b7 d1	 movzx	 edx, cx
  0012b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sine@@3ABQAMB ; sine
  00130	8b 08		 mov	 ecx, DWORD PTR [eax]
  00132	f3 0f 5a 04 91	 cvtss2sd xmm0, DWORD PTR [ecx+edx*4]
  00137	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0013f	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00143	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00147	f3 0f 11 45 d0	 movss	 DWORD PTR _v5$[ebp], xmm0

; 90   : 			RwMatrixRotateOneMinusCosineSine(&matrix, &AxisX, v5, sine[(unsigned short)v3->x], rwCOMBINEPRECONCA);

  0014c	6a 01		 push	 1
  0014e	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR _v3$1[ebp]
  00154	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00157	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?sine@@3ABQAMB ; sine
  0015d	8b 02		 mov	 eax, DWORD PTR [edx]
  0015f	51		 push	 ecx
  00160	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [eax+ecx*4]
  00165	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016a	51		 push	 ecx
  0016b	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _v5$[ebp]
  00170	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00175	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?AxisX@@3AAURwV3d@@A ; AxisX
  0017b	51		 push	 ecx
  0017c	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _matrix$[ebp]
  00182	52		 push	 edx
  00183	e8 00 00 00 00	 call	 ?RwMatrixRotateOneMinusCosineSine@@YAPAURwMatrix@@PAU1@QAURwV3d@@MMW4RwOpCombineType@@@Z ; RwMatrixRotateOneMinusCosineSine
  00188	83 c4 14	 add	 esp, 20			; 00000014H

; 91   : 			v7 = 1.0 - sine[(unsigned short)(v3->z + 0x4000)];

  0018b	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR _v3$1[ebp]
  00191	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00194	81 c1 00 40 00
	00		 add	 ecx, 16384		; 00004000H
  0019a	0f b7 d1	 movzx	 edx, cx
  0019d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sine@@3ABQAMB ; sine
  001a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a4	f3 0f 5a 04 91	 cvtss2sd xmm0, DWORD PTR [ecx+edx*4]
  001a9	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  001b1	f2 0f 5c c8	 subsd	 xmm1, xmm0
  001b5	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  001b9	f3 0f 11 45 c4	 movss	 DWORD PTR _v7$[ebp], xmm0

; 92   : 			RwMatrixRotateOneMinusCosineSine(&matrix, &AxisZ, v7, sine[(unsigned short)v3->z], rwCOMBINEPRECONCA);

  001be	6a 01		 push	 1
  001c0	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR _v3$1[ebp]
  001c6	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  001ca	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?sine@@3ABQAMB ; sine
  001d0	8b 02		 mov	 eax, DWORD PTR [edx]
  001d2	51		 push	 ecx
  001d3	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [eax+ecx*4]
  001d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001dd	51		 push	 ecx
  001de	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _v7$[ebp]
  001e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?AxisZ@@3AAURwV3d@@A ; AxisZ
  001ee	51		 push	 ecx
  001ef	8d 95 fc fe ff
	ff		 lea	 edx, DWORD PTR _matrix$[ebp]
  001f5	52		 push	 edx
  001f6	e8 00 00 00 00	 call	 ?RwMatrixRotateOneMinusCosineSine@@YAPAURwMatrix@@PAU1@QAURwV3d@@MMW4RwOpCombineType@@@Z ; RwMatrixRotateOneMinusCosineSine
  001fb	83 c4 14	 add	 esp, 20			; 00000014H

; 93   : 			RwMatrixInvert(&dst, &matrix);

  001fe	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _matrix$[ebp]
  00204	50		 push	 eax
  00205	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR _dst$[ebp]
  0020b	51		 push	 ecx
  0020c	e8 00 00 00 00	 call	 ?RwMatrixInvert@@YAPAURwMatrix@@PAU1@0@Z ; RwMatrixInvert
  00211	83 c4 08	 add	 esp, 8

; 94   : 			v8 = a1->position.y;

  00214	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  00217	f3 0f 10 80 04
	01 00 00	 movss	 xmm0, DWORD PTR [eax+260]
  0021f	f3 0f 11 45 b8	 movss	 DWORD PTR _v8$[ebp], xmm0

; 95   : 			v9 = a1->position.z;

  00224	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  00227	f3 0f 10 80 08
	01 00 00	 movss	 xmm0, DWORD PTR [eax+264]
  0022f	f3 0f 11 45 ac	 movss	 DWORD PTR _v9$[ebp], xmm0

; 96   : 			bobArrowPos.x = a1->position.x;

  00234	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  00237	f3 0f 10 80 00
	01 00 00	 movss	 xmm0, DWORD PTR [eax+256]
  0023f	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _bobArrowPos$[ebp], xmm0

; 97   : 			bobArrowPos.z = v9;

  00247	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _v9$[ebp]
  0024c	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _bobArrowPos$[ebp+8], xmm0

; 98   : 			bobArrowPos.y = sBobArrowOffsetY + v8;

  00254	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sBobArrowOffsetY@@3MA
  0025c	f3 0f 58 45 b8	 addss	 xmm0, DWORD PTR _v8$[ebp]
  00261	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _bobArrowPos$[ebp+4], xmm0

; 99   : 			RwV3dTransformPoints(&bobArrowPoints, &bobArrowPos, 1, &dst);

  00269	8d 85 a0 fe ff
	ff		 lea	 eax, DWORD PTR _dst$[ebp]
  0026f	50		 push	 eax
  00270	6a 01		 push	 1
  00272	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR _bobArrowPos$[ebp]
  00278	51		 push	 ecx
  00279	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR _bobArrowPoints$[ebp]
  0027f	52		 push	 edx
  00280	e8 00 00 00 00	 call	 ?RwV3dTransformPoints@@YAPAURwV3d@@PAU1@0HPBURwMatrix@@@Z ; RwV3dTransformPoints
  00285	83 c4 10	 add	 esp, 16			; 00000010H

; 100  : 			v10 = RpClumpGetFrame(pClumpBobArrow[v1])->child;

  00288	8b 45 f4	 mov	 eax, DWORD PTR _v1$[ebp]
  0028b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pClumpBobArrow@@3PAPAURpClump@@A ; pClumpBobArrow
  00291	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00294	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00297	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  0029d	89 4d a0	 mov	 DWORD PTR _v10$[ebp], ecx

; 101  : 			v11 = RwFrameGetLTM(v10);

  002a0	8b 45 a0	 mov	 eax, DWORD PTR _v10$[ebp]
  002a3	50		 push	 eax
  002a4	e8 00 00 00 00	 call	 ?RwFrameGetLTM@@YAPAURwMatrix@@PAURwFrame@@@Z ; RwFrameGetLTM
  002a9	83 c4 04	 add	 esp, 4
  002ac	89 45 94	 mov	 DWORD PTR _v11$[ebp], eax

; 102  : 			v11->right.x = matrix.right.x;

  002af	8b 45 94	 mov	 eax, DWORD PTR _v11$[ebp]
  002b2	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp]
  002ba	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 103  : 			v11->right.y = matrix.right.y;

  002be	8b 45 94	 mov	 eax, DWORD PTR _v11$[ebp]
  002c1	f3 0f 10 85 00
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+4]
  002c9	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 104  : 			v11->right.z = matrix.right.z;

  002ce	8b 45 94	 mov	 eax, DWORD PTR _v11$[ebp]
  002d1	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+8]
  002d9	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 105  : 			v12 = &v11->up;

  002de	8b 45 94	 mov	 eax, DWORD PTR _v11$[ebp]
  002e1	83 c0 10	 add	 eax, 16			; 00000010H
  002e4	89 45 88	 mov	 DWORD PTR _v12$[ebp], eax

; 106  : 			v12->x = matrix.up.x;

  002e7	8b 45 88	 mov	 eax, DWORD PTR _v12$[ebp]
  002ea	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+16]
  002f2	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 107  : 			v12->y = matrix.up.y;

  002f6	8b 45 88	 mov	 eax, DWORD PTR _v12$[ebp]
  002f9	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+20]
  00301	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 108  : 			v12->z = matrix.up.z;

  00306	8b 45 88	 mov	 eax, DWORD PTR _v12$[ebp]
  00309	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+24]
  00311	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 109  : 			v13 = &v11->at;

  00316	8b 45 94	 mov	 eax, DWORD PTR _v11$[ebp]
  00319	83 c0 20	 add	 eax, 32			; 00000020H
  0031c	89 85 7c ff ff
	ff		 mov	 DWORD PTR _v13$[ebp], eax

; 110  : 			v13->x = matrix.at.x;

  00322	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _v13$[ebp]
  00328	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+32]
  00330	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 111  : 			v13->y = matrix.at.y;

  00334	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _v13$[ebp]
  0033a	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+36]
  00342	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 112  : 			v13->z = matrix.at.z;

  00347	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _v13$[ebp]
  0034d	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+40]
  00355	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 113  : 			RwV3dTransformPoints(&v11->pos, &bobArrowPoints, 1, &matrix);

  0035a	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _matrix$[ebp]
  00360	50		 push	 eax
  00361	6a 01		 push	 1
  00363	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _bobArrowPoints$[ebp]
  00369	51		 push	 ecx
  0036a	8b 55 94	 mov	 edx, DWORD PTR _v11$[ebp]
  0036d	83 c2 30	 add	 edx, 48			; 00000030H
  00370	52		 push	 edx
  00371	e8 00 00 00 00	 call	 ?RwV3dTransformPoints@@YAPAURwV3d@@PAU1@0HPBURwMatrix@@@Z ; RwV3dTransformPoints
  00376	83 c4 10	 add	 esp, 16			; 00000010H

; 114  : 			v14 = RwFrameGetLTM(v10->child);

  00379	8b 45 a0	 mov	 eax, DWORD PTR _v10$[ebp]
  0037c	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00382	51		 push	 ecx
  00383	e8 00 00 00 00	 call	 ?RwFrameGetLTM@@YAPAURwMatrix@@PAURwFrame@@@Z ; RwFrameGetLTM
  00388	83 c4 04	 add	 esp, 4
  0038b	89 85 70 ff ff
	ff		 mov	 DWORD PTR _v14$[ebp], eax

; 115  : 			v14->right.x = matrix.right.x;

  00391	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _v14$[ebp]
  00397	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp]
  0039f	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 116  : 			v14->right.y = matrix.right.y;

  003a3	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _v14$[ebp]
  003a9	f3 0f 10 85 00
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+4]
  003b1	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 117  : 			v14->right.z = matrix.right.z;

  003b6	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _v14$[ebp]
  003bc	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+8]
  003c4	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 118  : 			v15 = &v14->up;

  003c9	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _v14$[ebp]
  003cf	83 c0 10	 add	 eax, 16			; 00000010H
  003d2	89 85 64 ff ff
	ff		 mov	 DWORD PTR _v15$[ebp], eax

; 119  : 			v15->x = matrix.up.x;

  003d8	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _v15$[ebp]
  003de	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+16]
  003e6	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 120  : 			v15->y = matrix.up.y;

  003ea	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _v15$[ebp]
  003f0	f3 0f 10 85 10
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+20]
  003f8	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 121  : 			v15->z = matrix.up.z;

  003fd	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _v15$[ebp]
  00403	f3 0f 10 85 14
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+24]
  0040b	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 122  : 			v16 = &v14->at;

  00410	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _v14$[ebp]
  00416	83 c0 20	 add	 eax, 32			; 00000020H
  00419	89 85 58 ff ff
	ff		 mov	 DWORD PTR _v16$[ebp], eax

; 123  : 			v16->x = matrix.at.x;

  0041f	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _v16$[ebp]
  00425	f3 0f 10 85 1c
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+32]
  0042d	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 124  : 			v16->y = matrix.at.y;

  00431	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _v16$[ebp]
  00437	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+36]
  0043f	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 125  : 			v16->z = matrix.at.z;

  00444	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _v16$[ebp]
  0044a	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _matrix$[ebp+40]
  00452	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 126  : 			result = RwV3dTransformPoints(&v14->pos, &bobArrowPoints, 1, &matrix);

  00457	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _matrix$[ebp]
  0045d	50		 push	 eax
  0045e	6a 01		 push	 1
  00460	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _bobArrowPoints$[ebp]
  00466	51		 push	 ecx
  00467	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _v14$[ebp]
  0046d	83 c2 30	 add	 edx, 48			; 00000030H
  00470	52		 push	 edx
  00471	e8 00 00 00 00	 call	 ?RwV3dTransformPoints@@YAPAURwV3d@@PAU1@0HPBURwMatrix@@@Z ; RwV3dTransformPoints
  00476	83 c4 10	 add	 esp, 16			; 00000010H
  00479	89 45 e8	 mov	 DWORD PTR _result$[ebp], eax
$LN5@SetArrowPo:

; 127  : 		}
; 128  : 		++v1;

  0047c	8b 45 f4	 mov	 eax, DWORD PTR _v1$[ebp]
  0047f	83 c0 01	 add	 eax, 1
  00482	89 45 f4	 mov	 DWORD PTR _v1$[ebp], eax

; 129  : 	} while (v1 < 2);

  00485	83 7d f4 02	 cmp	 DWORD PTR _v1$[ebp], 2
  00489	0f 8c a0 fb ff
	ff		 jl	 $LN4@SetArrowPo

; 130  : 
; 131  : 
; 132  : 	int llv = playerTOp[0]->characterNo;

  0048f	b8 04 00 00 00	 mov	 eax, 4
  00494	6b c8 00	 imul	 ecx, eax, 0
  00497	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?playerTOp@@3QAPAUTObjPlayer@@A ; playerTOp
  0049d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  004a0	0f be 88 ba 00
	00 00		 movsx	 ecx, BYTE PTR [eax+186]
  004a7	89 8d 88 fe ff
	ff		 mov	 DWORD PTR _llv$[ebp], ecx

; 133  : 	int address = 0x639120;

  004ad	c7 85 7c fe ff
	ff 20 91 63 00	 mov	 DWORD PTR _address$[ebp], 6525216 ; 00639120H

; 134  : 
; 135  : 	__asm
; 136  : 	{
; 137  : 		mov edi, llv;

  004b7	8b bd 88 fe ff
	ff		 mov	 edi, DWORD PTR _llv$[ebp]

; 138  : 		call address;

  004bd	ff 95 7c fe ff
	ff		 call	 DWORD PTR _address$[ebp]

; 139  : 	}
; 140  : 	return result;

  004c3	8b 45 e8	 mov	 eax, DWORD PTR _result$[ebp]

; 141  : }

  004c6	52		 push	 edx
  004c7	8b cd		 mov	 ecx, ebp
  004c9	50		 push	 eax
  004ca	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@SetArrowPo
  004d0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  004d5	58		 pop	 eax
  004d6	5a		 pop	 edx
  004d7	5f		 pop	 edi
  004d8	5e		 pop	 esi
  004d9	5b		 pop	 ebx
  004da	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004dd	33 cd		 xor	 ecx, ebp
  004df	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004e4	81 c4 48 02 00
	00		 add	 esp, 584		; 00000248H
  004ea	3b ec		 cmp	 ebp, esp
  004ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004f1	8b e5		 mov	 esp, ebp
  004f3	5d		 pop	 ebp
  004f4	c3		 ret	 0
  004f5	0f 1f 00	 npad	 3
$LN12@SetArrowPo:
  004f8	04 00 00 00	 DD	 4
  004fc	00 00 00 00	 DD	 $LN11@SetArrowPo
$LN11@SetArrowPo:
  00500	44 ff ff ff	 DD	 -188			; ffffff44H
  00504	0c 00 00 00	 DD	 12			; 0000000cH
  00508	00 00 00 00	 DD	 $LN7@SetArrowPo
  0050c	fc fe ff ff	 DD	 -260			; fffffefcH
  00510	40 00 00 00	 DD	 64			; 00000040H
  00514	00 00 00 00	 DD	 $LN8@SetArrowPo
  00518	e8 fe ff ff	 DD	 -280			; fffffee8H
  0051c	0c 00 00 00	 DD	 12			; 0000000cH
  00520	00 00 00 00	 DD	 $LN9@SetArrowPo
  00524	a0 fe ff ff	 DD	 -352			; fffffea0H
  00528	40 00 00 00	 DD	 64			; 00000040H
  0052c	00 00 00 00	 DD	 $LN10@SetArrowPo
$LN10@SetArrowPo:
  00530	64		 DB	 100			; 00000064H
  00531	73		 DB	 115			; 00000073H
  00532	74		 DB	 116			; 00000074H
  00533	00		 DB	 0
$LN9@SetArrowPo:
  00534	62		 DB	 98			; 00000062H
  00535	6f		 DB	 111			; 0000006fH
  00536	62		 DB	 98			; 00000062H
  00537	41		 DB	 65			; 00000041H
  00538	72		 DB	 114			; 00000072H
  00539	72		 DB	 114			; 00000072H
  0053a	6f		 DB	 111			; 0000006fH
  0053b	77		 DB	 119			; 00000077H
  0053c	50		 DB	 80			; 00000050H
  0053d	6f		 DB	 111			; 0000006fH
  0053e	69		 DB	 105			; 00000069H
  0053f	6e		 DB	 110			; 0000006eH
  00540	74		 DB	 116			; 00000074H
  00541	73		 DB	 115			; 00000073H
  00542	00		 DB	 0
$LN8@SetArrowPo:
  00543	6d		 DB	 109			; 0000006dH
  00544	61		 DB	 97			; 00000061H
  00545	74		 DB	 116			; 00000074H
  00546	72		 DB	 114			; 00000072H
  00547	69		 DB	 105			; 00000069H
  00548	78		 DB	 120			; 00000078H
  00549	00		 DB	 0
$LN7@SetArrowPo:
  0054a	62		 DB	 98			; 00000062H
  0054b	6f		 DB	 111			; 0000006fH
  0054c	62		 DB	 98			; 00000062H
  0054d	41		 DB	 65			; 00000041H
  0054e	72		 DB	 114			; 00000072H
  0054f	72		 DB	 114			; 00000072H
  00550	6f		 DB	 111			; 0000006fH
  00551	77		 DB	 119			; 00000077H
  00552	50		 DB	 80			; 00000050H
  00553	6f		 DB	 111			; 0000006fH
  00554	73		 DB	 115			; 00000073H
  00555	00		 DB	 0
?SetArrowPosition@TObjBobsleigh@@SAPAURwV3d@@PAU1@@Z ENDP ; TObjBobsleigh::SetArrowPosition
_TEXT	ENDS
END
