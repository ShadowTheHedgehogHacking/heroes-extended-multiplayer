; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28316.0 

	TITLE	C:\Users\DonutStopGaming\Desktop\Mod\_Hook.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__F2BDCE38_pch@h DB 01H
__6EE8A1C6_mod@pch DB 01H
__6667239A__Hook@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z	; Hook::Replace
PUBLIC	?Replace@Hook@@QAEXHPAXW4ConventionType@1@P6APAXXZ@Z ; Hook::Replace
PUBLIC	?WritePatch@Hook@@QAE_NPAXPADH@Z		; Hook::WritePatch
PUBLIC	?WriteJMP@Hook@@QAE_NPAX0@Z			; Hook::WriteJMP
PUBLIC	?WriteCall@Hook@@QAE_NPAX0@Z			; Hook::WriteCall
PUBLIC	?StdcallHook@Hook@@QAEXPAX@Z			; Hook::StdcallHook
PUBLIC	__JustMyCode_Default
EXTRN	__imp__GetCurrentProcess@0:PROC
EXTRN	__imp__WriteProcessMemory@20:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_Hook.cpp
;	COMDAT ?StdcallHook@Hook@@QAEXPAX@Z
_TEXT	SEGMENT
_function$ = 8						; size = 4
?StdcallHook@Hook@@QAEXPAX@Z PROC			; Hook::StdcallHook, COMDAT
; _this$ = ecx

; 11   : 	__asm
; 12   : 	{
; 13   : 		push edi;

  00000	57		 push	 edi

; 14   : 		push esi;

  00001	56		 push	 esi

; 15   : 		call function;

  00002	ff 55 08	 call	 DWORD PTR _function$[ebp]

; 16   : 		pop esi;

  00005	5e		 pop	 esi

; 17   : 		pop edi;

  00006	5f		 pop	 edi
?StdcallHook@Hook@@QAEXPAX@Z ENDP			; Hook::StdcallHook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_Hook.cpp
;	COMDAT ?WriteCall@Hook@@QAE_NPAX0@Z
_TEXT	SEGMENT
_data$ = -52						; size = 5
_size$ = -36						; size = 4
_offset$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_writeAddress$ = 8					; size = 4
_toAddress$ = 12					; size = 4
?WriteCall@Hook@@QAE_NPAX0@Z PROC			; Hook::WriteCall, COMDAT
; _this$ = ecx

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 08 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-248]
  00013	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __6667239A__Hook@cpp
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 93   : 	int offset = (int)toAddress - ((int)writeAddress + 2);

  00037	8b 45 08	 mov	 eax, DWORD PTR _writeAddress$[ebp]
  0003a	83 c0 02	 add	 eax, 2
  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR _toAddress$[ebp]
  00040	2b c8		 sub	 ecx, eax
  00042	89 4d e8	 mov	 DWORD PTR _offset$[ebp], ecx

; 94   : 	int size;
; 95   : 	char data[5];
; 96   : 	size = 2;

  00045	c7 45 dc 02 00
	00 00		 mov	 DWORD PTR _size$[ebp], 2

; 97   : 	offset = (int)toAddress - ((int)writeAddress + size);

  0004c	8b 45 08	 mov	 eax, DWORD PTR _writeAddress$[ebp]
  0004f	03 45 dc	 add	 eax, DWORD PTR _size$[ebp]
  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _toAddress$[ebp]
  00055	2b c8		 sub	 ecx, eax
  00057	89 4d e8	 mov	 DWORD PTR _offset$[ebp], ecx

; 98   : 	data[0] = 0xE8;

  0005a	b8 01 00 00 00	 mov	 eax, 1
  0005f	6b c8 00	 imul	 ecx, eax, 0
  00062	c6 44 0d cc e8	 mov	 BYTE PTR _data$[ebp+ecx], -24 ; ffffffe8H

; 99   : 	data[1] = offset;

  00067	b8 01 00 00 00	 mov	 eax, 1
  0006c	c1 e0 00	 shl	 eax, 0
  0006f	8a 4d e8	 mov	 cl, BYTE PTR _offset$[ebp]
  00072	88 4c 05 cc	 mov	 BYTE PTR _data$[ebp+eax], cl

; 100  : 	return WritePatch(writeAddress, data, size);

  00076	8b 45 dc	 mov	 eax, DWORD PTR _size$[ebp]
  00079	50		 push	 eax
  0007a	8d 4d cc	 lea	 ecx, DWORD PTR _data$[ebp]
  0007d	51		 push	 ecx
  0007e	8b 55 08	 mov	 edx, DWORD PTR _writeAddress$[ebp]
  00081	52		 push	 edx
  00082	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 101  : }

  0008a	52		 push	 edx
  0008b	8b cd		 mov	 ecx, ebp
  0008d	50		 push	 eax
  0008e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@WriteCall
  00094	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00099	58		 pop	 eax
  0009a	5a		 pop	 edx
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a1	33 cd		 xor	 ecx, ebp
  000a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a8	81 c4 f8 00 00
	00		 add	 esp, 248		; 000000f8H
  000ae	3b ec		 cmp	 ebp, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 08 00	 ret	 8
  000bb	90		 npad	 1
$LN5@WriteCall:
  000bc	01 00 00 00	 DD	 1
  000c0	00 00 00 00	 DD	 $LN4@WriteCall
$LN4@WriteCall:
  000c4	cc ff ff ff	 DD	 -52			; ffffffccH
  000c8	05 00 00 00	 DD	 5
  000cc	00 00 00 00	 DD	 $LN3@WriteCall
$LN3@WriteCall:
  000d0	64		 DB	 100			; 00000064H
  000d1	61		 DB	 97			; 00000061H
  000d2	74		 DB	 116			; 00000074H
  000d3	61		 DB	 97			; 00000061H
  000d4	00		 DB	 0
?WriteCall@Hook@@QAE_NPAX0@Z ENDP			; Hook::WriteCall
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_Hook.cpp
;	COMDAT ?WriteJMP@Hook@@QAE_NPAX0@Z
_TEXT	SEGMENT
_data$ = -52						; size = 5
_size$ = -36						; size = 4
_offset$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_writeAddress$ = 8					; size = 4
_toAddress$ = 12					; size = 4
?WriteJMP@Hook@@QAE_NPAX0@Z PROC			; Hook::WriteJMP, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 08 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-248]
  00013	b9 3e 00 00 00	 mov	 ecx, 62			; 0000003eH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00025	33 c5		 xor	 eax, ebp
  00027	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002a	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET __6667239A__Hook@cpp
  00032	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 70   : 	int offset = (int)toAddress - ((int)writeAddress + 2);

  00037	8b 45 08	 mov	 eax, DWORD PTR _writeAddress$[ebp]
  0003a	83 c0 02	 add	 eax, 2
  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR _toAddress$[ebp]
  00040	2b c8		 sub	 ecx, eax
  00042	89 4d e8	 mov	 DWORD PTR _offset$[ebp], ecx

; 71   : 	int size;
; 72   : 	char data[5];
; 73   : 	if (offset < -127 || offset > 127)

  00045	83 7d e8 81	 cmp	 DWORD PTR _offset$[ebp], -127 ; ffffff81H
  00049	7c 06		 jl	 SHORT $LN4@WriteJMP
  0004b	83 7d e8 7f	 cmp	 DWORD PTR _offset$[ebp], 127 ; 0000007fH
  0004f	7e 2a		 jle	 SHORT $LN2@WriteJMP
$LN4@WriteJMP:

; 74   : 	{
; 75   : 		size = 5;

  00051	c7 45 dc 05 00
	00 00		 mov	 DWORD PTR _size$[ebp], 5

; 76   : 		offset = (int)toAddress - ((int)writeAddress + size);

  00058	8b 45 08	 mov	 eax, DWORD PTR _writeAddress$[ebp]
  0005b	03 45 dc	 add	 eax, DWORD PTR _size$[ebp]
  0005e	8b 4d 0c	 mov	 ecx, DWORD PTR _toAddress$[ebp]
  00061	2b c8		 sub	 ecx, eax
  00063	89 4d e8	 mov	 DWORD PTR _offset$[ebp], ecx

; 77   : 		data[0] = asm_jmp;

  00066	b8 01 00 00 00	 mov	 eax, 1
  0006b	6b c8 00	 imul	 ecx, eax, 0
  0006e	c6 44 0d cc e9	 mov	 BYTE PTR _data$[ebp+ecx], -23 ; ffffffe9H

; 78   : 		*(int*)(data + 1) = offset;

  00073	8b 45 e8	 mov	 eax, DWORD PTR _offset$[ebp]
  00076	89 45 cd	 mov	 DWORD PTR _data$[ebp+1], eax

; 79   : 	}

  00079	eb 31		 jmp	 SHORT $LN3@WriteJMP
$LN2@WriteJMP:

; 80   : 	else
; 81   : 	{
; 82   : 		size = 2;

  0007b	c7 45 dc 02 00
	00 00		 mov	 DWORD PTR _size$[ebp], 2

; 83   : 		offset = (int)toAddress - ((int)writeAddress + size);

  00082	8b 45 08	 mov	 eax, DWORD PTR _writeAddress$[ebp]
  00085	03 45 dc	 add	 eax, DWORD PTR _size$[ebp]
  00088	8b 4d 0c	 mov	 ecx, DWORD PTR _toAddress$[ebp]
  0008b	2b c8		 sub	 ecx, eax
  0008d	89 4d e8	 mov	 DWORD PTR _offset$[ebp], ecx

; 84   : 		data[0] = asm_jmpRel8;

  00090	b8 01 00 00 00	 mov	 eax, 1
  00095	6b c8 00	 imul	 ecx, eax, 0
  00098	c6 44 0d cc eb	 mov	 BYTE PTR _data$[ebp+ecx], -21 ; ffffffebH

; 85   : 		data[1] = offset;

  0009d	b8 01 00 00 00	 mov	 eax, 1
  000a2	c1 e0 00	 shl	 eax, 0
  000a5	8a 4d e8	 mov	 cl, BYTE PTR _offset$[ebp]
  000a8	88 4c 05 cc	 mov	 BYTE PTR _data$[ebp+eax], cl
$LN3@WriteJMP:

; 86   : 	}
; 87   : 	return WritePatch(writeAddress, data, size);

  000ac	8b 45 dc	 mov	 eax, DWORD PTR _size$[ebp]
  000af	50		 push	 eax
  000b0	8d 4d cc	 lea	 ecx, DWORD PTR _data$[ebp]
  000b3	51		 push	 ecx
  000b4	8b 55 08	 mov	 edx, DWORD PTR _writeAddress$[ebp]
  000b7	52		 push	 edx
  000b8	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 88   : }

  000c0	52		 push	 edx
  000c1	8b cd		 mov	 ecx, ebp
  000c3	50		 push	 eax
  000c4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@WriteJMP
  000ca	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000cf	58		 pop	 eax
  000d0	5a		 pop	 edx
  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx
  000d4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d7	33 cd		 xor	 ecx, ebp
  000d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000de	81 c4 f8 00 00
	00		 add	 esp, 248		; 000000f8H
  000e4	3b ec		 cmp	 ebp, esp
  000e6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
  000f1	0f 1f 00	 npad	 3
$LN8@WriteJMP:
  000f4	01 00 00 00	 DD	 1
  000f8	00 00 00 00	 DD	 $LN7@WriteJMP
$LN7@WriteJMP:
  000fc	cc ff ff ff	 DD	 -52			; ffffffccH
  00100	05 00 00 00	 DD	 5
  00104	00 00 00 00	 DD	 $LN6@WriteJMP
$LN6@WriteJMP:
  00108	64		 DB	 100			; 00000064H
  00109	61		 DB	 97			; 00000061H
  0010a	74		 DB	 116			; 00000074H
  0010b	61		 DB	 97			; 00000061H
  0010c	00		 DB	 0
?WriteJMP@Hook@@QAE_NPAX0@Z ENDP			; Hook::WriteJMP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_Hook.cpp
;	COMDAT ?WritePatch@Hook@@QAE_NPAXPADH@Z
_TEXT	SEGMENT
tv72 = -205						; size = 1
_this$ = -8						; size = 4
_address$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
?WritePatch@Hook@@QAE_NPAXPADH@Z PROC			; Hook::WritePatch, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __6667239A__Hook@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 64   : 	return WriteProcessMemory(GetCurrentProcess(), address, data, size, NULL);

  0002d	8b f4		 mov	 esi, esp
  0002f	6a 00		 push	 0
  00031	8b 45 10	 mov	 eax, DWORD PTR _size$[ebp]
  00034	50		 push	 eax
  00035	8b 4d 0c	 mov	 ecx, DWORD PTR _data$[ebp]
  00038	51		 push	 ecx
  00039	8b 55 08	 mov	 edx, DWORD PTR _address$[ebp]
  0003c	52		 push	 edx
  0003d	8b fc		 mov	 edi, esp
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  00045	3b fc		 cmp	 edi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	50		 push	 eax
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteProcessMemory@20
  00053	3b f4		 cmp	 esi, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	85 c0		 test	 eax, eax
  0005c	74 09		 je	 SHORT $LN3@WritePatch
  0005e	c6 85 33 ff ff
	ff 01		 mov	 BYTE PTR tv72[ebp], 1
  00065	eb 07		 jmp	 SHORT $LN4@WritePatch
$LN3@WritePatch:
  00067	c6 85 33 ff ff
	ff 00		 mov	 BYTE PTR tv72[ebp], 0
$LN4@WritePatch:
  0006e	8a 85 33 ff ff
	ff		 mov	 al, BYTE PTR tv72[ebp]

; 65   : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
  00077	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0007d	3b ec		 cmp	 ebp, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 0c 00	 ret	 12			; 0000000cH
?WritePatch@Hook@@QAE_NPAXPADH@Z ENDP			; Hook::WritePatch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_Hook.cpp
;	COMDAT ?Replace@Hook@@QAEXHPAXW4ConventionType@1@P6APAXXZ@Z
_TEXT	SEGMENT
tv64 = -208						; size = 4
_this$ = -8						; size = 4
_targetAddress$ = 8					; size = 4
_pFunction$ = 12					; size = 4
_callingConvention$ = 16				; size = 4
_hookASMFunction$ = 20					; size = 4
?Replace@Hook@@QAEXHPAXW4ConventionType@1@P6APAXXZ@Z PROC ; Hook::Replace, COMDAT
; _this$ = ecx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __6667239A__Hook@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 43   : 	switch (callingConvention)

  0002d	8b 45 10	 mov	 eax, DWORD PTR _callingConvention$[ebp]
  00030	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv64[ebp], eax
  00036	83 bd 30 ff ff
	ff 04		 cmp	 DWORD PTR tv64[ebp], 4
  0003d	74 04		 je	 SHORT $LN5@Replace
  0003f	eb 0e		 jmp	 SHORT $LN2@Replace

; 44   : 	{
; 45   : 	case Cdecl:
; 46   : 	{
; 47   : 		break;

  00041	eb 0c		 jmp	 SHORT $LN2@Replace
$LN5@Replace:

; 48   : 	}
; 49   : 
; 50   : 	case Custom:
; 51   : 	{
; 52   : 		(void (*)())hookASMFunction();

  00043	8b f4		 mov	 esi, esp
  00045	ff 55 14	 call	 DWORD PTR _hookASMFunction$[ebp]
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Replace:

; 53   : 		break;
; 54   : 	}
; 55   : 	}
; 56   : 	entryPoint = (int*)targetAddress;

  0004f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _targetAddress$[ebp]
  00055	89 08		 mov	 DWORD PTR [eax], ecx

; 57   : 	functionAddress = pFunction;

  00057	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _pFunction$[ebp]
  0005d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 58   : 	WriteJMP(entryPoint, functionAddress);

  00060	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00066	51		 push	 ecx
  00067	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0006a	8b 02		 mov	 eax, DWORD PTR [edx]
  0006c	50		 push	 eax
  0006d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	e8 00 00 00 00	 call	 ?WriteJMP@Hook@@QAE_NPAX0@Z ; Hook::WriteJMP

; 59   : }

  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0007e	3b ec		 cmp	 ebp, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 10 00	 ret	 16			; 00000010H
?Replace@Hook@@QAEXHPAXW4ConventionType@1@P6APAXXZ@Z ENDP ; Hook::Replace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_Hook.cpp
;	COMDAT ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z
_TEXT	SEGMENT
tv64 = -208						; size = 4
_this$ = -8						; size = 4
_targetAddress$ = 8					; size = 4
_pFunction$ = 12					; size = 4
_callingConvention$ = 16				; size = 4
?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z PROC	; Hook::Replace, COMDAT
; _this$ = ecx

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __6667239A__Hook@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 23   : 	switch (callingConvention)

  0002d	8b 45 10	 mov	 eax, DWORD PTR _callingConvention$[ebp]
  00030	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv64[ebp], eax

; 24   : 	{
; 25   : 		case Cdecl:
; 26   : 		{
; 27   : 			break;
; 28   : 		}
; 29   : 
; 30   : 		case Custom:
; 31   : 		{
; 32   : 			// Invalid call
; 33   : 			break;
; 34   : 		}
; 35   : 	}
; 36   : 	entryPoint = (int*)targetAddress;

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _targetAddress$[ebp]
  0003c	89 08		 mov	 DWORD PTR [eax], ecx

; 37   : 	functionAddress = pFunction;

  0003e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 4d 0c	 mov	 ecx, DWORD PTR _pFunction$[ebp]
  00044	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 38   : 	WriteJMP(entryPoint, functionAddress);

  00047	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0004d	51		 push	 ecx
  0004e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00051	8b 02		 mov	 eax, DWORD PTR [edx]
  00053	50		 push	 eax
  00054	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?WriteJMP@Hook@@QAE_NPAX0@Z ; Hook::WriteJMP

; 39   : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 0c 00	 ret	 12			; 0000000cH
?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ENDP	; Hook::Replace
_TEXT	ENDS
END
