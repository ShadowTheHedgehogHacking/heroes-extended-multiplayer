; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28316.0 

	TITLE	C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?layoutTeamKind@@3HA				; layoutTeamKind
PUBLIC	?DemoLocator@@3AAPADA				; DemoLocator
PUBLIC	?gStartStageLocator2p@@3AAPAHA			; gStartStageLocator2p
PUBLIC	?gStartStageLocator@@3PAHA			; gStartStageLocator
PUBLIC	?myCode2@@3P6AXPAX@ZA				; myCode2
PUBLIC	?myCode3@@3P6AXPAX@ZA				; myCode3
PUBLIC	?myCodeSetBobsleigh@@3P6AXHPAD@ZA		; myCodeSetBobsleigh
PUBLIC	?myCodeSetBobsleigh2@@3P6AXHPADPAX1@ZA		; myCodeSetBobsleigh2
PUBLIC	?address@@3HA					; address
PUBLIC	?address2@@3HA					; address2
PUBLIC	?t@@3PAUTObjRingSubstance@@A			; t
PUBLIC	?warpPosition@@3PAURwV3d@@A			; warpPosition
PUBLIC	?nextAddyforBigRigs@@3HA			; nextAddyforBigRigs
_BSS	SEGMENT
?layoutTeamKind@@3HA DD 01H DUP (?)			; layoutTeamKind
?myCode2@@3P6AXPAX@ZA DD 01H DUP (?)			; myCode2
?myCode3@@3P6AXPAX@ZA DD 01H DUP (?)			; myCode3
?myCodeSetBobsleigh@@3P6AXHPAD@ZA DD 01H DUP (?)	; myCodeSetBobsleigh
?myCodeSetBobsleigh2@@3P6AXHPADPAX1@ZA DD 01H DUP (?)	; myCodeSetBobsleigh2
?t@@3PAUTObjRingSubstance@@A DD 01H DUP (?)		; t
_BSS	ENDS
msvcjmc	SEGMENT
__F2BDCE38_pch@h DB 01H
__6EE8A1C6_mod@pch DB 01H
__1BA9ED96_dllmain@cpp DB 01H
__2CCBBE23_propidl@h DB 01H
__24E9E95F_stdlib@h DB 01H
__BB40F913_TObject@hpp DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
?DemoLocator@@3AAPADA DD 09ddd88H			; DemoLocator
?gStartStageLocator2p@@3AAPAHA DD 07c5e18H		; gStartStageLocator2p
?gStartStageLocator@@3PAHA DD 07c2fc8H			; gStartStageLocator
?address@@3HA DD 043d16dH				; address
?address2@@3HA DD 044b67dH				; address2
?warpPosition@@3PAURwV3d@@A DD 0c3160000r	; -150	; warpPosition
	DD	044fdc000r			; 2030
	DD	045fd2000r			; 8100
	DD	047a41000r			; 84000
	DD	045210000r			; 2576
	DD	0c5110000r			; -2320
	DD	0c63c4800r			; -12050
	DD	044fdc000r			; 2030
	DD	045fff000r			; 8190
	DD	047c35000r			; 100000
	DD	046066000r			; 8600
	DD	046437800r			; 12510
?nextAddyforBigRigs@@3HA DD 04c891bH			; nextAddyforBigRigs
_DATA	ENDS
PUBLIC	_Init
PUBLIC	_DllMain@12
PUBLIC	?SearchStartStageLocator_Hook@@YAPADH@Z		; SearchStartStageLocator_Hook
PUBLIC	?IncChaotixClearItem@@YAHPAUTObjTeam@@@Z	; IncChaotixClearItem
PUBLIC	?SearchStartStageLocator_ASM@@YAXXZ		; SearchStartStageLocator_ASM
PUBLIC	?IncChaotixClearItem_ASM@@YAXXZ			; IncChaotixClearItem_ASM
PUBLIC	?CreateTrampoline@@YAPAXPAX0D@Z			; CreateTrampoline
PUBLIC	?ADV_2P_Create@@YAXXZ				; ADV_2P_Create
PUBLIC	?ADV_2P_Create_Tramp@@YAXPAUTObject@@@Z		; ADV_2P_Create_Tramp
PUBLIC	?ADV_2P_ExecSelect2_Tramp@@YAXPAUADV_2P@@@Z	; ADV_2P_ExecSelect2_Tramp
PUBLIC	?ADV_2P_ExecSelect2@@YAXXZ			; ADV_2P_ExecSelect2
PUBLIC	?superdirtybinpatch@@YAXXZ			; superdirtybinpatch
PUBLIC	?dirtygotogamechallengepatch@@YAXXZ		; dirtygotogamechallengepatch
PUBLIC	?SetBobsleigh_Hook@@YAXHPAD@Z			; SetBobsleigh_Hook
PUBLIC	?SetBobsleigh_Hook2@@YAXHPADPAX1@Z		; SetBobsleigh_Hook2
PUBLIC	?BobCatchPlayer_Hook@@YAXXZ			; BobCatchPlayer_Hook
PUBLIC	?ringtest@@YAXXZ				; ringtest
PUBLIC	?ringsubstanceexechook_ASM@@YAXXZ		; ringsubstanceexechook_ASM
PUBLIC	?RingSubstanceCheckCollisionHook_ASM@@YAXXZ	; RingSubstanceCheckCollisionHook_ASM
PUBLIC	?WarpCameraAndPlayer_ASM@@YAXXZ			; WarpCameraAndPlayer_ASM
PUBLIC	?CheckPlayerHack@@YAHPAUTObjTrainCore@@@Z	; CheckPlayerHack
PUBLIC	?TrainHack@@YAXPAUTObjTrainCore@@@Z		; TrainHack
PUBLIC	?TObjTrainCore_Exec_ASM@@YAXXZ			; TObjTrainCore_Exec_ASM
PUBLIC	?BigCannonHack@@YAIPAVTObjBigCannon@@@Z		; BigCannonHack
PUBLIC	?BigCannonHack_ASM@@YAXXZ			; BigCannonHack_ASM
PUBLIC	?GhostRing_ASM@@YAXXZ				; GhostRing_ASM
PUBLIC	?ringdisp_ASM@@YAXXZ				; ringdisp_ASM
PUBLIC	?ringtdisp_ASM@@YAXXZ				; ringtdisp_ASM
PUBLIC	?setringtdisp_ASM@@YAXXZ			; setringtdisp_ASM
PUBLIC	?hackToSetRingDisp_ASM@@YAXXZ			; hackToSetRingDisp_ASM
PUBLIC	?scatterRingGottenFix@@YAXXZ			; scatterRingGottenFix
PUBLIC	__JustMyCode_Default
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@41500000
PUBLIC	__real@41600000
EXTRN	_memcpy:PROC
EXTRN	__imp__VirtualAlloc@16:PROC
EXTRN	__imp__VirtualProtect@16:PROC
EXTRN	?GetLeaderPlayerNo@TObjTeam@@QAEDXZ:PROC	; TObjTeam::GetLeaderPlayerNo
EXTRN	?GetNowLeaderPlayerNo@TObjTeam@@QAEDXZ:PROC	; TObjTeam::GetNowLeaderPlayerNo
EXTRN	?IsThisPostedPlayer@TObjTeam@@QAE_NH@Z:PROC	; TObjTeam::IsThisPostedPlayer
EXTRN	?GetCharacterId@C_COLLI@@QAEHXZ:PROC		; C_COLLI::GetCharacterId
EXTRN	?IsHitKind@C_COLLI@@QAEPAU1@E@Z:PROC		; C_COLLI::IsHitKind
EXTRN	?IsHitPlayer@C_COLLI@@QAEPAU1@XZ:PROC		; C_COLLI::IsHitPlayer
EXTRN	?ClearSearch@CCL_MASTER@@SAXXZ:PROC		; CCL_MASTER::ClearSearch
EXTRN	?GetPlayerNumberFromCCLCharacterId@@YAHH@Z:PROC	; GetPlayerNumberFromCCLCharacterId
EXTRN	?ChangeModeFormationFly_Hook@@YAXXZ:PROC	; ChangeModeFormationFly_Hook
EXTRN	?MakeGameKeyData@@YAPAFXZ:PROC			; MakeGameKeyData
EXTRN	?MakePlayersKeyData@@YAXXZ:PROC			; MakePlayersKeyData
EXTRN	?InitModules@MAIN@@SAHXZ:PROC			; MAIN::InitModules
EXTRN	?SetupDInput@PCSpecific@@YAJXZ:PROC		; PCSpecific::SetupDInput
EXTRN	?Start@CLASS_DVDREAD@@YGPAHPAH@Z:PROC		; CLASS_DVDREAD::Start
EXTRN	?setobjCheckRangeOut2_hook@@YAXPAURwV3d@@M@Z:PROC ; setobjCheckRangeOut2_hook
EXTRN	?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z:PROC ; Hook::Replace
EXTRN	?WritePatch@Hook@@QAE_NPAXPADH@Z:PROC		; Hook::WritePatch
EXTRN	?WriteJMP@Hook@@QAE_NPAX0@Z:PROC		; Hook::WriteJMP
EXTRN	?initObjS31Bob@@YAXXZ:PROC			; initObjS31Bob
EXTRN	?SetArrowPosition_hook@@YAXPAUTObjBobsleigh@@@Z:PROC ; SetArrowPosition_hook
EXTRN	?arrowdisptest_hook@@YAXXZ:PROC			; arrowdisptest_hook
EXTRN	?addFrame_Hook@@YAXHPAUACTION@@@Z:PROC		; addFrame_Hook
EXTRN	?InitStageAndTeamInfo@@YAXXZ:PROC		; InitStageAndTeamInfo
EXTRN	?WarpCameraAndPlayer@TObjCamera@@SAXPAURwV3d@@D@Z:PROC ; TObjCamera::WarpCameraAndPlayer
EXTRN	?TObjS11Warp_Exec_Hook@@YAXXZ:PROC		; TObjS11Warp_Exec_Hook
EXTRN	?TObjWarp_Exec_Hook@@YAXXZ:PROC			; TObjWarp_Exec_Hook
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?teamTOp@@3PAPAUTObjTeam@@A:DWORD		; teamTOp
EXTRN	?playerTOp@@3QAPAUTObjPlayer@@A:DWORD		; playerTOp
EXTRN	?Action@@3AAUACTION@@A:DWORD			; Action
EXTRN	?team1@@3DA:BYTE				; team1
EXTRN	?team2@@3DA:BYTE				; team2
EXTRN	?pModeSwitch@@3AAPAUMODESWITCH@@A:DWORD		; pModeSwitch
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?storedmaterial@@3HA DD 01H DUP (?)			; storedmaterial
_BSS	ENDS
;	COMDAT __real@41600000
CONST	SEGMENT
__real@41600000 DD 041600000r			; 14
CONST	ENDS
;	COMDAT __real@41500000
CONST	SEGMENT
__real@41500000 DD 041500000r			; 13
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
?addytrue@?1??BobCatchPlayer_Hook@@YAXXZ@4HA DD 045eef7H ; `BobCatchPlayer_Hook'::`2'::addytrue
?addyfalse@?1??BobCatchPlayer_Hook@@YAXXZ@4HA DD 045ef41H ; `BobCatchPlayer_Hook'::`2'::addyfalse
?addy@@3HA DD	04832f0H				; addy
?addy2@@3HA DD	0482ff8H				; addy2
?addybacktocheckcolli@@3HA DD 04833ddH			; addybacktocheckcolli
?addyback@@3HA DD 0471951H				; addyback
?trainAddy@@3HA DD 04da6b6H				; trainAddy
?clumpallatomicaddy@@3HA DD 066b540H			; clumpallatomicaddy
?clumprenderaddy@@3HA DD 066b4f0H			; clumprenderaddy
?istransparent@@3HA DD 01H				; istransparent
?returnghostring@@3HA DD 048254fH			; returnghostring
?ringtdispret@@3HA DD 04823e0H				; ringtdispret
?setringtdispret@@3HA DD 0482580H			; setringtdispret
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?scatterRingGottenFix@@YAXXZ
_TEXT	SEGMENT
_t$ = -8						; size = 4
?scatterRingGottenFix@@YAXXZ PROC			; scatterRingGottenFix, COMDAT

; 715  : 	TObjRingSubstance* t;
; 716  : 	
; 717  : 	__asm mov [t], esi;

  00000	89 75 f8	 mov	 DWORD PTR _t$[ebp], esi
?scatterRingGottenFix@@YAXXZ ENDP			; scatterRingGottenFix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?hackToSetRingDisp_ASM@@YAXXZ
_TEXT	SEGMENT
?hackToSetRingDisp_ASM@@YAXXZ PROC			; hackToSetRingDisp_ASM, COMDAT

; 706  : 	*(int*)0x752604 = (int)ringdisp_ASM;

  00000	c7 05 04 26 75
	00 00 00 00 00	 mov	 DWORD PTR ds:7677444, OFFSET ?ringdisp_ASM@@YAXXZ ; ringdisp_ASM

; 707  : 	*(int*)0x752608 = (int)ringtdisp_ASM;

  0000a	c7 05 08 26 75
	00 00 00 00 00	 mov	 DWORD PTR ds:7677448, OFFSET ?ringtdisp_ASM@@YAXXZ ; ringtdisp_ASM

; 708  : 	*(int*)0x752634 = (int)ringdisp_ASM;

  00014	c7 05 34 26 75
	00 00 00 00 00	 mov	 DWORD PTR ds:7677492, OFFSET ?ringdisp_ASM@@YAXXZ ; ringdisp_ASM

; 709  : 	*(int*)0x752638 = (int)setringtdisp_ASM;

  0001e	c7 05 38 26 75
	00 00 00 00 00	 mov	 DWORD PTR ds:7677496, OFFSET ?setringtdisp_ASM@@YAXXZ ; setringtdisp_ASM

; 710  : 	__asm ret 4;

  00028	c2 04 00	 ret	 4
?hackToSetRingDisp_ASM@@YAXXZ ENDP			; hackToSetRingDisp_ASM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?setringtdisp_ASM@@YAXXZ
_TEXT	SEGMENT
?setringtdisp_ASM@@YAXXZ PROC				; setringtdisp_ASM, COMDAT

; 691  : {

$shadowmodels$3:

; 692  : 	__asm
; 693  : 	{
; 694  : 	shadowmodels:
; 695  : 		pushad

  00000	60		 pushad

; 696  : 		call ringtdisp_ASM

  00001	e8 00 00 00 00	 call	 ?ringtdisp_ASM@@YAXXZ	; ringtdisp_ASM

; 697  : 		popad

  00006	61		 popad

; 698  : 		jmp setringtdispret

  00007	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?setringtdispret@@3HA
?setringtdisp_ASM@@YAXXZ ENDP				; setringtdisp_ASM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?ringtdisp_ASM@@YAXXZ
_TEXT	SEGMENT
?ringtdisp_ASM@@YAXXZ PROC				; ringtdisp_ASM, COMDAT

; 682  : 	__asm
; 683  : 	{
; 684  : 		mov[istransparent], 01

  00000	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?istransparent@@3HA, 1

; 685  : 		jmp ringtdispret

  0000a	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?ringtdispret@@3HA
?ringtdisp_ASM@@YAXXZ ENDP				; ringtdisp_ASM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?ringdisp_ASM@@YAXXZ
_TEXT	SEGMENT
?ringdisp_ASM@@YAXXZ PROC				; ringdisp_ASM, COMDAT

; 672  : 	__asm
; 673  : 	{
; 674  : 		mov[istransparent], 00

  00000	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?istransparent@@3HA, 0

; 675  : 		ret

  0000a	c3		 ret	 0
?ringdisp_ASM@@YAXXZ ENDP				; ringdisp_ASM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?GhostRing_ASM@@YAXXZ
_TEXT	SEGMENT
_t$ = -8						; size = 4
?GhostRing_ASM@@YAXXZ PROC				; GhostRing_ASM, COMDAT

; 575  : 	TObjRingSubstance* t;
; 576  : 
; 577  : 	__asm
; 578  : 	{
; 579  : 		mov[t], edi;

  00000	89 7d f8	 mov	 DWORD PTR _t$[ebp], edi

; 580  : 		pushad

  00003	60		 pushad

; 581  : 	}
; 582  : 	if (*(int*)t->pTObjSetRing != 0x7525CC)

  00004	8b 45 f8	 mov	 eax, DWORD PTR _t$[ebp]
  00007	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  0000d	81 39 cc 25 75
	00		 cmp	 DWORD PTR [ecx], 7677388 ; 007525ccH
  00013	74 4e		 je	 SHORT $LN2@GhostRing_

; 583  : 	{
; 584  : 		if (!((1 << (t->ringNo & 31)) & *(&t->pTObjSetRing->field_54->pStrage_HHC->gottenFlag + ((t->ringNo >> 5) & 3))))

  00015	8b 45 f8	 mov	 eax, DWORD PTR _t$[ebp]
  00018	0f be 88 ca 00
	00 00		 movsx	 ecx, BYTE PTR [eax+202]
  0001f	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00022	ba 01 00 00 00	 mov	 edx, 1
  00027	d3 e2		 shl	 edx, cl
  00029	8b 45 f8	 mov	 eax, DWORD PTR _t$[ebp]
  0002c	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  00032	8b 41 54	 mov	 eax, DWORD PTR [ecx+84]
  00035	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00038	8b 45 f8	 mov	 eax, DWORD PTR _t$[ebp]
  0003b	0f be 80 ca 00
	00 00		 movsx	 eax, BYTE PTR [eax+202]
  00042	c1 f8 05	 sar	 eax, 5
  00045	83 e0 03	 and	 eax, 3
  00048	23 14 81	 and	 edx, DWORD PTR [ecx+eax*4]
  0004b	75 0c		 jne	 SHORT $LN3@GhostRing_

; 585  : 		{
; 586  : 			istransparent = 0;

  0004d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?istransparent@@3HA, 0

; 587  : 		}

  00057	eb 0a		 jmp	 SHORT $LN2@GhostRing_
$LN3@GhostRing_:

; 588  : 		else
; 589  : 		{
; 590  : 			istransparent = 1;

  00059	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?istransparent@@3HA, 1
$LN2@GhostRing_:

; 591  : 		}
; 592  : 	}
; 593  : 
; 594  : 	__asm
; 595  : 	{
; 596  : 		popad

  00063	61		 popad

; 597  : 		test ebx, ebx

  00064	85 db		 test	 ebx, ebx

; 598  : 		je noclump

  00066	74 15		 je	 SHORT $noclump$6

; 599  : 		push [istransparent]

  00068	ff 35 00 00 00
	00		 push	 DWORD PTR ?istransparent@@3HA

; 600  : 		push setmaterial

  0006e	68 00 00 00 00	 push	 OFFSET $setmaterial$7

; 601  : 		push ebx

  00073	53		 push	 ebx

; 602  : 		call [clumpallatomicaddy]

  00074	ff 15 00 00 00
	00		 call	 DWORD PTR ?clumpallatomicaddy@@3HA

; 603  : 		add esp, 0xC

  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
$noclump$6:

; 604  : 
; 605  : 		noclump:
; 606  : 		call [clumprenderaddy]

  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR ?clumprenderaddy@@3HA

; 607  : 		cmp [storedmaterial], 0

  00083	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?storedmaterial@@3HA, 0

; 608  : 		je noclump2

  0008a	74 1c		 je	 SHORT $noclump2$8

; 609  : 		test ebx, ebx

  0008c	85 db		 test	 ebx, ebx

; 610  : 		je noclump2

  0008e	74 18		 je	 SHORT $noclump2$8

; 611  : 		push [istransparent]

  00090	ff 35 00 00 00
	00		 push	 DWORD PTR ?istransparent@@3HA

; 612  : 		neg dword ptr [esp]

  00096	f7 1c 24	 neg	 DWORD PTR [esp]

; 613  : 		push setmaterial

  00099	68 00 00 00 00	 push	 OFFSET $setmaterial$7

; 614  : 		push ebx

  0009e	53		 push	 ebx

; 615  : 		call clumpallatomicaddy

  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR ?clumpallatomicaddy@@3HA

; 616  : 		add esp, 0xC

  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH
$noclump2$8:

; 617  : 
; 618  : 			noclump2:
; 619  : 		jmp [returnghostring]

  000a8	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?returnghostring@@3HA
$setmaterial$7:

; 620  : 
; 621  : 	setmaterial:
; 622  : 		push eax

  000ae	50		 push	 eax

; 623  : 		push ecx

  000af	51		 push	 ecx

; 624  : 		push edx

  000b0	52		 push	 edx

; 625  : 		mov ecx, [esp + 0x10]

  000b1	8b 4c 24 10	 mov	 ecx, DWORD PTR [esp+16]

; 626  : 		test ecx, ecx

  000b5	85 c9		 test	 ecx, ecx

; 627  : 		je noaddress

  000b7	74 45		 je	 SHORT $noaddress$9

; 628  : 		mov ebx, [ecx + 0x18]

  000b9	8b 59 18	 mov	 ebx, DWORD PTR [ecx+24]

; 629  : 		test ebx, ebx

  000bc	85 db		 test	 ebx, ebx

; 630  : 		je noaddress

  000be	74 3e		 je	 SHORT $noaddress$9

; 631  : 		cmp [ebx + 0x18], 1

  000c0	80 7b 18 01	 cmp	 BYTE PTR [ebx+24], 1

; 632  : 		je hasmaterial

  000c4	74 05		 je	 SHORT $hasmaterial$10

; 633  : 		mov ebx, [ecx + 0x14]

  000c6	8b 59 14	 mov	 ebx, DWORD PTR [ecx+20]

; 634  : 		jmp atomicmaterial

  000c9	eb 03		 jmp	 SHORT $atomicmaterial$11
$hasmaterial$10:

; 635  : 
; 636  : 		hasmaterial:
; 637  : 		mov ebx, [ebx + 0x58]

  000cb	8b 5b 58	 mov	 ebx, DWORD PTR [ebx+88]
$atomicmaterial$11:

; 638  : 
; 639  : 		atomicmaterial:
; 640  : 		mov [storedmaterial], ebx

  000ce	89 1d 00 00 00
	00		 mov	 DWORD PTR ?storedmaterial@@3HA, ebx

; 641  : 		test ebx, ebx

  000d4	85 db		 test	 ebx, ebx

; 642  : 		je noaddress

  000d6	74 26		 je	 SHORT $noaddress$9

; 643  : 		movzx ecx, word ptr[ebx + 0x1A]

  000d8	0f b7 4b 1a	 movzx	 ecx, WORD PTR [ebx+26]

; 644  : 		add ebx, 0x2C

  000dc	83 c3 2c	 add	 ebx, 44			; 0000002cH

; 645  : 		test ecx, ecx

  000df	85 c9		 test	 ecx, ecx

; 646  : 		je noaddress

  000e1	74 1b		 je	 SHORT $noaddress$9
$counter$12:

; 647  : 		
; 648  : 			counter:
; 649  : 		mov eax, [ebx]

  000e3	8b 03		 mov	 eax, DWORD PTR [ebx]

; 650  : 		mov edx, [esp + 0x14]

  000e5	8b 54 24 14	 mov	 edx, DWORD PTR [esp+20]

; 651  : 		push eax;

  000e9	50		 push	 eax

; 652  : 		mov eax, 0x799958

  000ea	b8 58 99 79 00	 mov	 eax, 7969112		; 00799958H

; 653  : 		imul edx, [eax]

  000ef	0f af 10	 imul	 edx, DWORD PTR [eax]

; 654  : 		pop eax

  000f2	58		 pop	 eax

; 655  : 		nop

  000f3	90		 npad	 1

; 656  : 		add eax, edx

  000f4	03 c2		 add	 eax, edx

; 657  : 		mov[ebx], eax

  000f6	89 03		 mov	 DWORD PTR [ebx], eax

; 658  : 		add ebx, 0x2C

  000f8	83 c3 2c	 add	 ebx, 44			; 0000002cH

; 659  : 		dec ecx

  000fb	49		 dec	 ecx

; 660  : 		jne  counter

  000fc	75 e5		 jne	 SHORT $counter$12
$noaddress$9:

; 661  : 
; 662  : 		noaddress:
; 663  : 		pop edx

  000fe	5a		 pop	 edx

; 664  : 		pop ecx

  000ff	59		 pop	 ecx

; 665  : 		pop eax

  00100	58		 pop	 eax

; 666  : 		ret

  00101	c3		 ret	 0
?GhostRing_ASM@@YAXXZ ENDP				; GhostRing_ASM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?BigCannonHack_ASM@@YAXXZ
_TEXT	SEGMENT
?BigCannonHack_ASM@@YAXXZ PROC				; BigCannonHack_ASM, COMDAT

; 561  : 	__asm push edi;

  00000	57		 push	 edi
  00001	e8 00 00 00 00	 call	 ?BigCannonHack@@YAIPAVTObjBigCannon@@@Z ; BigCannonHack
  00006	83 c4 04	 add	 esp, 4
  00009	8b d8		 mov	 ebx, eax
  0000b	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?nextAddyforBigRigs@@3HA ; nextAddyforBigRigs
?BigCannonHack_ASM@@YAXXZ ENDP				; BigCannonHack_ASM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?BigCannonHack@@YAIPAVTObjBigCannon@@@Z
_TEXT	SEGMENT
__tv1$ = -32						; size = 4
__tv0$ = -20						; size = 4
__tv11$ = -8						; size = 4
_bigcan$ = 8						; size = 4
?BigCannonHack@@YAIPAVTObjBigCannon@@@Z PROC		; BigCannonHack, COMDAT

; 550  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 551  : 	TObjBigCannon* _tv11 = bigcan;

  00028	8b 45 08	 mov	 eax, DWORD PTR _bigcan$[ebp]
  0002b	89 45 f8	 mov	 DWORD PTR __tv11$[ebp], eax

; 552  : 	int _tv0 = GetPlayerNumberFromCCLCharacterId(((::C_COLLI*)&((*_tv11).C_COLLI))->my_num + 1);

  0002e	8b 45 f8	 mov	 eax, DWORD PTR __tv11$[ebp]
  00031	8b 88 a8 00 00
	00		 mov	 ecx, DWORD PTR [eax+168]
  00037	83 c1 01	 add	 ecx, 1
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 ?GetPlayerNumberFromCCLCharacterId@@YAHH@Z ; GetPlayerNumberFromCCLCharacterId
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 ec	 mov	 DWORD PTR __tv0$[ebp], eax

; 553  : 	TObjTeam* _tv1 = playerTOp[_tv0]->pTObjTeam;

  00046	8b 45 ec	 mov	 eax, DWORD PTR __tv0$[ebp]
  00049	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?playerTOp@@3QAPAUTObjPlayer@@A ; playerTOp
  0004f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00052	8b 82 cc 00 00
	00		 mov	 eax, DWORD PTR [edx+204]
  00058	89 45 e0	 mov	 DWORD PTR __tv1$[ebp], eax

; 554  : 	//return _tv1->GetLeaderPlayerNo();
; 555  : 	return 3;

  0005b	b8 03 00 00 00	 mov	 eax, 3

; 556  : }

  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
?BigCannonHack@@YAIPAVTObjBigCannon@@@Z ENDP		; BigCannonHack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?TObjTrainCore_Exec_ASM@@YAXXZ
_TEXT	SEGMENT
?TObjTrainCore_Exec_ASM@@YAXXZ PROC			; TObjTrainCore_Exec_ASM, COMDAT

; 539  : 	//do st
; 540  : 	__asm
; 541  : 	{
; 542  : 		push edi;

  00000	57		 push	 edi

; 543  : 		call TrainHack;

  00001	e8 00 00 00 00	 call	 ?TrainHack@@YAXPAUTObjTrainCore@@@Z ; TrainHack

; 544  : 		add esp, 0x4;

  00006	83 c4 04	 add	 esp, 4

; 545  : 		jmp trainAddy;

  00009	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?trainAddy@@3HA
?TObjTrainCore_Exec_ASM@@YAXXZ ENDP			; TObjTrainCore_Exec_ASM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?TrainHack@@YAXPAUTObjTrainCore@@@Z
_TEXT	SEGMENT
_a1$ = 8						; size = 4
?TrainHack@@YAXPAUTObjTrainCore@@@Z PROC		; TrainHack, COMDAT

; 531  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 532  : 	TObjCamera::WarpCameraAndPlayer(&warpPosition[(int)a1->SETOBJ_PARAM->PARAM->data[0]], CheckPlayerHack(a1));

  00028	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?CheckPlayerHack@@YAHPAUTObjTrainCore@@@Z ; CheckPlayerHack
  00031	83 c4 04	 add	 esp, 4
  00034	50		 push	 eax
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _a1$[ebp]
  00038	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0003b	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0003e	b9 01 00 00 00	 mov	 ecx, 1
  00043	6b d1 00	 imul	 edx, ecx, 0
  00046	0f be 04 10	 movsx	 eax, BYTE PTR [eax+edx]
  0004a	6b c8 0c	 imul	 ecx, eax, 12
  0004d	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?warpPosition@@3PAURwV3d@@A ; warpPosition
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 ?WarpCameraAndPlayer@TObjCamera@@SAXPAURwV3d@@D@Z ; TObjCamera::WarpCameraAndPlayer
  00059	83 c4 08	 add	 esp, 8

; 533  : 	*(int*)&a1->SETOBJ_PARAM->SETFlag_HHC &= ~0x10002;

  0005c	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0005f	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00062	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00065	81 e2 fd ff fe
	ff		 and	 edx, -65539		; fffefffdH
  0006b	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0006e	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00071	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 534  : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
  00077	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0007d	3b ec		 cmp	 ebp, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
?TrainHack@@YAXPAUTObjTrainCore@@@Z ENDP		; TrainHack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?CheckPlayerHack@@YAHPAUTObjTrainCore@@@Z
_TEXT	SEGMENT
_v3$1 = -56						; size = 4
_v7$2 = -44						; size = 4
_v6$3 = -32						; size = 4
_v1$4 = -20						; size = 4
_hitTarget$ = -8					; size = 4
_a1$ = 8						; size = 4
?CheckPlayerHack@@YAHPAUTObjTrainCore@@@Z PROC		; CheckPlayerHack, COMDAT

; 493  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 494  : 	CCL_MASTER::ClearSearch();

  00028	e8 00 00 00 00	 call	 ?ClearSearch@CCL_MASTER@@SAXXZ ; CCL_MASTER::ClearSearch

; 495  : 	C_COLLI* hitTarget = a1->C_COLLI.IsHitKind(0xdu);

  0002d	6a 0d		 push	 13			; 0000000dH
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _a1$[ebp]
  00032	83 c1 30	 add	 ecx, 48			; 00000030H
  00035	e8 00 00 00 00	 call	 ?IsHitKind@C_COLLI@@QAEPAU1@E@Z ; C_COLLI::IsHitKind
  0003a	89 45 f8	 mov	 DWORD PTR _hitTarget$[ebp], eax

; 496  : 	if (!hitTarget)

  0003d	83 7d f8 00	 cmp	 DWORD PTR _hitTarget$[ebp], 0
  00041	0f 85 dd 00 00
	00		 jne	 $LN4@CheckPlaye

; 497  : 	{
; 498  : 		CCL_MASTER::ClearSearch();

  00047	e8 00 00 00 00	 call	 ?ClearSearch@CCL_MASTER@@SAXXZ ; CCL_MASTER::ClearSearch
$LN2@CheckPlaye:

; 499  : 		while (1)

  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	85 c0		 test	 eax, eax
  00053	0f 84 cb 00 00
	00		 je	 $LN4@CheckPlaye

; 500  : 		{
; 501  : 			//hitTarget = a1->C_COLLI.IsHitKind(0x14);
; 502  : 			hitTarget = a1->C_COLLI.IsHitPlayer();

  00059	8b 4d 08	 mov	 ecx, DWORD PTR _a1$[ebp]
  0005c	83 c1 30	 add	 ecx, 48			; 00000030H
  0005f	e8 00 00 00 00	 call	 ?IsHitPlayer@C_COLLI@@QAEPAU1@XZ ; C_COLLI::IsHitPlayer
  00064	89 45 f8	 mov	 DWORD PTR _hitTarget$[ebp], eax

; 503  : 			if (!hitTarget)

  00067	83 7d f8 00	 cmp	 DWORD PTR _hitTarget$[ebp], 0
  0006b	75 05		 jne	 SHORT $LN5@CheckPlaye

; 504  : 			{
; 505  : 				break;

  0006d	e9 b2 00 00 00	 jmp	 $LN4@CheckPlaye
$LN5@CheckPlaye:

; 506  : 			}
; 507  : 			int v1 = GetPlayerNumberFromCCLCharacterId(hitTarget->GetCharacterId());

  00072	8b 4d f8	 mov	 ecx, DWORD PTR _hitTarget$[ebp]
  00075	e8 00 00 00 00	 call	 ?GetCharacterId@C_COLLI@@QAEHXZ ; C_COLLI::GetCharacterId
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ?GetPlayerNumberFromCCLCharacterId@@YAHH@Z ; GetPlayerNumberFromCCLCharacterId
  00080	83 c4 04	 add	 esp, 4
  00083	89 45 ec	 mov	 DWORD PTR _v1$4[ebp], eax

; 508  : 			TObjPlayer* v6 = playerTOp[v1];

  00086	8b 45 ec	 mov	 eax, DWORD PTR _v1$4[ebp]
  00089	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?playerTOp@@3QAPAUTObjPlayer@@A ; playerTOp
  0008f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00092	89 55 e0	 mov	 DWORD PTR _v6$3[ebp], edx

; 509  : 			if (v6)

  00095	83 7d e0 00	 cmp	 DWORD PTR _v6$3[ebp], 0
  00099	0f 84 80 00 00
	00		 je	 $LN6@CheckPlaye

; 510  : 			{
; 511  : 				int v7 = v6->teamNo;

  0009f	8b 45 e0	 mov	 eax, DWORD PTR _v6$3[ebp]
  000a2	0f be 88 be 00
	00 00		 movsx	 ecx, BYTE PTR [eax+190]
  000a9	89 4d d4	 mov	 DWORD PTR _v7$2[ebp], ecx

; 512  : 				TObjTeam* v3 = teamTOp[v7];

  000ac	8b 45 d4	 mov	 eax, DWORD PTR _v7$2[ebp]
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  000b5	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000b8	89 55 c8	 mov	 DWORD PTR _v3$1[ebp], edx

; 513  : 				if (v3)

  000bb	83 7d c8 00	 cmp	 DWORD PTR _v3$1[ebp], 0
  000bf	74 5e		 je	 SHORT $LN6@CheckPlaye

; 514  : 				{
; 515  : 					if (v3->playerNo[v3->GetNowLeaderPlayerNo() % 3] == v1 || v3->playerNo[v3->GetLeaderPlayerNo() % 3] == v1)

  000c1	8b 4d c8	 mov	 ecx, DWORD PTR _v3$1[ebp]
  000c4	e8 00 00 00 00	 call	 ?GetNowLeaderPlayerNo@TObjTeam@@QAEDXZ ; TObjTeam::GetNowLeaderPlayerNo
  000c9	0f be c0	 movsx	 eax, al
  000cc	99		 cdq
  000cd	b9 03 00 00 00	 mov	 ecx, 3
  000d2	f7 f9		 idiv	 ecx
  000d4	8b 45 c8	 mov	 eax, DWORD PTR _v3$1[ebp]
  000d7	0f be 8c 10 10
	01 00 00	 movsx	 ecx, BYTE PTR [eax+edx+272]
  000df	3b 4d ec	 cmp	 ecx, DWORD PTR _v1$4[ebp]
  000e2	74 23		 je	 SHORT $LN9@CheckPlaye
  000e4	8b 4d c8	 mov	 ecx, DWORD PTR _v3$1[ebp]
  000e7	e8 00 00 00 00	 call	 ?GetLeaderPlayerNo@TObjTeam@@QAEDXZ ; TObjTeam::GetLeaderPlayerNo
  000ec	0f be c0	 movsx	 eax, al
  000ef	99		 cdq
  000f0	b9 03 00 00 00	 mov	 ecx, 3
  000f5	f7 f9		 idiv	 ecx
  000f7	8b 45 c8	 mov	 eax, DWORD PTR _v3$1[ebp]
  000fa	0f be 8c 10 10
	01 00 00	 movsx	 ecx, BYTE PTR [eax+edx+272]
  00102	3b 4d ec	 cmp	 ecx, DWORD PTR _v1$4[ebp]
  00105	75 18		 jne	 SHORT $LN6@CheckPlaye
$LN9@CheckPlaye:

; 516  : 					{
; 517  : 						if (v3->IsThisPostedPlayer(v1))

  00107	8b 45 ec	 mov	 eax, DWORD PTR _v1$4[ebp]
  0010a	50		 push	 eax
  0010b	8b 4d c8	 mov	 ecx, DWORD PTR _v3$1[ebp]
  0010e	e8 00 00 00 00	 call	 ?IsThisPostedPlayer@TObjTeam@@QAE_NH@Z ; TObjTeam::IsThisPostedPlayer
  00113	0f b6 c8	 movzx	 ecx, al
  00116	85 c9		 test	 ecx, ecx
  00118	74 05		 je	 SHORT $LN6@CheckPlaye

; 518  : 						{
; 519  : 							//this->currentPlayerNo = v7;
; 520  : 							return v7;

  0011a	8b 45 d4	 mov	 eax, DWORD PTR _v7$2[ebp]
  0011d	eb 07		 jmp	 SHORT $LN1@CheckPlaye
$LN6@CheckPlaye:

; 521  : 						}
; 522  : 					}
; 523  : 				}
; 524  : 			}
; 525  : 		}

  0011f	e9 28 ff ff ff	 jmp	 $LN2@CheckPlaye
$LN4@CheckPlaye:

; 526  : 	}
; 527  : 	return 0;

  00124	33 c0		 xor	 eax, eax
$LN1@CheckPlaye:

; 528  : }

  00126	5f		 pop	 edi
  00127	5e		 pop	 esi
  00128	5b		 pop	 ebx
  00129	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  0012f	3b ec		 cmp	 ebp, esp
  00131	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
?CheckPlayerHack@@YAHPAUTObjTrainCore@@@Z ENDP		; CheckPlayerHack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?WarpCameraAndPlayer_ASM@@YAXXZ
_TEXT	SEGMENT
?WarpCameraAndPlayer_ASM@@YAXXZ PROC			; WarpCameraAndPlayer_ASM, COMDAT

; 475  : 	__asm
; 476  : 	{
; 477  : 		push[ebp + 0xF8];

  00000	ff b5 f8 00 00
	00		 push	 DWORD PTR [ebp+248]

; 478  : 		push eax;

  00006	50		 push	 eax

; 479  : 		call TObjCamera::WarpCameraAndPlayer;

  00007	e8 00 00 00 00	 call	 ?WarpCameraAndPlayer@TObjCamera@@SAXPAURwV3d@@D@Z ; TObjCamera::WarpCameraAndPlayer

; 480  : 		add esp, 0x8;

  0000c	83 c4 08	 add	 esp, 8

; 481  : 		jmp [addyback];

  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?addyback@@3HA
?WarpCameraAndPlayer_ASM@@YAXXZ ENDP			; WarpCameraAndPlayer_ASM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?RingSubstanceCheckCollisionHook_ASM@@YAXXZ
_TEXT	SEGMENT
?RingSubstanceCheckCollisionHook_ASM@@YAXXZ PROC	; RingSubstanceCheckCollisionHook_ASM, COMDAT

; 455  : 	__asm
; 456  : 	{
; 457  : 		push eax;

  00000	50		 push	 eax

; 458  : 		push ecx;

  00001	51		 push	 ecx

; 459  : 	}
; 460  : 	if (*(int*)t->pTObjSetRing == 0x7525CC)

  00002	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t@@3PAUTObjRingSubstance@@A ; t
  00007	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  0000d	81 39 cc 25 75
	00		 cmp	 DWORD PTR [ecx], 7677388 ; 007525ccH
  00013	75 0c		 jne	 SHORT $LN2@RingSubsta

; 461  : 	{
; 462  : 		t->state__ = 5;

  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t@@3PAUTObjRingSubstance@@A ; t
  0001a	c6 80 c9 00 00
	00 05		 mov	 BYTE PTR [eax+201], 5
$LN2@RingSubsta:

; 463  : 	}
; 464  : 	__asm
; 465  : 	{
; 466  : 		pop ecx;

  00021	59		 pop	 ecx

; 467  : 		pop eax;

  00022	58		 pop	 eax

; 468  : 		jmp addybacktocheckcolli;

  00023	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?addybacktocheckcolli@@3HA
?RingSubstanceCheckCollisionHook_ASM@@YAXXZ ENDP	; RingSubstanceCheckCollisionHook_ASM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?ringsubstanceexechook_ASM@@YAXXZ
_TEXT	SEGMENT
?ringsubstanceexechook_ASM@@YAXXZ PROC			; ringsubstanceexechook_ASM, COMDAT

; 401  : 	__asm push eax;

  00000	50		 push	 eax
  00001	51		 push	 ecx
  00002	52		 push	 edx
  00003	89 35 00 00 00
	00		 mov	 DWORD PTR ?t@@3PAUTObjRingSubstance@@A, esi ; t
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t@@3PAUTObjRingSubstance@@A ; t
  0000e	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  00014	81 39 cc 25 75
	00		 cmp	 DWORD PTR [ecx], 7677388 ; 007525ccH
  0001a	74 6e		 je	 SHORT $LN2@ringsubsta

; 402  : 	__asm push ecx;
; 403  : 	__asm push edx;
; 404  : 	__asm mov[t], esi;
; 405  : 	if (*(int*)t->pTObjSetRing != 0x7525CC)//(t->pTObjSetRing->type_HHC != 4)//(t->field_CC)
; 406  : 	{
; 407  : 		// terribleFunc(); enable for logging, when releasing also remove import fstream at top
; 408  : 
; 409  : 		// null and common case
; 410  : 		//if (t->pTObjSetRing->field_54 == NULL || (int)(t->pTObjSetRing->field_54) <= 0xCFFF) {
; 411  : 		//	goto endOfRingCheck;
; 412  : 		//}
; 413  : 
; 414  : 		if (!((1 << (t->ringNo & 31)) & *(&t->pTObjSetRing->field_54->pStrage_HHC->gottenFlag + ((t->ringNo >> 5) & 3))))

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t@@3PAUTObjRingSubstance@@A ; t
  00021	0f be 88 ca 00
	00 00		 movsx	 ecx, BYTE PTR [eax+202]
  00028	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0002b	ba 01 00 00 00	 mov	 edx, 1
  00030	d3 e2		 shl	 edx, cl
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t@@3PAUTObjRingSubstance@@A ; t
  00037	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  0003d	8b 41 54	 mov	 eax, DWORD PTR [ecx+84]
  00040	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t@@3PAUTObjRingSubstance@@A ; t
  00048	0f be 80 ca 00
	00 00		 movsx	 eax, BYTE PTR [eax+202]
  0004f	c1 f8 05	 sar	 eax, 5
  00052	83 e0 03	 and	 eax, 3
  00055	23 14 81	 and	 edx, DWORD PTR [ecx+eax*4]
  00058	75 0e		 jne	 SHORT $LN4@ringsubsta
$heretest$8:

; 415  : 		{
; 416  : 				heretest:
; 417  : 			{
; 418  : 				__asm
; 419  : 				{
; 420  : 					pop edx;

  0005a	5a		 pop	 edx

; 421  : 					pop ecx;

  0005b	59		 pop	 ecx

; 422  : 					pop eax;

  0005c	58		 pop	 eax

; 423  : 					call[addy];

  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR ?addy@@3HA

; 424  : 					push eax;

  00063	50		 push	 eax

; 425  : 					push ecx;

  00064	51		 push	 ecx

; 426  : 					push edx;

  00065	52		 push	 edx

; 427  : 				}
; 428  : 			}
; 429  : 		}

  00066	eb 20		 jmp	 SHORT $LN5@ringsubsta
$LN4@ringsubsta:

; 430  : 		else
; 431  : 		{
; 432  : 			if (t->pTObjSetRing->numRings < 5)

  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t@@3PAUTObjRingSubstance@@A ; t
  0006d	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  00073	0f be 51 28	 movsx	 edx, BYTE PTR [ecx+40]
  00077	83 fa 05	 cmp	 edx, 5
  0007a	7d 0c		 jge	 SHORT $LN5@ringsubsta

; 433  : 			{
; 434  : 				t->state__ = 5;

  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t@@3PAUTObjRingSubstance@@A ; t
  00081	c6 80 c9 00 00
	00 05		 mov	 BYTE PTR [eax+201], 5
$LN5@ringsubsta:

; 435  : 			}
; 436  : 		}
; 437  : 	}

  00088	eb 02		 jmp	 SHORT $endOfRingCheck$9
$LN2@ringsubsta:

; 438  : 	else
; 439  : 	{
; 440  : 		goto heretest;

  0008a	eb ce		 jmp	 SHORT $heretest$8
$endOfRingCheck$9:

; 441  : 	}
; 442  : endOfRingCheck: ; //label marker, do nothing before pop and return
; 443  : 	__asm
; 444  : 	{
; 445  : 		pop edx;

  0008c	5a		 pop	 edx

; 446  : 		pop ecx;

  0008d	59		 pop	 ecx

; 447  : 		pop eax;

  0008e	58		 pop	 eax

; 448  : 		jmp [addy2];

  0008f	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?addy2@@3HA
?ringsubstanceexechook_ASM@@YAXXZ ENDP			; ringsubstanceexechook_ASM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?ringtest@@YAXXZ
_TEXT	SEGMENT
_addy$1 = -24						; size = 4
_t$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?ringtest@@YAXXZ PROC					; ringtest, COMDAT

; 376  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00012	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 377  : 	TObjRingSubstance* t;
; 378  : 	__asm mov [t], esi;

  00028	89 75 f4	 mov	 DWORD PTR _t$[ebp], esi
  0002b	8b 45 f4	 mov	 eax, DWORD PTR _t$[ebp]
  0002e	0f be 88 ca 00
	00 00		 movsx	 ecx, BYTE PTR [eax+202]
  00035	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00038	ba 01 00 00 00	 mov	 edx, 1
  0003d	d3 e2		 shl	 edx, cl
  0003f	8b 45 f4	 mov	 eax, DWORD PTR _t$[ebp]
  00042	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  00048	8b 41 54	 mov	 eax, DWORD PTR [ecx+84]
  0004b	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0004e	8b 45 f4	 mov	 eax, DWORD PTR _t$[ebp]
  00051	0f be 80 ca 00
	00 00		 movsx	 eax, BYTE PTR [eax+202]
  00058	c1 f8 05	 sar	 eax, 5
  0005b	83 e0 03	 and	 eax, 3
  0005e	23 14 81	 and	 edx, DWORD PTR [ecx+eax*4]
  00061	75 0a		 jne	 SHORT $LN1@ringtest

; 379  : 	if (!((1 << (t->ringNo & 31)) &*(&t->pTObjSetRing->field_54->pStrage_HHC->gottenFlag + ((t->ringNo >> 5) & 3))))
; 380  : 	{
; 381  : 		int addy = 0x4832F0;

  00063	c7 45 e8 f0 32
	48 00		 mov	 DWORD PTR _addy$1[ebp], 4731632 ; 004832f0H

; 382  : 		__asm jmp [addy];

  0006a	ff 65 e8	 jmp	 DWORD PTR _addy$1[ebp]
$LN1@ringtest:

; 383  : 	}
; 384  : }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	33 cd		 xor	 ecx, ebp
  00075	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007a	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00080	3b ec		 cmp	 ebp, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
?ringtest@@YAXXZ ENDP					; ringtest
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?BobCatchPlayer_Hook@@YAXXZ
_TEXT	SEGMENT
?BobCatchPlayer_Hook@@YAXXZ PROC			; BobCatchPlayer_Hook, COMDAT

; 357  : 	static int addytrue = 0x45EEF7;
; 358  : 	static int addyfalse = 0x45EF41;
; 359  : 	__asm
; 360  : 	{
; 361  : 		mov ecx, [esi + 0x198];

  00000	8b 8e 98 01 00
	00		 mov	 ecx, DWORD PTR [esi+408]

; 362  : 		cmp eax, ecx;

  00006	3b c1		 cmp	 eax, ecx

; 363  : 		jne itsfalse;

  00008	75 02		 jne	 SHORT $itsfalse$3

; 364  : 		jmp itstrue;

  0000a	eb 06		 jmp	 SHORT $itstrue$4
$itsfalse$3:

; 365  : 
; 366  : 	itsfalse:
; 367  : 		jmp addyfalse;

  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?addyfalse@?1??BobCatchPlayer_Hook@@YAXXZ@4HA
$itstrue$4:

; 368  : 
; 369  : 	itstrue:
; 370  : 		cmp eax, 3;

  00012	83 f8 03	 cmp	 eax, 3

; 371  : 		jmp addytrue;

  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?addytrue@?1??BobCatchPlayer_Hook@@YAXXZ@4HA
?BobCatchPlayer_Hook@@YAXXZ ENDP			; BobCatchPlayer_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?SetBobsleigh_Hook2@@YAXHPADPAX1@Z
_TEXT	SEGMENT
_bobsleighID_HHC$ = 8					; size = 4
_BobsleighParam$ = 12					; size = 4
_a6$ = 16						; size = 4
_a7$ = 20						; size = 4
?SetBobsleigh_Hook2@@YAXHPADPAX1@Z PROC			; SetBobsleigh_Hook2, COMDAT

; 347  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 348  : 	*(float*)(BobsleighParam + 0x1C) = 0;

  00028	8b 45 0c	 mov	 eax, DWORD PTR _BobsleighParam$[ebp]
  0002b	0f 57 c0	 xorps	 xmm0, xmm0
  0002e	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 349  : 	myCodeSetBobsleigh2(bobsleighID_HHC, BobsleighParam, a6, a7);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 14	 mov	 eax, DWORD PTR _a7$[ebp]
  00038	50		 push	 eax
  00039	8b 4d 10	 mov	 ecx, DWORD PTR _a6$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 55 0c	 mov	 edx, DWORD PTR _BobsleighParam$[ebp]
  00040	52		 push	 edx
  00041	8b 45 08	 mov	 eax, DWORD PTR _bobsleighID_HHC$[ebp]
  00044	50		 push	 eax
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR ?myCodeSetBobsleigh2@@3P6AXHPADPAX1@ZA ; myCodeSetBobsleigh2
  0004b	83 c4 10	 add	 esp, 16			; 00000010H
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 350  : 	*(int*)(BobsleighParam + 0x38) = 1;

  00055	8b 45 0c	 mov	 eax, DWORD PTR _BobsleighParam$[ebp]
  00058	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 351  : 	*(float*)(BobsleighParam + 0x1C) = 0.5;

  0005f	8b 45 0c	 mov	 eax, DWORD PTR _BobsleighParam$[ebp]
  00062	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0006a	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 352  : 	bobsleighID_HHC = 4;

  0006f	c7 45 08 04 00
	00 00		 mov	 DWORD PTR _bobsleighID_HHC$[ebp], 4

; 353  : 	myCodeSetBobsleigh2(bobsleighID_HHC, BobsleighParam, a6, a7);

  00076	8b f4		 mov	 esi, esp
  00078	8b 45 14	 mov	 eax, DWORD PTR _a7$[ebp]
  0007b	50		 push	 eax
  0007c	8b 4d 10	 mov	 ecx, DWORD PTR _a6$[ebp]
  0007f	51		 push	 ecx
  00080	8b 55 0c	 mov	 edx, DWORD PTR _BobsleighParam$[ebp]
  00083	52		 push	 edx
  00084	8b 45 08	 mov	 eax, DWORD PTR _bobsleighID_HHC$[ebp]
  00087	50		 push	 eax
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR ?myCodeSetBobsleigh2@@3P6AXHPADPAX1@ZA ; myCodeSetBobsleigh2
  0008e	83 c4 10	 add	 esp, 16			; 00000010H
  00091	3b f4		 cmp	 esi, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 354  : }

  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
?SetBobsleigh_Hook2@@YAXHPADPAX1@Z ENDP			; SetBobsleigh_Hook2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?SetBobsleigh_Hook@@YAXHPAD@Z
_TEXT	SEGMENT
_bobsleighID_HHC$ = 8					; size = 4
_BobsleighParam$ = 12					; size = 4
?SetBobsleigh_Hook@@YAXHPAD@Z PROC			; SetBobsleigh_Hook, COMDAT

; 338  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 339  : 	*(float*)(BobsleighParam + 0x1C) = 0;

  00028	8b 45 0c	 mov	 eax, DWORD PTR _BobsleighParam$[ebp]
  0002b	0f 57 c0	 xorps	 xmm0, xmm0
  0002e	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 340  : 	myCodeSetBobsleigh(bobsleighID_HHC, BobsleighParam);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR _BobsleighParam$[ebp]
  00038	50		 push	 eax
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _bobsleighID_HHC$[ebp]
  0003c	51		 push	 ecx
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR ?myCodeSetBobsleigh@@3P6AXHPAD@ZA ; myCodeSetBobsleigh
  00043	83 c4 08	 add	 esp, 8
  00046	3b f4		 cmp	 esi, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 341  : 	*(int*)(BobsleighParam + 0x38) = 1;

  0004d	8b 45 0c	 mov	 eax, DWORD PTR _BobsleighParam$[ebp]
  00050	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 342  : 	*(float*)(BobsleighParam + 0x1C) = 1;

  00057	8b 45 0c	 mov	 eax, DWORD PTR _BobsleighParam$[ebp]
  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00062	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 343  : 	bobsleighID_HHC = 4;

  00067	c7 45 08 04 00
	00 00		 mov	 DWORD PTR _bobsleighID_HHC$[ebp], 4

; 344  : 	myCodeSetBobsleigh(bobsleighID_HHC, BobsleighParam);

  0006e	8b f4		 mov	 esi, esp
  00070	8b 45 0c	 mov	 eax, DWORD PTR _BobsleighParam$[ebp]
  00073	50		 push	 eax
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _bobsleighID_HHC$[ebp]
  00077	51		 push	 ecx
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR ?myCodeSetBobsleigh@@3P6AXHPAD@ZA ; myCodeSetBobsleigh
  0007e	83 c4 08	 add	 esp, 8
  00081	3b f4		 cmp	 esi, esp
  00083	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 345  : }

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00091	3b ec		 cmp	 ebp, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
?SetBobsleigh_Hook@@YAXHPAD@Z ENDP			; SetBobsleigh_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?dirtygotogamechallengepatch@@YAXXZ
_TEXT	SEGMENT
?dirtygotogamechallengepatch@@YAXXZ PROC		; dirtygotogamechallengepatch, COMDAT

; 331  : 	__asm
; 332  : 	{
; 333  : 		mov layoutTeamKind, eax

  00000	a3 00 00 00 00	 mov	 DWORD PTR ?layoutTeamKind@@3HA, eax ; layoutTeamKind

; 334  : 		jmp address2;

  00005	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?address2@@3HA ; address2
?dirtygotogamechallengepatch@@YAXXZ ENDP		; dirtygotogamechallengepatch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?superdirtybinpatch@@YAXXZ
_TEXT	SEGMENT
?superdirtybinpatch@@YAXXZ PROC				; superdirtybinpatch, COMDAT

; 321  : 	__asm
; 322  : 	{
; 323  : 		mov eax, layoutTeamKind;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?layoutTeamKind@@3HA ; layoutTeamKind

; 324  : 		cmp eax, 4;

  00005	83 f8 04	 cmp	 eax, 4

; 325  : 		jmp address;

  00008	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?address@@3HA	; address
?superdirtybinpatch@@YAXXZ ENDP				; superdirtybinpatch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?ADV_2P_ExecSelect2@@YAXXZ
_TEXT	SEGMENT
?ADV_2P_ExecSelect2@@YAXXZ PROC				; ADV_2P_ExecSelect2, COMDAT

; 310  : 	__asm
; 311  : 	{
; 312  : 		push eax;

  00000	50		 push	 eax

; 313  : 		call ADV_2P_ExecSelect2_Tramp;

  00001	e8 00 00 00 00	 call	 ?ADV_2P_ExecSelect2_Tramp@@YAXPAUADV_2P@@@Z ; ADV_2P_ExecSelect2_Tramp

; 314  : 		add esp, 0x4;

  00006	83 c4 04	 add	 esp, 4

; 315  : 		ret;

  00009	c3		 ret	 0
?ADV_2P_ExecSelect2@@YAXXZ ENDP				; ADV_2P_ExecSelect2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?ADV_2P_ExecSelect2_Tramp@@YAXPAUADV_2P@@@Z
_TEXT	SEGMENT
_a1$ = 8						; size = 4
?ADV_2P_ExecSelect2_Tramp@@YAXPAUADV_2P@@@Z PROC	; ADV_2P_ExecSelect2_Tramp, COMDAT

; 299  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 300  : 	__asm
; 301  : 	{
; 302  : 		mov eax, a1;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]

; 303  : 		call myCode3;

  00021	ff 15 00 00 00
	00		 call	 DWORD PTR ?myCode3@@3P6AXPAX@ZA ; myCode3

; 304  : 	}
; 305  : 	team1 = a1->p1Team;

  00027	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0002a	8a 88 34 02 00
	00		 mov	 cl, BYTE PTR [eax+564]
  00030	88 0d 00 00 00
	00		 mov	 BYTE PTR ?team1@@3DA, cl ; team1

; 306  : 	team2 = a1->p2Team;

  00036	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  00039	8a 88 38 02 00
	00		 mov	 cl, BYTE PTR [eax+568]
  0003f	88 0d 00 00 00
	00		 mov	 BYTE PTR ?team2@@3DA, cl ; team2

; 307  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?ADV_2P_ExecSelect2_Tramp@@YAXPAUADV_2P@@@Z ENDP	; ADV_2P_ExecSelect2_Tramp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?ADV_2P_Create_Tramp@@YAXPAUTObject@@@Z
_TEXT	SEGMENT
_a1$ = 8						; size = 4
?ADV_2P_Create_Tramp@@YAXPAUTObject@@@Z PROC		; ADV_2P_Create_Tramp, COMDAT

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 288  : 	
; 289  : 	//ADV_2P_Create();
; 290  : 	//__asm call myCode;
; 291  : 	myCode2(a1);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0002d	50		 push	 eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR ?myCode2@@3P6AXPAX@ZA ; myCode2
  00034	83 c4 04	 add	 esp, 4
  00037	3b f4		 cmp	 esi, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 292  : 	//((ADVERTISE_CONTROL*)((char*)(*Advertise.folder_HHC) + 0x18))->lastSubMode = 6;
; 293  : 	((ADVERTISE_CONTROL*)(a1->Child))->lastSubMode = 6;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  00041	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00044	c7 41 44 06 00
	00 00		 mov	 DWORD PTR [ecx+68], 6

; 294  : 	((ADVERTISE_CONTROL*)(a1->Child))->animCount = 14;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0004e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00051	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41600000
  00059	f3 0f 11 41 34	 movss	 DWORD PTR [ecx+52], xmm0

; 295  : 	*(float*)0x7C933C = 13;

  0005e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41500000
  00066	f3 0f 11 05 3c
	93 7c 00	 movss	 DWORD PTR ds:8164156, xmm0

; 296  : 	//Advertise.lastSubMode = 6;
; 297  : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?ADV_2P_Create_Tramp@@YAXPAUTObject@@@Z ENDP		; ADV_2P_Create_Tramp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?ADV_2P_Create@@YAXXZ
_TEXT	SEGMENT
?ADV_2P_Create@@YAXXZ PROC				; ADV_2P_Create, COMDAT

; 281  : 	__asm
; 282  : 	{
; 283  : 		call myCode2;

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR ?myCode2@@3P6AXPAX@ZA ; myCode2
?ADV_2P_Create@@YAXXZ ENDP				; ADV_2P_Create
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?CreateTrampoline@@YAPAXPAX0D@Z
_TEXT	SEGMENT
_data$1 = -73						; size = 1
_i$2 = -61						; size = 1
_nopAddress$3 = -52					; size = 4
_myCode$ = -40						; size = 4
_nopCount$ = -25					; size = 1
_Hooker$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_address$ = 8						; size = 4
_trampoline$ = 12					; size = 4
_overwriteSize$ = 16					; size = 1
?CreateTrampoline@@YAPAXPAX0D@Z PROC			; CreateTrampoline, COMDAT

; 253  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-272]
  00012	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 254  : 	Hook Hooker;
; 255  : 	char nopCount = overwriteSize - 0x5;

  00032	0f be 45 10	 movsx	 eax, BYTE PTR _overwriteSize$[ebp]
  00036	83 e8 05	 sub	 eax, 5
  00039	88 45 e7	 mov	 BYTE PTR _nopCount$[ebp], al

; 256  : 
; 257  : 	void* myCode = VirtualAlloc(nullptr, overwriteSize + 0x5, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);

  0003c	8b f4		 mov	 esi, esp
  0003e	6a 40		 push	 64			; 00000040H
  00040	68 00 30 00 00	 push	 12288			; 00003000H
  00045	0f be 45 10	 movsx	 eax, BYTE PTR _overwriteSize$[ebp]
  00049	83 c0 05	 add	 eax, 5
  0004c	50		 push	 eax
  0004d	6a 00		 push	 0
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualAlloc@16
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	89 45 d8	 mov	 DWORD PTR _myCode$[ebp], eax

; 258  : 	memcpy(myCode, address, overwriteSize);

  0005f	0f be 45 10	 movsx	 eax, BYTE PTR _overwriteSize$[ebp]
  00063	50		 push	 eax
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _address$[ebp]
  00067	51		 push	 ecx
  00068	8b 55 d8	 mov	 edx, DWORD PTR _myCode$[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 _memcpy
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH

; 259  : 	if (nopCount)

  00074	0f be 45 e7	 movsx	 eax, BYTE PTR _nopCount$[ebp]
  00078	85 c0		 test	 eax, eax
  0007a	74 46		 je	 SHORT $LN5@CreateTram

; 260  : 	{
; 261  : 		void* nopAddress = (void*)((char*)address + (overwriteSize - nopCount));

  0007c	0f be 45 10	 movsx	 eax, BYTE PTR _overwriteSize$[ebp]
  00080	0f be 4d e7	 movsx	 ecx, BYTE PTR _nopCount$[ebp]
  00084	2b c1		 sub	 eax, ecx
  00086	03 45 08	 add	 eax, DWORD PTR _address$[ebp]
  00089	89 45 cc	 mov	 DWORD PTR _nopAddress$3[ebp], eax

; 262  : 		for (char i = 0; i < nopCount; ++i)

  0008c	c6 45 c3 00	 mov	 BYTE PTR _i$2[ebp], 0
  00090	eb 08		 jmp	 SHORT $LN4@CreateTram
$LN2@CreateTram:
  00092	8a 45 c3	 mov	 al, BYTE PTR _i$2[ebp]
  00095	04 01		 add	 al, 1
  00097	88 45 c3	 mov	 BYTE PTR _i$2[ebp], al
$LN4@CreateTram:
  0009a	0f be 45 c3	 movsx	 eax, BYTE PTR _i$2[ebp]
  0009e	0f be 4d e7	 movsx	 ecx, BYTE PTR _nopCount$[ebp]
  000a2	3b c1		 cmp	 eax, ecx
  000a4	7d 1c		 jge	 SHORT $LN5@CreateTram

; 263  : 		{
; 264  : 			{
; 265  : 				char data[] = { 0x90 };

  000a6	c6 45 b7 90	 mov	 BYTE PTR _data$1[ebp], -112 ; ffffff90H

; 266  : 				Hooker.WritePatch((void*)((char*)nopAddress + i), data, 1);

  000aa	6a 01		 push	 1
  000ac	8d 45 b7	 lea	 eax, DWORD PTR _data$1[ebp]
  000af	50		 push	 eax
  000b0	0f be 4d c3	 movsx	 ecx, BYTE PTR _i$2[ebp]
  000b4	03 4d cc	 add	 ecx, DWORD PTR _nopAddress$3[ebp]
  000b7	51		 push	 ecx
  000b8	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  000bb	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 267  : 			}
; 268  : 		}

  000c0	eb d0		 jmp	 SHORT $LN2@CreateTram
$LN5@CreateTram:

; 269  : 	}
; 270  : 	Hooker.WriteJMP(address, trampoline);

  000c2	8b 45 0c	 mov	 eax, DWORD PTR _trampoline$[ebp]
  000c5	50		 push	 eax
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _address$[ebp]
  000c9	51		 push	 ecx
  000ca	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  000cd	e8 00 00 00 00	 call	 ?WriteJMP@Hook@@QAE_NPAX0@Z ; Hook::WriteJMP

; 271  : 	Hooker.WriteJMP((void*)((char*)myCode + overwriteSize), (void*)((char*)address + overwriteSize));

  000d2	0f be 45 10	 movsx	 eax, BYTE PTR _overwriteSize$[ebp]
  000d6	03 45 08	 add	 eax, DWORD PTR _address$[ebp]
  000d9	50		 push	 eax
  000da	0f be 4d 10	 movsx	 ecx, BYTE PTR _overwriteSize$[ebp]
  000de	03 4d d8	 add	 ecx, DWORD PTR _myCode$[ebp]
  000e1	51		 push	 ecx
  000e2	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  000e5	e8 00 00 00 00	 call	 ?WriteJMP@Hook@@QAE_NPAX0@Z ; Hook::WriteJMP

; 272  : 	return myCode;

  000ea	8b 45 d8	 mov	 eax, DWORD PTR _myCode$[ebp]

; 273  : }

  000ed	52		 push	 edx
  000ee	8b cd		 mov	 ecx, ebp
  000f0	50		 push	 eax
  000f1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@CreateTram
  000f7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000fc	58		 pop	 eax
  000fd	5a		 pop	 edx
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00104	33 cd		 xor	 ecx, ebp
  00106	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010b	81 c4 10 01 00
	00		 add	 esp, 272		; 00000110H
  00111	3b ec		 cmp	 ebp, esp
  00113	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c3		 ret	 0
$LN10@CreateTram:
  0011c	02 00 00 00	 DD	 2
  00120	00 00 00 00	 DD	 $LN9@CreateTram
$LN9@CreateTram:
  00124	f0 ff ff ff	 DD	 -16			; fffffff0H
  00128	08 00 00 00	 DD	 8
  0012c	00 00 00 00	 DD	 $LN7@CreateTram
  00130	b7 ff ff ff	 DD	 -73			; ffffffb7H
  00134	01 00 00 00	 DD	 1
  00138	00 00 00 00	 DD	 $LN8@CreateTram
$LN8@CreateTram:
  0013c	64		 DB	 100			; 00000064H
  0013d	61		 DB	 97			; 00000061H
  0013e	74		 DB	 116			; 00000074H
  0013f	61		 DB	 97			; 00000061H
  00140	00		 DB	 0
$LN7@CreateTram:
  00141	48		 DB	 72			; 00000048H
  00142	6f		 DB	 111			; 0000006fH
  00143	6f		 DB	 111			; 0000006fH
  00144	6b		 DB	 107			; 0000006bH
  00145	65		 DB	 101			; 00000065H
  00146	72		 DB	 114			; 00000072H
  00147	00		 DB	 0
?CreateTrampoline@@YAPAXPAX0D@Z ENDP			; CreateTrampoline
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?IncChaotixClearItem_ASM@@YAXXZ
_TEXT	SEGMENT
?IncChaotixClearItem_ASM@@YAXXZ PROC			; IncChaotixClearItem_ASM, COMDAT

; 243  : 	__asm
; 244  : 	{
; 245  : 		push eax;

  00000	50		 push	 eax

; 246  : 		call IncChaotixClearItem;

  00001	e8 00 00 00 00	 call	 ?IncChaotixClearItem@@YAHPAUTObjTeam@@@Z ; IncChaotixClearItem

; 247  : 		add esp, 0x4;

  00006	83 c4 04	 add	 esp, 4

; 248  : 		ret

  00009	c3		 ret	 0
?IncChaotixClearItem_ASM@@YAXXZ ENDP			; IncChaotixClearItem_ASM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?SearchStartStageLocator_ASM@@YAXXZ
_TEXT	SEGMENT
?SearchStartStageLocator_ASM@@YAXXZ PROC		; SearchStartStageLocator_ASM, COMDAT

; 232  : 	__asm 
; 233  : 	{
; 234  : 		push eax;

  00000	50		 push	 eax

; 235  : 		call SearchStartStageLocator_Hook;

  00001	e8 00 00 00 00	 call	 ?SearchStartStageLocator_Hook@@YAPADH@Z ; SearchStartStageLocator_Hook

; 236  : 		add esp, 0x4;

  00006	83 c4 04	 add	 esp, 4

; 237  : 		ret

  00009	c3		 ret	 0
?SearchStartStageLocator_ASM@@YAXXZ ENDP		; SearchStartStageLocator_ASM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?IncChaotixClearItem@@YAHPAUTObjTeam@@@Z
_TEXT	SEGMENT
tv76 = -208						; size = 4
_t$ = 8							; size = 4
?IncChaotixClearItem@@YAHPAUTObjTeam@@@Z PROC		; IncChaotixClearItem, COMDAT

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 221  : 	int v1;
; 222  : 
; 223  : 	*(char*)0x9DD6F2 = *(char*)0x9DD70A;

  00028	a0 0a d7 9d 00	 mov	 al, BYTE PTR ds:10344202
  0002d	a2 f2 d6 9d 00	 mov	 BYTE PTR ds:10344178, al

; 224  : 	*(char*)0x9DD6F1 = *(char*)0x9DD709; //for now am lazy

  00032	a0 09 d7 9d 00	 mov	 al, BYTE PTR ds:10344201
  00037	a2 f1 d6 9d 00	 mov	 BYTE PTR ds:10344177, al

; 225  : 	*(char*)0x9DD6F0 = *(char*)0x9DD708;

  0003c	a0 08 d7 9d 00	 mov	 al, BYTE PTR ds:10344200
  00041	a2 f0 d6 9d 00	 mov	 BYTE PTR ds:10344176, al

; 226  : 
; 227  : 	return ++teamTOp[0]->chaotixClearItem;

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	6b c8 00	 imul	 ecx, eax, 0
  0004e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  00054	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00057	8b 88 3c 02 00
	00		 mov	 ecx, DWORD PTR [eax+572]
  0005d	83 c1 01	 add	 ecx, 1
  00060	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv76[ebp], ecx
  00066	ba 04 00 00 00	 mov	 edx, 4
  0006b	6b c2 00	 imul	 eax, edx, 0
  0006e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  00074	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00077	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv76[ebp]
  0007d	89 82 3c 02 00
	00		 mov	 DWORD PTR [edx+572], eax
  00083	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv76[ebp]

; 228  : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00092	3b ec		 cmp	 ebp, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
?IncChaotixClearItem@@YAHPAUTObjTeam@@@Z ENDP		; IncChaotixClearItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?SearchStartStageLocator_Hook@@YAPADH@Z
_TEXT	SEGMENT
_v4$ = -32						; size = 4
_result$ = -20						; size = 4
_stageNoIndex_HHC$ = -8					; size = 4
_teamKind$ = 8						; size = 4
?SearchStartStageLocator_Hook@@YAPADH@Z PROC		; SearchStartStageLocator_Hook, COMDAT

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00012	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 158  : 	unsigned int stageNoIndex_HHC; // ecx
; 159  : 	char* result; // eax
; 160  : 	unsigned int v4; // eax
; 161  : 	int playerNoIndex_HHC; // edx
; 162  : 	TObjTeam* v6; // eax
; 163  : 	int* v7; // eax
; 164  : 	
; 165  : 	stageNoIndex_HHC = 0;

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _stageNoIndex_HHC$[ebp], 0

; 166  : 	if (pModeSwitch->demoMode && *(int*)&DemoLocator[0x1C * teamKind + 0x18])

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pModeSwitch@@3AAPAUMODESWITCH@@A ; pModeSwitch
  00034	8b 08		 mov	 ecx, DWORD PTR [eax]
  00036	0f be 51 18	 movsx	 edx, BYTE PTR [ecx+24]
  0003a	85 d2		 test	 edx, edx
  0003c	74 23		 je	 SHORT $LN4@SearchStar
  0003e	6b 45 08 1c	 imul	 eax, DWORD PTR _teamKind$[ebp], 28
  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?DemoLocator@@3AAPADA ; DemoLocator
  00048	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004a	83 7c 02 18 00	 cmp	 DWORD PTR [edx+eax+24], 0
  0004f	74 10		 je	 SHORT $LN4@SearchStar

; 167  : 	{
; 168  : 		return &DemoLocator[0x1C * teamKind];

  00051	6b 45 08 1c	 imul	 eax, DWORD PTR _teamKind$[ebp], 28
  00055	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?DemoLocator@@3AAPADA ; DemoLocator
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	03 c2		 add	 eax, edx
  0005f	eb 5c		 jmp	 SHORT $LN1@SearchStar
$LN4@SearchStar:

; 169  : 	}
; 170  : 	/*if (pModeSwitch->is2PMode)
; 171  : 	{
; 172  : 		playerNoIndex_HHC = 0;
; 173  : 		while (1)
; 174  : 		{
; 175  : 			v6 = teamTOp[playerNoIndex_HHC];
; 176  : 			if (v6)
; 177  : 			{
; 178  : 				if (v6->teamKind == teamKind && stageNoIndex_HHC < 0x17)
; 179  : 				{
; 180  : 					break;
; 181  : 				}
; 182  : 			}
; 183  : 		LABEL_17:
; 184  : 			if (++playerNoIndex_HHC >= 4)
; 185  : 			{
; 186  : 				return 0;
; 187  : 			}
; 188  : 		}
; 189  : 		v7 = &gStartStageLocator2p[0xF * stageNoIndex_HHC];
; 190  : 		while (*v7 != Action.stageNo)
; 191  : 		{
; 192  : 			++stageNoIndex_HHC;
; 193  : 			v7 += 0xF;
; 194  : 			if (stageNoIndex_HHC >= 0x17)
; 195  : 			{
; 196  : 				goto LABEL_17;
; 197  : 			}
; 198  : 		}
; 199  : 		result = (char*)&gStartStageLocator2p[0xF * stageNoIndex_HHC + 1 + 7 * playerNoIndex_HHC];
; 200  : 	}*/
; 201  : 	//else
; 202  : 	{
; 203  : 		v4 = 0;

  00061	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _v4$[ebp], 0
$LN2@SearchStar:

; 204  : 		while (gStartStageLocator[v4] != Action.stageNo)

  00068	8b 45 e0	 mov	 eax, DWORD PTR _v4$[ebp]
  0006b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gStartStageLocator@@3PAHA ; gStartStageLocator
  00071	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?Action@@3AAUACTION@@A ; Action
  00077	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  0007a	3b 42 28	 cmp	 eax, DWORD PTR [edx+40]
  0007d	74 21		 je	 SHORT $LN3@SearchStar

; 205  : 		{
; 206  : 			v4 += 0x24;

  0007f	8b 45 e0	 mov	 eax, DWORD PTR _v4$[ebp]
  00082	83 c0 24	 add	 eax, 36			; 00000024H
  00085	89 45 e0	 mov	 DWORD PTR _v4$[ebp], eax

; 207  : 			++stageNoIndex_HHC;

  00088	8b 45 f8	 mov	 eax, DWORD PTR _stageNoIndex_HHC$[ebp]
  0008b	83 c0 01	 add	 eax, 1
  0008e	89 45 f8	 mov	 DWORD PTR _stageNoIndex_HHC$[ebp], eax

; 208  : 			if (v4 >= 0x57C)

  00091	81 7d e0 7c 05
	00 00		 cmp	 DWORD PTR _v4$[ebp], 1404 ; 0000057cH
  00098	72 04		 jb	 SHORT $LN5@SearchStar

; 209  : 			{
; 210  : 				return 0;

  0009a	33 c0		 xor	 eax, eax
  0009c	eb 1f		 jmp	 SHORT $LN1@SearchStar
$LN5@SearchStar:

; 211  : 
; 212  : 			}
; 213  : 		}

  0009e	eb c8		 jmp	 SHORT $LN2@SearchStar
$LN3@SearchStar:

; 214  : 		result = (char*)&gStartStageLocator[0x24 * stageNoIndex_HHC + 1 + 7 * layoutTeamKind];

  000a0	6b 45 f8 24	 imul	 eax, DWORD PTR _stageNoIndex_HHC$[ebp], 36
  000a4	6b 0d 00 00 00
	00 07		 imul	 ecx, DWORD PTR ?layoutTeamKind@@3HA, 7 ; layoutTeamKind
  000ab	8d 54 08 01	 lea	 edx, DWORD PTR [eax+ecx+1]
  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gStartStageLocator@@3PAHA ; gStartStageLocator
  000b4	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  000b7	89 4d ec	 mov	 DWORD PTR _result$[ebp], ecx

; 215  : 	}
; 216  : 	return result;

  000ba	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
$LN1@SearchStar:

; 217  : }

  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  000c6	3b ec		 cmp	 ebp, esp
  000c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c3		 ret	 0
?SearchStartStageLocator_Hook@@YAPADH@Z ENDP		; SearchStartStageLocator_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT _DllMain@12
_TEXT	SEGMENT
tv64 = -196						; size = 4
_hModule$ = 8						; size = 4
_ul_reason_for_call$ = 12				; size = 4
_lpReserved$ = 16					; size = 4
_DllMain@12 PROC					; COMDAT

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 127  : 	switch (ul_reason_for_call)

  00028	8b 45 0c	 mov	 eax, DWORD PTR _ul_reason_for_call$[ebp]
  0002b	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv64[ebp], eax

; 128  : 	{
; 129  : 		case DLL_PROCESS_ATTACH:
; 130  : 		{
; 131  : 			//Init();
; 132  : 			break;
; 133  : 		}
; 134  : 		case DLL_THREAD_ATTACH:
; 135  : 		{
; 136  : 			break;
; 137  : 		}
; 138  : 		case DLL_THREAD_DETACH:
; 139  : 		{
; 140  : 			break;
; 141  : 		}
; 142  : 		case DLL_PROCESS_DETACH:
; 143  : 		{
; 144  : 			break;
; 145  : 		}
; 146  : 	}
; 147  : 	return TRUE;

  00031	b8 01 00 00 00	 mov	 eax, 1

; 148  : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
_DllMain@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT _Init
_TEXT	SEGMENT
_data$1 = -308						; size = 4
_data$2 = -296						; size = 7
_data$3 = -280						; size = 7
_data$4 = -264						; size = 6
_data$5 = -248						; size = 4
_data$6 = -233						; size = 1
_data$7 = -221						; size = 1
_data$8 = -209						; size = 1
_data$9 = -200						; size = 4
_vtable$10 = -188					; size = 4
_oldProt$11 = -176					; size = 4
_data$12 = -164						; size = 3
_data$13 = -152						; size = 7
_data$14 = -136						; size = 2
_data$15 = -124						; size = 2
_data$16 = -112						; size = 3
_data$17 = -97						; size = 1
_data$18 = -85						; size = 1
_data$19 = -73						; size = 1
_data$20 = -61						; size = 1
_data$21 = -49						; size = 1
_data$22 = -37						; size = 1
_data$23 = -28						; size = 2
_Hooker$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_Init	PROC						; COMDAT

; 727  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f8 01 00
	00		 sub	 esp, 504		; 000001f8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 08 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-504]
  00012	b9 7e 00 00 00	 mov	 ecx, 126		; 0000007eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 728  : 	Hook Hooker;
; 729  : 
; 730  : 	Hooker.Replace(0x5865E0, MakePlayersKeyData);

  00032	6a 00		 push	 0
  00034	68 00 00 00 00	 push	 OFFSET ?MakePlayersKeyData@@YAXXZ ; MakePlayersKeyData
  00039	68 e0 65 58 00	 push	 5793248			; 005865e0H
  0003e	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00041	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 731  : 	Hooker.Replace(0x435550, MakeGameKeyData);

  00046	6a 00		 push	 0
  00048	68 00 00 00 00	 push	 OFFSET ?MakeGameKeyData@@YAPAFXZ ; MakeGameKeyData
  0004d	68 50 55 43 00	 push	 4412752			; 00435550H
  00052	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00055	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 732  : 	Hooker.Replace(0x427510, MAIN::InitModules);

  0005a	6a 00		 push	 0
  0005c	68 00 00 00 00	 push	 OFFSET ?InitModules@MAIN@@SAHXZ ; MAIN::InitModules
  00061	68 10 75 42 00	 push	 4355344			; 00427510H
  00066	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00069	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 733  : 	Hooker.Replace(0x444D20, PCSpecific::SetupDInput);

  0006e	6a 00		 push	 0
  00070	68 00 00 00 00	 push	 OFFSET ?SetupDInput@PCSpecific@@YAJXZ ; PCSpecific::SetupDInput
  00075	68 20 4d 44 00	 push	 4476192			; 00444d20H
  0007a	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  0007d	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 734  : 	Hooker.Replace(0x5C9C10, ChangeModeFormationFly_Hook);

  00082	6a 00		 push	 0
  00084	68 00 00 00 00	 push	 OFFSET ?ChangeModeFormationFly_Hook@@YAXXZ ; ChangeModeFormationFly_Hook
  00089	68 10 9c 5c 00	 push	 6069264			; 005c9c10H
  0008e	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00091	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 735  : 	Hooker.Replace(0x463A60, SetArrowPosition_hook);

  00096	6a 00		 push	 0
  00098	68 00 00 00 00	 push	 OFFSET ?SetArrowPosition_hook@@YAXPAUTObjBobsleigh@@@Z ; SetArrowPosition_hook
  0009d	68 60 3a 46 00	 push	 4602464			; 00463a60H
  000a2	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  000a5	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 736  : 	Hooker.Replace(0x4198D0, CLASS_DVDREAD::Start);

  000aa	6a 00		 push	 0
  000ac	68 00 00 00 00	 push	 OFFSET ?Start@CLASS_DVDREAD@@YGPAHPAH@Z ; CLASS_DVDREAD::Start
  000b1	68 d0 98 41 00	 push	 4298960			; 004198d0H
  000b6	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  000b9	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 737  : 	Hooker.Replace(0x465BB0, initObjS31Bob);

  000be	6a 00		 push	 0
  000c0	68 00 00 00 00	 push	 OFFSET ?initObjS31Bob@@YAXXZ ; initObjS31Bob
  000c5	68 b0 5b 46 00	 push	 4610992			; 00465bb0H
  000ca	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  000cd	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 738  : 	Hooker.Replace(0x5B3917, arrowdisptest_hook);

  000d2	6a 00		 push	 0
  000d4	68 00 00 00 00	 push	 OFFSET ?arrowdisptest_hook@@YAXXZ ; arrowdisptest_hook
  000d9	68 17 39 5b 00	 push	 5978391			; 005b3917H
  000de	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  000e1	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 739  : 	Hooker.Replace(0x404DB0, addFrame_Hook);

  000e6	6a 00		 push	 0
  000e8	68 00 00 00 00	 push	 OFFSET ?addFrame_Hook@@YAXHPAUACTION@@@Z ; addFrame_Hook
  000ed	68 b0 4d 40 00	 push	 4214192			; 00404db0H
  000f2	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  000f5	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 740  : 	//Hooker.Replace(0x40206E, initObjS31Bob);
; 741  : 	Hooker.Replace(0x43E1B0, setobjCheckRangeOut2_hook);

  000fa	6a 00		 push	 0
  000fc	68 00 00 00 00	 push	 OFFSET ?setobjCheckRangeOut2_hook@@YAXPAURwV3d@@M@Z ; setobjCheckRangeOut2_hook
  00101	68 b0 e1 43 00	 push	 4448688			; 0043e1b0H
  00106	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00109	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 742  : 	Hooker.Replace(0x503000, TObjS11Warp_Exec_Hook);

  0010e	6a 00		 push	 0
  00110	68 00 00 00 00	 push	 OFFSET ?TObjS11Warp_Exec_Hook@@YAXXZ ; TObjS11Warp_Exec_Hook
  00115	68 00 30 50 00	 push	 5255168			; 00503000H
  0011a	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  0011d	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 743  : 	Hooker.Replace(0x48AE70, TObjWarp_Exec_Hook);

  00122	6a 00		 push	 0
  00124	68 00 00 00 00	 push	 OFFSET ?TObjWarp_Exec_Hook@@YAXXZ ; TObjWarp_Exec_Hook
  00129	68 70 ae 48 00	 push	 4763248			; 0048ae70H
  0012e	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00131	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 744  : 	Hooker.Replace(0x404700, InitStageAndTeamInfo);

  00136	6a 00		 push	 0
  00138	68 00 00 00 00	 push	 OFFSET ?InitStageAndTeamInfo@@YAXXZ ; InitStageAndTeamInfo
  0013d	68 00 47 40 00	 push	 4212480			; 00404700H
  00142	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00145	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 745  : 	Hooker.Replace(0x426F10, SearchStartStageLocator_ASM);

  0014a	6a 00		 push	 0
  0014c	68 00 00 00 00	 push	 OFFSET ?SearchStartStageLocator_ASM@@YAXXZ ; SearchStartStageLocator_ASM
  00151	68 10 6f 42 00	 push	 4353808			; 00426f10H
  00156	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00159	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 746  : 	Hooker.Replace(0x4DA6AA, TObjTrainCore_Exec_ASM);

  0015e	6a 00		 push	 0
  00160	68 00 00 00 00	 push	 OFFSET ?TObjTrainCore_Exec_ASM@@YAXXZ ; TObjTrainCore_Exec_ASM
  00165	68 aa a6 4d 00	 push	 5088938			; 004da6aaH
  0016a	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  0016d	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 747  : 	Hooker.Replace(0x48254A, GhostRing_ASM);

  00172	6a 00		 push	 0
  00174	68 00 00 00 00	 push	 OFFSET ?GhostRing_ASM@@YAXXZ ; GhostRing_ASM
  00179	68 4a 25 48 00	 push	 4728138			; 0048254aH
  0017e	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00181	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 748  : 	Hooker.Replace(0x48210B, hackToSetRingDisp_ASM);

  00186	6a 00		 push	 0
  00188	68 00 00 00 00	 push	 OFFSET ?hackToSetRingDisp_ASM@@YAXXZ ; hackToSetRingDisp_ASM
  0018d	68 0b 21 48 00	 push	 4727051			; 0048210bH
  00192	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00195	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 749  : 	Hooker.Replace(0x4833D6, scatterRingGottenFix);

  0019a	6a 00		 push	 0
  0019c	68 00 00 00 00	 push	 OFFSET ?scatterRingGottenFix@@YAXXZ ; scatterRingGottenFix
  001a1	68 d6 33 48 00	 push	 4731862			; 004833d6H
  001a6	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  001a9	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 750  : 
; 751  : 
; 752  : 
; 753  : 	// Dirty Hax For Now //
; 754  : 	{
; 755  : 		short data = 0x9090;

  001ae	b8 90 90 ff ff	 mov	 eax, -28528		; ffff9090H
  001b3	66 89 45 e4	 mov	 WORD PTR _data$23[ebp], ax

; 756  : 		Hooker.WritePatch((void*)0x426F48, (char*)&data, 2); //multiplayer start position patch

  001b7	6a 02		 push	 2
  001b9	8d 45 e4	 lea	 eax, DWORD PTR _data$23[ebp]
  001bc	50		 push	 eax
  001bd	68 48 6f 42 00	 push	 4353864			; 00426f48H
  001c2	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  001c5	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 757  : 	}
; 758  : 
; 759  : 	{
; 760  : 		char data = 0xEB;

  001ca	c6 45 db eb	 mov	 BYTE PTR _data$22[ebp], -21 ; ffffffebH

; 761  : 		Hooker.WritePatch((void*)0x557ADA, &data, 1); //Skip a check that calls TObjTeam::TObjTeam() if its not "2PMode" for team battles

  001ce	6a 01		 push	 1
  001d0	8d 45 db	 lea	 eax, DWORD PTR _data$22[ebp]
  001d3	50		 push	 eax
  001d4	68 da 7a 55 00	 push	 5602010			; 00557adaH
  001d9	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  001dc	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 762  : 	}
; 763  : 
; 764  : 	{
; 765  : 		char data = 0xEB;

  001e1	c6 45 cf eb	 mov	 BYTE PTR _data$21[ebp], -21 ; ffffffebH

; 766  : 		Hooker.WritePatch((void*)0x5AB053, &data, 1); //Skip a check that calls SetGame2PManager()

  001e5	6a 01		 push	 1
  001e7	8d 45 cf	 lea	 eax, DWORD PTR _data$21[ebp]
  001ea	50		 push	 eax
  001eb	68 53 b0 5a 00	 push	 5943379			; 005ab053H
  001f0	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  001f3	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 767  : 	}
; 768  : 
; 769  : 	{
; 770  : 		char data = 0xEB;

  001f8	c6 45 c3 eb	 mov	 BYTE PTR _data$20[ebp], -21 ; ffffffebH

; 771  : 		Hooker.WritePatch((void*)0x41DD51, &data, 1);

  001fc	6a 01		 push	 1
  001fe	8d 45 c3	 lea	 eax, DWORD PTR _data$20[ebp]
  00201	50		 push	 eax
  00202	68 51 dd 41 00	 push	 4316497			; 0041dd51H
  00207	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  0020a	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 772  : 	}
; 773  : 
; 774  : 	{
; 775  : 		char data = 0xEB;

  0020f	c6 45 b7 eb	 mov	 BYTE PTR _data$19[ebp], -21 ; ffffffebH

; 776  : 		Hooker.WritePatch((void*)0x5AB6EA, &data, 1); //Skip a check that calls SetGame2PManager()

  00213	6a 01		 push	 1
  00215	8d 45 b7	 lea	 eax, DWORD PTR _data$19[ebp]
  00218	50		 push	 eax
  00219	68 ea b6 5a 00	 push	 5945066			; 005ab6eaH
  0021e	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00221	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 777  : 	}
; 778  : 
; 779  : 	{
; 780  : 		char data = 0x06;

  00226	c6 45 ab 06	 mov	 BYTE PTR _data$18[ebp], 6

; 781  : 		Hooker.WritePatch((void*)0x44737A, &data, 1); //bring up character select on first 2p page

  0022a	6a 01		 push	 1
  0022c	8d 45 ab	 lea	 eax, DWORD PTR _data$18[ebp]
  0022f	50		 push	 eax
  00230	68 7a 73 44 00	 push	 4486010			; 0044737aH
  00235	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00238	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 782  : 	}
; 783  : 
; 784  : 	{
; 785  : 		char data = 0x02;

  0023d	c6 45 9f 02	 mov	 BYTE PTR _data$17[ebp], 2

; 786  : 		Hooker.WritePatch((void*)0x447C81, &data, 1); //goto challange after picking characters

  00241	6a 01		 push	 1
  00243	8d 45 9f	 lea	 eax, DWORD PTR _data$17[ebp]
  00246	50		 push	 eax
  00247	68 81 7c 44 00	 push	 4488321			; 00447c81H
  0024c	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  0024f	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 787  : 	}
; 788  : 
; 789  : 	{
; 790  : 		char data[] = { 0xB1, 0x02, 0x90 };

  00254	c6 45 90 b1	 mov	 BYTE PTR _data$16[ebp], -79 ; ffffffb1H
  00258	c6 45 91 02	 mov	 BYTE PTR _data$16[ebp+1], 2
  0025c	c6 45 92 90	 mov	 BYTE PTR _data$16[ebp+2], -112 ; ffffff90H

; 791  : 		Hooker.WritePatch((void*)0x4BA322, data, 3); //allow p2 to control casino flippers

  00260	6a 03		 push	 3
  00262	8d 45 90	 lea	 eax, DWORD PTR _data$16[ebp]
  00265	50		 push	 eax
  00266	68 22 a3 4b 00	 push	 4956962			; 004ba322H
  0026b	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  0026e	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 792  : 	}
; 793  : 
; 794  : 	{
; 795  : 		char data[] = { 0x90, 0x90 };

  00273	c6 45 84 90	 mov	 BYTE PTR _data$15[ebp], -112 ; ffffff90H
  00277	c6 45 85 90	 mov	 BYTE PTR _data$15[ebp+1], -112 ; ffffff90H

; 796  : 		Hooker.WritePatch((void*)0x4029F2, data, 2); //dirty rank screen patch to make it show

  0027b	6a 02		 push	 2
  0027d	8d 45 84	 lea	 eax, DWORD PTR _data$15[ebp]
  00280	50		 push	 eax
  00281	68 f2 29 40 00	 push	 4205042			; 004029f2H
  00286	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00289	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 797  : 	}
; 798  : 
; 799  : 	{
; 800  : 		char data[] = { 0x90, 0x90 };

  0028e	c6 85 78 ff ff
	ff 90		 mov	 BYTE PTR _data$14[ebp], -112 ; ffffff90H
  00295	c6 85 79 ff ff
	ff 90		 mov	 BYTE PTR _data$14[ebp+1], -112 ; ffffff90H

; 801  : 		Hooker.WritePatch((void*)0x402A21, data, 2); //dirty rank screen patch to make it show

  0029c	6a 02		 push	 2
  0029e	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _data$14[ebp]
  002a4	50		 push	 eax
  002a5	68 21 2a 40 00	 push	 4205089			; 00402a21H
  002aa	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  002ad	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 802  : 	}
; 803  : 
; 804  : 	{
; 805  : 		char data[]{ 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 }; // nop setobjdestroy for train after breaking

  002b2	c6 85 68 ff ff
	ff 90		 mov	 BYTE PTR _data$13[ebp], -112 ; ffffff90H
  002b9	c6 85 69 ff ff
	ff 90		 mov	 BYTE PTR _data$13[ebp+1], -112 ; ffffff90H
  002c0	c6 85 6a ff ff
	ff 90		 mov	 BYTE PTR _data$13[ebp+2], -112 ; ffffff90H
  002c7	c6 85 6b ff ff
	ff 90		 mov	 BYTE PTR _data$13[ebp+3], -112 ; ffffff90H
  002ce	c6 85 6c ff ff
	ff 90		 mov	 BYTE PTR _data$13[ebp+4], -112 ; ffffff90H
  002d5	c6 85 6d ff ff
	ff 90		 mov	 BYTE PTR _data$13[ebp+5], -112 ; ffffff90H
  002dc	c6 85 6e ff ff
	ff 90		 mov	 BYTE PTR _data$13[ebp+6], -112 ; ffffff90H

; 806  : 		Hooker.WritePatch((void*)0x4DA6AF, data, 7);

  002e3	6a 07		 push	 7
  002e5	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _data$13[ebp]
  002eb	50		 push	 eax
  002ec	68 af a6 4d 00	 push	 5088943			; 004da6afH
  002f1	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  002f4	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 807  : 	}
; 808  : 
; 809  : 	{
; 810  : 		char data[]{ 0x90, 0x90, 0x90 };

  002f9	c6 85 5c ff ff
	ff 90		 mov	 BYTE PTR _data$12[ebp], -112 ; ffffff90H
  00300	c6 85 5d ff ff
	ff 90		 mov	 BYTE PTR _data$12[ebp+1], -112 ; ffffff90H
  00307	c6 85 5e ff ff
	ff 90		 mov	 BYTE PTR _data$12[ebp+2], -112 ; ffffff90H

; 811  : 		Hooker.WritePatch((void*)0x4C8918, data, 3);

  0030e	6a 03		 push	 3
  00310	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _data$12[ebp]
  00316	50		 push	 eax
  00317	68 18 89 4c 00	 push	 5015832			; 004c8918H
  0031c	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  0031f	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 812  : 	}
; 813  : 
; 814  : 	{
; 815  : 		DWORD oldProt = 0;

  00324	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _oldProt$11[ebp], 0

; 816  : 		//*(int**)0x752604 = (int*)&ringdisp_ASM;
; 817  : 		VirtualProtect((LPVOID)0x752604, 8, PAGE_EXECUTE_READWRITE, &oldProt);

  0032e	8b f4		 mov	 esi, esp
  00330	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _oldProt$11[ebp]
  00336	50		 push	 eax
  00337	6a 40		 push	 64			; 00000040H
  00339	6a 08		 push	 8
  0033b	68 04 26 75 00	 push	 7677444			; 00752604H
  00340	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualProtect@16
  00346	3b f4		 cmp	 esi, esp
  00348	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 818  : 		VirtualProtect((LPVOID)00752634, 8, PAGE_EXECUTE_READWRITE, &oldProt);

  0034d	8b f4		 mov	 esi, esp
  0034f	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _oldProt$11[ebp]
  00355	50		 push	 eax
  00356	6a 40		 push	 64			; 00000040H
  00358	6a 08		 push	 8
  0035a	68 9c d5 03 00	 push	 251292			; 0003d59cH
  0035f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualProtect@16
  00365	3b f4		 cmp	 esi, esp
  00367	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 819  : 		int* vtable = *(int**)0x752604;

  0036c	a1 04 26 75 00	 mov	 eax, DWORD PTR ds:7677444
  00371	89 85 44 ff ff
	ff		 mov	 DWORD PTR _vtable$10[ebp], eax

; 820  : 		char data[] = { 0x90, 0x90, 0x90, 0x90 };

  00377	c6 85 38 ff ff
	ff 90		 mov	 BYTE PTR _data$9[ebp], -112 ; ffffff90H
  0037e	c6 85 39 ff ff
	ff 90		 mov	 BYTE PTR _data$9[ebp+1], -112 ; ffffff90H
  00385	c6 85 3a ff ff
	ff 90		 mov	 BYTE PTR _data$9[ebp+2], -112 ; ffffff90H
  0038c	c6 85 3b ff ff
	ff 90		 mov	 BYTE PTR _data$9[ebp+3], -112 ; ffffff90H

; 821  : 		//Hooker.WritePatch(vtable, (char*)data, 4);
; 822  : 	}
; 823  : 
; 824  : 	{
; 825  : 		char data = 0x90;

  00393	c6 85 2f ff ff
	ff 90		 mov	 BYTE PTR _data$8[ebp], -112 ; ffffff90H

; 826  : 		Hooker.WritePatch((void*)0x4833DC, (char*)&data, 1); //nop leftover byte from scatterringdropfix

  0039a	6a 01		 push	 1
  0039c	8d 85 2f ff ff
	ff		 lea	 eax, DWORD PTR _data$8[ebp]
  003a2	50		 push	 eax
  003a3	68 dc 33 48 00	 push	 4731868			; 004833dcH
  003a8	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  003ab	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 827  : 	}
; 828  : 
; 829  : 	{
; 830  : 		char data = 0xEB;

  003b0	c6 85 23 ff ff
	ff eb		 mov	 BYTE PTR _data$7[ebp], -21 ; ffffffebH

; 831  : 		//Hooker.WritePatch((void*)0x482361, (char*)&data, 1); //skip distance check that causes rings to be killed
; 832  : 	}
; 833  : 
; 834  : 	Hooker.WriteJMP((void*)0x43D167, superdirtybinpatch);

  003b7	68 00 00 00 00	 push	 OFFSET ?superdirtybinpatch@@YAXXZ ; superdirtybinpatch
  003bc	68 67 d1 43 00	 push	 4444519			; 0043d167H
  003c1	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  003c4	e8 00 00 00 00	 call	 ?WriteJMP@Hook@@QAE_NPAX0@Z ; Hook::WriteJMP

; 835  : 	Hooker.WriteJMP((void*)0x44B678, dirtygotogamechallengepatch);

  003c9	68 00 00 00 00	 push	 OFFSET ?dirtygotogamechallengepatch@@YAXXZ ; dirtygotogamechallengepatch
  003ce	68 78 b6 44 00	 push	 4503160			; 0044b678H
  003d3	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  003d6	e8 00 00 00 00	 call	 ?WriteJMP@Hook@@QAE_NPAX0@Z ; Hook::WriteJMP

; 836  : 	Hooker.WriteJMP((void*)0x5B48D0, IncChaotixClearItem_ASM);

  003db	68 00 00 00 00	 push	 OFFSET ?IncChaotixClearItem_ASM@@YAXXZ ; IncChaotixClearItem_ASM
  003e0	68 d0 48 5b 00	 push	 5982416			; 005b48d0H
  003e5	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  003e8	e8 00 00 00 00	 call	 ?WriteJMP@Hook@@QAE_NPAX0@Z ; Hook::WriteJMP

; 837  : 	Hooker.WriteJMP((void*)0x482FF3, ringsubstanceexechook_ASM);

  003ed	68 00 00 00 00	 push	 OFFSET ?ringsubstanceexechook_ASM@@YAXXZ ; ringsubstanceexechook_ASM
  003f2	68 f3 2f 48 00	 push	 4730867			; 00482ff3H
  003f7	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  003fa	e8 00 00 00 00	 call	 ?WriteJMP@Hook@@QAE_NPAX0@Z ; Hook::WriteJMP

; 838  : 	Hooker.WriteJMP((void*)0x4833D6, RingSubstanceCheckCollisionHook_ASM);

  003ff	68 00 00 00 00	 push	 OFFSET ?RingSubstanceCheckCollisionHook_ASM@@YAXXZ ; RingSubstanceCheckCollisionHook_ASM
  00404	68 d6 33 48 00	 push	 4731862			; 004833d6H
  00409	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  0040c	e8 00 00 00 00	 call	 ?WriteJMP@Hook@@QAE_NPAX0@Z ; Hook::WriteJMP

; 839  : 	Hooker.WriteJMP((void*)0x47194C, WarpCameraAndPlayer_ASM);

  00411	68 00 00 00 00	 push	 OFFSET ?WarpCameraAndPlayer_ASM@@YAXXZ ; WarpCameraAndPlayer_ASM
  00416	68 4c 19 47 00	 push	 4659532			; 0047194cH
  0041b	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  0041e	e8 00 00 00 00	 call	 ?WriteJMP@Hook@@QAE_NPAX0@Z ; Hook::WriteJMP

; 840  : 	//Hooker.WriteJMP((void*)0x4C8913, BigCannonHack_ASM);
; 841  : 
; 842  : 	{
; 843  : 		char data[] = { 0x90 };

  00423	c6 85 17 ff ff
	ff 90		 mov	 BYTE PTR _data$6[ebp], -112 ; ffffff90H

; 844  : 		Hooker.WritePatch((void*)0x43D16C, data, 1); //last byte left over to nop from previous JMP

  0042a	6a 01		 push	 1
  0042c	8d 85 17 ff ff
	ff		 lea	 eax, DWORD PTR _data$6[ebp]
  00432	50		 push	 eax
  00433	68 6c d1 43 00	 push	 4444524			; 0043d16cH
  00438	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  0043b	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 845  : 	}
; 846  : 
; 847  : 	{
; 848  : 		char data[] = { 0x90, 0x90, 0x90, 0x90 };

  00440	c6 85 08 ff ff
	ff 90		 mov	 BYTE PTR _data$5[ebp], -112 ; ffffff90H
  00447	c6 85 09 ff ff
	ff 90		 mov	 BYTE PTR _data$5[ebp+1], -112 ; ffffff90H
  0044e	c6 85 0a ff ff
	ff 90		 mov	 BYTE PTR _data$5[ebp+2], -112 ; ffffff90H
  00455	c6 85 0b ff ff
	ff 90		 mov	 BYTE PTR _data$5[ebp+3], -112 ; ffffff90H

; 849  : 		Hooker.WritePatch((void*)0x45EEF1, data, 4);

  0045c	6a 04		 push	 4
  0045e	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR _data$5[ebp]
  00464	50		 push	 eax
  00465	68 f1 ee 45 00	 push	 4583153			; 0045eef1H
  0046a	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  0046d	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 850  : 		Hooker.Replace(0x45EEEC, BobCatchPlayer_Hook);

  00472	6a 00		 push	 0
  00474	68 00 00 00 00	 push	 OFFSET ?BobCatchPlayer_Hook@@YAXXZ ; BobCatchPlayer_Hook
  00479	68 ec ee 45 00	 push	 4583148			; 0045eeecH
  0047e	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00481	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 851  : 	}
; 852  : 
; 853  : 	{
; 854  : 		char data[]{ 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 };

  00486	c6 85 f8 fe ff
	ff 90		 mov	 BYTE PTR _data$4[ebp], -112 ; ffffff90H
  0048d	c6 85 f9 fe ff
	ff 90		 mov	 BYTE PTR _data$4[ebp+1], -112 ; ffffff90H
  00494	c6 85 fa fe ff
	ff 90		 mov	 BYTE PTR _data$4[ebp+2], -112 ; ffffff90H
  0049b	c6 85 fb fe ff
	ff 90		 mov	 BYTE PTR _data$4[ebp+3], -112 ; ffffff90H
  004a2	c6 85 fc fe ff
	ff 90		 mov	 BYTE PTR _data$4[ebp+4], -112 ; ffffff90H
  004a9	c6 85 fd fe ff
	ff 90		 mov	 BYTE PTR _data$4[ebp+5], -112 ; ffffff90H

; 855  : 		Hooker.WritePatch((void*)0x401858, data, 6);

  004b0	6a 06		 push	 6
  004b2	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _data$4[ebp]
  004b8	50		 push	 eax
  004b9	68 58 18 40 00	 push	 4200536			; 00401858H
  004be	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  004c1	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 856  : 	}
; 857  : 
; 858  : 	{
; 859  : 		char data[]{ 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 };

  004c6	c6 85 e8 fe ff
	ff 90		 mov	 BYTE PTR _data$3[ebp], -112 ; ffffff90H
  004cd	c6 85 e9 fe ff
	ff 90		 mov	 BYTE PTR _data$3[ebp+1], -112 ; ffffff90H
  004d4	c6 85 ea fe ff
	ff 90		 mov	 BYTE PTR _data$3[ebp+2], -112 ; ffffff90H
  004db	c6 85 eb fe ff
	ff 90		 mov	 BYTE PTR _data$3[ebp+3], -112 ; ffffff90H
  004e2	c6 85 ec fe ff
	ff 90		 mov	 BYTE PTR _data$3[ebp+4], -112 ; ffffff90H
  004e9	c6 85 ed fe ff
	ff 90		 mov	 BYTE PTR _data$3[ebp+5], -112 ; ffffff90H
  004f0	c6 85 ee fe ff
	ff 90		 mov	 BYTE PTR _data$3[ebp+6], -112 ; ffffff90H

; 860  : 		//Hooker.WritePatch((void*)0x4833D6, data, 7);
; 861  : 	}
; 862  : 
; 863  : 	{
; 864  : 		char data[]{ 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 };

  004f7	c6 85 d8 fe ff
	ff 90		 mov	 BYTE PTR _data$2[ebp], -112 ; ffffff90H
  004fe	c6 85 d9 fe ff
	ff 90		 mov	 BYTE PTR _data$2[ebp+1], -112 ; ffffff90H
  00505	c6 85 da fe ff
	ff 90		 mov	 BYTE PTR _data$2[ebp+2], -112 ; ffffff90H
  0050c	c6 85 db fe ff
	ff 90		 mov	 BYTE PTR _data$2[ebp+3], -112 ; ffffff90H
  00513	c6 85 dc fe ff
	ff 90		 mov	 BYTE PTR _data$2[ebp+4], -112 ; ffffff90H
  0051a	c6 85 dd fe ff
	ff 90		 mov	 BYTE PTR _data$2[ebp+5], -112 ; ffffff90H
  00521	c6 85 de fe ff
	ff 90		 mov	 BYTE PTR _data$2[ebp+6], -112 ; ffffff90H

; 865  : 		//Hooker.WritePatch((void*)0x483156, data, 7); block scatter ring state from turning to 5, which makes dissapear
; 866  : 	}
; 867  : 
; 868  : 	{
; 869  : 		char data[]{ 0x90, 0x90, 0x90, 0x90 };

  00528	c6 85 cc fe ff
	ff 90		 mov	 BYTE PTR _data$1[ebp], -112 ; ffffff90H
  0052f	c6 85 cd fe ff
	ff 90		 mov	 BYTE PTR _data$1[ebp+1], -112 ; ffffff90H
  00536	c6 85 ce fe ff
	ff 90		 mov	 BYTE PTR _data$1[ebp+2], -112 ; ffffff90H
  0053d	c6 85 cf fe ff
	ff 90		 mov	 BYTE PTR _data$1[ebp+3], -112 ; ffffff90H

; 870  : 		//Hooker.WritePatch((void*)0x4823D6, data, 4);
; 871  : 	}
; 872  : 
; 873  : 	myCode2 = (void(__cdecl*)(void*))CreateTrampoline((void*)0x447280, ADV_2P_Create_Tramp, 7);

  00544	6a 07		 push	 7
  00546	68 00 00 00 00	 push	 OFFSET ?ADV_2P_Create_Tramp@@YAXPAUTObject@@@Z ; ADV_2P_Create_Tramp
  0054b	68 80 72 44 00	 push	 4485760			; 00447280H
  00550	e8 00 00 00 00	 call	 ?CreateTrampoline@@YAPAXPAX0D@Z ; CreateTrampoline
  00555	83 c4 0c	 add	 esp, 12			; 0000000cH
  00558	a3 00 00 00 00	 mov	 DWORD PTR ?myCode2@@3P6AXPAX@ZA, eax ; myCode2

; 874  : 	myCode3 = (void(__cdecl*)(void*))CreateTrampoline((void*)0x447C10, ADV_2P_ExecSelect2, 10);

  0055d	6a 0a		 push	 10			; 0000000aH
  0055f	68 00 00 00 00	 push	 OFFSET ?ADV_2P_ExecSelect2@@YAXXZ ; ADV_2P_ExecSelect2
  00564	68 10 7c 44 00	 push	 4488208			; 00447c10H
  00569	e8 00 00 00 00	 call	 ?CreateTrampoline@@YAPAXPAX0D@Z ; CreateTrampoline
  0056e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00571	a3 00 00 00 00	 mov	 DWORD PTR ?myCode3@@3P6AXPAX@ZA, eax ; myCode3

; 875  : 	myCodeSetBobsleigh = (void(__cdecl*)(int, char*))CreateTrampoline((void*)0x45C9A0, SetBobsleigh_Hook, 7);

  00576	6a 07		 push	 7
  00578	68 00 00 00 00	 push	 OFFSET ?SetBobsleigh_Hook@@YAXHPAD@Z ; SetBobsleigh_Hook
  0057d	68 a0 c9 45 00	 push	 4573600			; 0045c9a0H
  00582	e8 00 00 00 00	 call	 ?CreateTrampoline@@YAPAXPAX0D@Z ; CreateTrampoline
  00587	83 c4 0c	 add	 esp, 12			; 0000000cH
  0058a	a3 00 00 00 00	 mov	 DWORD PTR ?myCodeSetBobsleigh@@3P6AXHPAD@ZA, eax ; myCodeSetBobsleigh

; 876  : 	myCodeSetBobsleigh2 = (void(__cdecl*)(int, char*, void*, void*))CreateTrampoline((void*)0x45CA70, SetBobsleigh_Hook2, 7);

  0058f	6a 07		 push	 7
  00591	68 00 00 00 00	 push	 OFFSET ?SetBobsleigh_Hook2@@YAXHPADPAX1@Z ; SetBobsleigh_Hook2
  00596	68 70 ca 45 00	 push	 4573808			; 0045ca70H
  0059b	e8 00 00 00 00	 call	 ?CreateTrampoline@@YAPAXPAX0D@Z ; CreateTrampoline
  005a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  005a3	a3 00 00 00 00	 mov	 DWORD PTR ?myCodeSetBobsleigh2@@3P6AXHPADPAX1@ZA, eax ; myCodeSetBobsleigh2

; 877  : 
; 878  : }

  005a8	52		 push	 edx
  005a9	8b cd		 mov	 ecx, ebp
  005ab	50		 push	 eax
  005ac	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN26@Init
  005b2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  005b7	58		 pop	 eax
  005b8	5a		 pop	 edx
  005b9	5f		 pop	 edi
  005ba	5e		 pop	 esi
  005bb	5b		 pop	 ebx
  005bc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005bf	33 cd		 xor	 ecx, ebp
  005c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005c6	81 c4 f8 01 00
	00		 add	 esp, 504		; 000001f8H
  005cc	3b ec		 cmp	 ebp, esp
  005ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005d3	8b e5		 mov	 esp, ebp
  005d5	5d		 pop	 ebp
  005d6	c3		 ret	 0
  005d7	90		 npad	 1
$LN26@Init:
  005d8	16 00 00 00	 DD	 22			; 00000016H
  005dc	00 00 00 00	 DD	 $LN25@Init
$LN25@Init:
  005e0	f0 ff ff ff	 DD	 -16			; fffffff0H
  005e4	08 00 00 00	 DD	 8
  005e8	00 00 00 00	 DD	 $LN3@Init
  005ec	e4 ff ff ff	 DD	 -28			; ffffffe4H
  005f0	02 00 00 00	 DD	 2
  005f4	00 00 00 00	 DD	 $LN4@Init
  005f8	db ff ff ff	 DD	 -37			; ffffffdbH
  005fc	01 00 00 00	 DD	 1
  00600	00 00 00 00	 DD	 $LN5@Init
  00604	cf ff ff ff	 DD	 -49			; ffffffcfH
  00608	01 00 00 00	 DD	 1
  0060c	00 00 00 00	 DD	 $LN6@Init
  00610	c3 ff ff ff	 DD	 -61			; ffffffc3H
  00614	01 00 00 00	 DD	 1
  00618	00 00 00 00	 DD	 $LN7@Init
  0061c	b7 ff ff ff	 DD	 -73			; ffffffb7H
  00620	01 00 00 00	 DD	 1
  00624	00 00 00 00	 DD	 $LN8@Init
  00628	ab ff ff ff	 DD	 -85			; ffffffabH
  0062c	01 00 00 00	 DD	 1
  00630	00 00 00 00	 DD	 $LN9@Init
  00634	9f ff ff ff	 DD	 -97			; ffffff9fH
  00638	01 00 00 00	 DD	 1
  0063c	00 00 00 00	 DD	 $LN10@Init
  00640	90 ff ff ff	 DD	 -112			; ffffff90H
  00644	03 00 00 00	 DD	 3
  00648	00 00 00 00	 DD	 $LN11@Init
  0064c	84 ff ff ff	 DD	 -124			; ffffff84H
  00650	02 00 00 00	 DD	 2
  00654	00 00 00 00	 DD	 $LN12@Init
  00658	78 ff ff ff	 DD	 -136			; ffffff78H
  0065c	02 00 00 00	 DD	 2
  00660	00 00 00 00	 DD	 $LN13@Init
  00664	68 ff ff ff	 DD	 -152			; ffffff68H
  00668	07 00 00 00	 DD	 7
  0066c	00 00 00 00	 DD	 $LN14@Init
  00670	5c ff ff ff	 DD	 -164			; ffffff5cH
  00674	03 00 00 00	 DD	 3
  00678	00 00 00 00	 DD	 $LN15@Init
  0067c	50 ff ff ff	 DD	 -176			; ffffff50H
  00680	04 00 00 00	 DD	 4
  00684	00 00 00 00	 DD	 $LN16@Init
  00688	38 ff ff ff	 DD	 -200			; ffffff38H
  0068c	04 00 00 00	 DD	 4
  00690	00 00 00 00	 DD	 $LN17@Init
  00694	2f ff ff ff	 DD	 -209			; ffffff2fH
  00698	01 00 00 00	 DD	 1
  0069c	00 00 00 00	 DD	 $LN18@Init
  006a0	17 ff ff ff	 DD	 -233			; ffffff17H
  006a4	01 00 00 00	 DD	 1
  006a8	00 00 00 00	 DD	 $LN19@Init
  006ac	08 ff ff ff	 DD	 -248			; ffffff08H
  006b0	04 00 00 00	 DD	 4
  006b4	00 00 00 00	 DD	 $LN20@Init
  006b8	f8 fe ff ff	 DD	 -264			; fffffef8H
  006bc	06 00 00 00	 DD	 6
  006c0	00 00 00 00	 DD	 $LN21@Init
  006c4	e8 fe ff ff	 DD	 -280			; fffffee8H
  006c8	07 00 00 00	 DD	 7
  006cc	00 00 00 00	 DD	 $LN22@Init
  006d0	d8 fe ff ff	 DD	 -296			; fffffed8H
  006d4	07 00 00 00	 DD	 7
  006d8	00 00 00 00	 DD	 $LN23@Init
  006dc	cc fe ff ff	 DD	 -308			; fffffeccH
  006e0	04 00 00 00	 DD	 4
  006e4	00 00 00 00	 DD	 $LN24@Init
$LN24@Init:
  006e8	64		 DB	 100			; 00000064H
  006e9	61		 DB	 97			; 00000061H
  006ea	74		 DB	 116			; 00000074H
  006eb	61		 DB	 97			; 00000061H
  006ec	00		 DB	 0
$LN23@Init:
  006ed	64		 DB	 100			; 00000064H
  006ee	61		 DB	 97			; 00000061H
  006ef	74		 DB	 116			; 00000074H
  006f0	61		 DB	 97			; 00000061H
  006f1	00		 DB	 0
$LN22@Init:
  006f2	64		 DB	 100			; 00000064H
  006f3	61		 DB	 97			; 00000061H
  006f4	74		 DB	 116			; 00000074H
  006f5	61		 DB	 97			; 00000061H
  006f6	00		 DB	 0
$LN21@Init:
  006f7	64		 DB	 100			; 00000064H
  006f8	61		 DB	 97			; 00000061H
  006f9	74		 DB	 116			; 00000074H
  006fa	61		 DB	 97			; 00000061H
  006fb	00		 DB	 0
$LN20@Init:
  006fc	64		 DB	 100			; 00000064H
  006fd	61		 DB	 97			; 00000061H
  006fe	74		 DB	 116			; 00000074H
  006ff	61		 DB	 97			; 00000061H
  00700	00		 DB	 0
$LN19@Init:
  00701	64		 DB	 100			; 00000064H
  00702	61		 DB	 97			; 00000061H
  00703	74		 DB	 116			; 00000074H
  00704	61		 DB	 97			; 00000061H
  00705	00		 DB	 0
$LN18@Init:
  00706	64		 DB	 100			; 00000064H
  00707	61		 DB	 97			; 00000061H
  00708	74		 DB	 116			; 00000074H
  00709	61		 DB	 97			; 00000061H
  0070a	00		 DB	 0
$LN17@Init:
  0070b	64		 DB	 100			; 00000064H
  0070c	61		 DB	 97			; 00000061H
  0070d	74		 DB	 116			; 00000074H
  0070e	61		 DB	 97			; 00000061H
  0070f	00		 DB	 0
$LN16@Init:
  00710	6f		 DB	 111			; 0000006fH
  00711	6c		 DB	 108			; 0000006cH
  00712	64		 DB	 100			; 00000064H
  00713	50		 DB	 80			; 00000050H
  00714	72		 DB	 114			; 00000072H
  00715	6f		 DB	 111			; 0000006fH
  00716	74		 DB	 116			; 00000074H
  00717	00		 DB	 0
$LN15@Init:
  00718	64		 DB	 100			; 00000064H
  00719	61		 DB	 97			; 00000061H
  0071a	74		 DB	 116			; 00000074H
  0071b	61		 DB	 97			; 00000061H
  0071c	00		 DB	 0
$LN14@Init:
  0071d	64		 DB	 100			; 00000064H
  0071e	61		 DB	 97			; 00000061H
  0071f	74		 DB	 116			; 00000074H
  00720	61		 DB	 97			; 00000061H
  00721	00		 DB	 0
$LN13@Init:
  00722	64		 DB	 100			; 00000064H
  00723	61		 DB	 97			; 00000061H
  00724	74		 DB	 116			; 00000074H
  00725	61		 DB	 97			; 00000061H
  00726	00		 DB	 0
$LN12@Init:
  00727	64		 DB	 100			; 00000064H
  00728	61		 DB	 97			; 00000061H
  00729	74		 DB	 116			; 00000074H
  0072a	61		 DB	 97			; 00000061H
  0072b	00		 DB	 0
$LN11@Init:
  0072c	64		 DB	 100			; 00000064H
  0072d	61		 DB	 97			; 00000061H
  0072e	74		 DB	 116			; 00000074H
  0072f	61		 DB	 97			; 00000061H
  00730	00		 DB	 0
$LN10@Init:
  00731	64		 DB	 100			; 00000064H
  00732	61		 DB	 97			; 00000061H
  00733	74		 DB	 116			; 00000074H
  00734	61		 DB	 97			; 00000061H
  00735	00		 DB	 0
$LN9@Init:
  00736	64		 DB	 100			; 00000064H
  00737	61		 DB	 97			; 00000061H
  00738	74		 DB	 116			; 00000074H
  00739	61		 DB	 97			; 00000061H
  0073a	00		 DB	 0
$LN8@Init:
  0073b	64		 DB	 100			; 00000064H
  0073c	61		 DB	 97			; 00000061H
  0073d	74		 DB	 116			; 00000074H
  0073e	61		 DB	 97			; 00000061H
  0073f	00		 DB	 0
$LN7@Init:
  00740	64		 DB	 100			; 00000064H
  00741	61		 DB	 97			; 00000061H
  00742	74		 DB	 116			; 00000074H
  00743	61		 DB	 97			; 00000061H
  00744	00		 DB	 0
$LN6@Init:
  00745	64		 DB	 100			; 00000064H
  00746	61		 DB	 97			; 00000061H
  00747	74		 DB	 116			; 00000074H
  00748	61		 DB	 97			; 00000061H
  00749	00		 DB	 0
$LN5@Init:
  0074a	64		 DB	 100			; 00000064H
  0074b	61		 DB	 97			; 00000061H
  0074c	74		 DB	 116			; 00000074H
  0074d	61		 DB	 97			; 00000061H
  0074e	00		 DB	 0
$LN4@Init:
  0074f	64		 DB	 100			; 00000064H
  00750	61		 DB	 97			; 00000061H
  00751	74		 DB	 116			; 00000074H
  00752	61		 DB	 97			; 00000061H
  00753	00		 DB	 0
$LN3@Init:
  00754	48		 DB	 72			; 00000048H
  00755	6f		 DB	 111			; 0000006fH
  00756	6f		 DB	 111			; 0000006fH
  00757	6b		 DB	 107			; 0000006bH
  00758	65		 DB	 101			; 00000065H
  00759	72		 DB	 114			; 00000072H
  0075a	00		 DB	 0
_Init	ENDP
_TEXT	ENDS
END
