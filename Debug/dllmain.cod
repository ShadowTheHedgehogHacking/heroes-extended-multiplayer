; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28316.0 

	TITLE	C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?layoutTeamKind@@3HA				; layoutTeamKind
PUBLIC	?DemoLocator@@3AAPADA				; DemoLocator
PUBLIC	?gStartStageLocator2p@@3AAPAHA			; gStartStageLocator2p
PUBLIC	?gStartStageLocator@@3PAHA			; gStartStageLocator
PUBLIC	?myCode2@@3P6AXPAX@ZA				; myCode2
PUBLIC	?myCode3@@3P6AXPAX@ZA				; myCode3
PUBLIC	?myCodeSetBobsleigh@@3P6AXHPAD@ZA		; myCodeSetBobsleigh
PUBLIC	?myCodeSetBobsleigh2@@3P6AXHPADPAX1@ZA		; myCodeSetBobsleigh2
PUBLIC	?address@@3HA					; address
PUBLIC	?address2@@3HA					; address2
PUBLIC	?t@@3PAUTObjRingSubstance@@A			; t
PUBLIC	?warpPosition@@3PAURwV3d@@A			; warpPosition
_BSS	SEGMENT
?layoutTeamKind@@3HA DD 01H DUP (?)			; layoutTeamKind
?myCode2@@3P6AXPAX@ZA DD 01H DUP (?)			; myCode2
?myCode3@@3P6AXPAX@ZA DD 01H DUP (?)			; myCode3
?myCodeSetBobsleigh@@3P6AXHPAD@ZA DD 01H DUP (?)	; myCodeSetBobsleigh
?myCodeSetBobsleigh2@@3P6AXHPADPAX1@ZA DD 01H DUP (?)	; myCodeSetBobsleigh2
?t@@3PAUTObjRingSubstance@@A DD 01H DUP (?)		; t
_BSS	ENDS
msvcjmc	SEGMENT
__F2BDCE38_pch@h DB 01H
__6EE8A1C6_mod@pch DB 01H
__1BA9ED96_dllmain@cpp DB 01H
__2CCBBE23_propidl@h DB 01H
__24E9E95F_stdlib@h DB 01H
__BB40F913_TObject@hpp DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
?DemoLocator@@3AAPADA DD 09ddd88H			; DemoLocator
?gStartStageLocator2p@@3AAPAHA DD 07c5e18H		; gStartStageLocator2p
?gStartStageLocator@@3PAHA DD 07c2fc8H			; gStartStageLocator
?address@@3HA DD 043d16dH				; address
?address2@@3HA DD 044b67dH				; address2
?warpPosition@@3PAURwV3d@@A DD 0c3160000r	; -150	; warpPosition
	DD	044fdc000r			; 2030
	DD	045fd2000r			; 8100
	DD	047a41000r			; 84000
	DD	045210000r			; 2576
	DD	0c5110000r			; -2320
	DD	0c63c4800r			; -12050
	DD	044fdc000r			; 2030
	DD	045fff000r			; 8190
	DD	047c35000r			; 100000
	DD	046066000r			; 8600
	DD	046437800r			; 12510
_DATA	ENDS
PUBLIC	_Init
PUBLIC	_DllMain@12
PUBLIC	?SearchStartStageLocator_Hook@@YAPADH@Z		; SearchStartStageLocator_Hook
PUBLIC	?IncChaotixClearItem@@YAHPAUTObjTeam@@@Z	; IncChaotixClearItem
PUBLIC	?SearchStartStageLocator_ASM@@YAXXZ		; SearchStartStageLocator_ASM
PUBLIC	?IncChaotixClearItem_ASM@@YAXXZ			; IncChaotixClearItem_ASM
PUBLIC	?CreateTrampoline@@YAPAXPAX0D@Z			; CreateTrampoline
PUBLIC	?ADV_2P_Create@@YAXXZ				; ADV_2P_Create
PUBLIC	?ADV_2P_Create_Tramp@@YAXPAUTObject@@@Z		; ADV_2P_Create_Tramp
PUBLIC	?ADV_2P_ExecSelect2_Tramp@@YAXPAUADV_2P@@@Z	; ADV_2P_ExecSelect2_Tramp
PUBLIC	?ADV_2P_ExecSelect2@@YAXXZ			; ADV_2P_ExecSelect2
PUBLIC	?superdirtybinpatch@@YAXXZ			; superdirtybinpatch
PUBLIC	?dirtygotogamechallengepatch@@YAXXZ		; dirtygotogamechallengepatch
PUBLIC	?SetBobsleigh_Hook@@YAXHPAD@Z			; SetBobsleigh_Hook
PUBLIC	?SetBobsleigh_Hook2@@YAXHPADPAX1@Z		; SetBobsleigh_Hook2
PUBLIC	?BobCatchPlayer_Hook@@YAXXZ			; BobCatchPlayer_Hook
PUBLIC	?ringtest@@YAXXZ				; ringtest
PUBLIC	?ringsubstanceexechook_ASM@@YAXXZ		; ringsubstanceexechook_ASM
PUBLIC	?RingSubstanceCheckCollisionHook_ASM@@YAXXZ	; RingSubstanceCheckCollisionHook_ASM
PUBLIC	?WarpCameraAndPlayer_ASM@@YAXXZ			; WarpCameraAndPlayer_ASM
PUBLIC	?CheckPlayerHack@@YAHPAUTObjTrainCore@@@Z	; CheckPlayerHack
PUBLIC	?TrainHack@@YAXPAUTObjTrainCore@@@Z		; TrainHack
PUBLIC	?TObjTrainCore_Exec_ASM@@YAXXZ			; TObjTrainCore_Exec_ASM
PUBLIC	__JustMyCode_Default
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@41500000
PUBLIC	__real@41600000
EXTRN	_memcpy:PROC
EXTRN	__imp__VirtualAlloc@16:PROC
EXTRN	?GetLeaderPlayerNo@TObjTeam@@QAEDXZ:PROC	; TObjTeam::GetLeaderPlayerNo
EXTRN	?GetNowLeaderPlayerNo@TObjTeam@@QAEDXZ:PROC	; TObjTeam::GetNowLeaderPlayerNo
EXTRN	?IsThisPostedPlayer@TObjTeam@@QAE_NH@Z:PROC	; TObjTeam::IsThisPostedPlayer
EXTRN	?GetCharacterId@C_COLLI@@QAEHXZ:PROC		; C_COLLI::GetCharacterId
EXTRN	?IsHitKind@C_COLLI@@QAEPAU1@E@Z:PROC		; C_COLLI::IsHitKind
EXTRN	?IsHitPlayer@C_COLLI@@QAEPAU1@XZ:PROC		; C_COLLI::IsHitPlayer
EXTRN	?ClearSearch@CCL_MASTER@@SAXXZ:PROC		; CCL_MASTER::ClearSearch
EXTRN	?GetPlayerNumberFromCCLCharacterId@@YAHH@Z:PROC	; GetPlayerNumberFromCCLCharacterId
EXTRN	?ChangeModeFormationFly_Hook@@YAXXZ:PROC	; ChangeModeFormationFly_Hook
EXTRN	?MakeGameKeyData@@YAPAFXZ:PROC			; MakeGameKeyData
EXTRN	?MakePlayersKeyData@@YAXXZ:PROC			; MakePlayersKeyData
EXTRN	?InitModules@MAIN@@SAHXZ:PROC			; MAIN::InitModules
EXTRN	?SetupDInput@PCSpecific@@YAJXZ:PROC		; PCSpecific::SetupDInput
EXTRN	?Start@CLASS_DVDREAD@@YGPAHPAH@Z:PROC		; CLASS_DVDREAD::Start
EXTRN	?setobjCheckRangeOut2_hook@@YAXPAURwV3d@@M@Z:PROC ; setobjCheckRangeOut2_hook
EXTRN	?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z:PROC ; Hook::Replace
EXTRN	?WritePatch@Hook@@QAE_NPAXPADH@Z:PROC		; Hook::WritePatch
EXTRN	?WriteJMP@Hook@@QAE_NPAX0@Z:PROC		; Hook::WriteJMP
EXTRN	?initObjS31Bob@@YAXXZ:PROC			; initObjS31Bob
EXTRN	?SetArrowPosition_hook@@YAXPAUTObjBobsleigh@@@Z:PROC ; SetArrowPosition_hook
EXTRN	?arrowdisptest_hook@@YAXXZ:PROC			; arrowdisptest_hook
EXTRN	?addFrame_Hook@@YAXHPAUACTION@@@Z:PROC		; addFrame_Hook
EXTRN	?InitStageAndTeamInfo@@YAXXZ:PROC		; InitStageAndTeamInfo
EXTRN	?WarpCameraAndPlayer@TObjCamera@@SAXPAURwV3d@@D@Z:PROC ; TObjCamera::WarpCameraAndPlayer
EXTRN	?TObjS11Warp_Exec_Hook@@YAXXZ:PROC		; TObjS11Warp_Exec_Hook
EXTRN	?TObjWarp_Exec_Hook@@YAXXZ:PROC			; TObjWarp_Exec_Hook
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?teamTOp@@3PAPAUTObjTeam@@A:DWORD		; teamTOp
EXTRN	?playerTOp@@3QAPAUTObjPlayer@@A:DWORD		; playerTOp
EXTRN	?Action@@3AAUACTION@@A:DWORD			; Action
EXTRN	?team1@@3DA:BYTE				; team1
EXTRN	?team2@@3DA:BYTE				; team2
EXTRN	?pModeSwitch@@3AAPAUMODESWITCH@@A:DWORD		; pModeSwitch
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@41600000
CONST	SEGMENT
__real@41600000 DD 041600000r			; 14
CONST	ENDS
;	COMDAT __real@41500000
CONST	SEGMENT
__real@41500000 DD 041500000r			; 13
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
?addytrue@?1??BobCatchPlayer_Hook@@YAXXZ@4HA DD 045eef7H ; `BobCatchPlayer_Hook'::`2'::addytrue
?addyfalse@?1??BobCatchPlayer_Hook@@YAXXZ@4HA DD 045ef41H ; `BobCatchPlayer_Hook'::`2'::addyfalse
?addy@@3HA DD	04832f0H				; addy
?addy2@@3HA DD	0482ff8H				; addy2
?addybacktocheckcolli@@3HA DD 04833ddH			; addybacktocheckcolli
?addyback@@3HA DD 0471951H				; addyback
?trainAddy@@3HA DD 04da6b6H				; trainAddy
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?TObjTrainCore_Exec_ASM@@YAXXZ
_TEXT	SEGMENT
?TObjTrainCore_Exec_ASM@@YAXXZ PROC			; TObjTrainCore_Exec_ASM, COMDAT

; 514  : 	//do st
; 515  : 	__asm
; 516  : 	{
; 517  : 		push edi;

  00000	57		 push	 edi

; 518  : 		call TrainHack;

  00001	e8 00 00 00 00	 call	 ?TrainHack@@YAXPAUTObjTrainCore@@@Z ; TrainHack

; 519  : 		add esp, 0x4;

  00006	83 c4 04	 add	 esp, 4

; 520  : 		jmp trainAddy;

  00009	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?trainAddy@@3HA
?TObjTrainCore_Exec_ASM@@YAXXZ ENDP			; TObjTrainCore_Exec_ASM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?TrainHack@@YAXPAUTObjTrainCore@@@Z
_TEXT	SEGMENT
_a1$ = 8						; size = 4
?TrainHack@@YAXPAUTObjTrainCore@@@Z PROC		; TrainHack, COMDAT

; 506  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 507  : 	TObjCamera::WarpCameraAndPlayer(&warpPosition[(int)a1->SETOBJ_PARAM->PARAM->data[0]], CheckPlayerHack(a1));

  00028	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?CheckPlayerHack@@YAHPAUTObjTrainCore@@@Z ; CheckPlayerHack
  00031	83 c4 04	 add	 esp, 4
  00034	50		 push	 eax
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _a1$[ebp]
  00038	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  0003b	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  0003e	b9 01 00 00 00	 mov	 ecx, 1
  00043	6b d1 00	 imul	 edx, ecx, 0
  00046	0f be 04 10	 movsx	 eax, BYTE PTR [eax+edx]
  0004a	6b c8 0c	 imul	 ecx, eax, 12
  0004d	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?warpPosition@@3PAURwV3d@@A ; warpPosition
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 ?WarpCameraAndPlayer@TObjCamera@@SAXPAURwV3d@@D@Z ; TObjCamera::WarpCameraAndPlayer
  00059	83 c4 08	 add	 esp, 8

; 508  : 	*(int*)&a1->SETOBJ_PARAM->SETFlag_HHC &= ~0x10002;

  0005c	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0005f	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00062	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00065	81 e2 fd ff fe
	ff		 and	 edx, -65539		; fffefffdH
  0006b	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0006e	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00071	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 509  : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5b		 pop	 ebx
  00077	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0007d	3b ec		 cmp	 ebp, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
?TrainHack@@YAXPAUTObjTrainCore@@@Z ENDP		; TrainHack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?CheckPlayerHack@@YAHPAUTObjTrainCore@@@Z
_TEXT	SEGMENT
_v3$1 = -56						; size = 4
_v7$2 = -44						; size = 4
_v6$3 = -32						; size = 4
_v1$4 = -20						; size = 4
_hitTarget$ = -8					; size = 4
_a1$ = 8						; size = 4
?CheckPlayerHack@@YAHPAUTObjTrainCore@@@Z PROC		; CheckPlayerHack, COMDAT

; 468  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 469  : 	CCL_MASTER::ClearSearch();

  00028	e8 00 00 00 00	 call	 ?ClearSearch@CCL_MASTER@@SAXXZ ; CCL_MASTER::ClearSearch

; 470  : 	C_COLLI* hitTarget = a1->C_COLLI.IsHitKind(0xdu);

  0002d	6a 0d		 push	 13			; 0000000dH
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _a1$[ebp]
  00032	83 c1 30	 add	 ecx, 48			; 00000030H
  00035	e8 00 00 00 00	 call	 ?IsHitKind@C_COLLI@@QAEPAU1@E@Z ; C_COLLI::IsHitKind
  0003a	89 45 f8	 mov	 DWORD PTR _hitTarget$[ebp], eax

; 471  : 	if (!hitTarget)

  0003d	83 7d f8 00	 cmp	 DWORD PTR _hitTarget$[ebp], 0
  00041	0f 85 dd 00 00
	00		 jne	 $LN4@CheckPlaye

; 472  : 	{
; 473  : 		CCL_MASTER::ClearSearch();

  00047	e8 00 00 00 00	 call	 ?ClearSearch@CCL_MASTER@@SAXXZ ; CCL_MASTER::ClearSearch
$LN2@CheckPlaye:

; 474  : 		while (1)

  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	85 c0		 test	 eax, eax
  00053	0f 84 cb 00 00
	00		 je	 $LN4@CheckPlaye

; 475  : 		{
; 476  : 			//hitTarget = a1->C_COLLI.IsHitKind(0x14);
; 477  : 			hitTarget = a1->C_COLLI.IsHitPlayer();

  00059	8b 4d 08	 mov	 ecx, DWORD PTR _a1$[ebp]
  0005c	83 c1 30	 add	 ecx, 48			; 00000030H
  0005f	e8 00 00 00 00	 call	 ?IsHitPlayer@C_COLLI@@QAEPAU1@XZ ; C_COLLI::IsHitPlayer
  00064	89 45 f8	 mov	 DWORD PTR _hitTarget$[ebp], eax

; 478  : 			if (!hitTarget)

  00067	83 7d f8 00	 cmp	 DWORD PTR _hitTarget$[ebp], 0
  0006b	75 05		 jne	 SHORT $LN5@CheckPlaye

; 479  : 			{
; 480  : 				break;

  0006d	e9 b2 00 00 00	 jmp	 $LN4@CheckPlaye
$LN5@CheckPlaye:

; 481  : 			}
; 482  : 			int v1 = GetPlayerNumberFromCCLCharacterId(hitTarget->GetCharacterId());

  00072	8b 4d f8	 mov	 ecx, DWORD PTR _hitTarget$[ebp]
  00075	e8 00 00 00 00	 call	 ?GetCharacterId@C_COLLI@@QAEHXZ ; C_COLLI::GetCharacterId
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ?GetPlayerNumberFromCCLCharacterId@@YAHH@Z ; GetPlayerNumberFromCCLCharacterId
  00080	83 c4 04	 add	 esp, 4
  00083	89 45 ec	 mov	 DWORD PTR _v1$4[ebp], eax

; 483  : 			TObjPlayer* v6 = playerTOp[v1];

  00086	8b 45 ec	 mov	 eax, DWORD PTR _v1$4[ebp]
  00089	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?playerTOp@@3QAPAUTObjPlayer@@A ; playerTOp
  0008f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00092	89 55 e0	 mov	 DWORD PTR _v6$3[ebp], edx

; 484  : 			if (v6)

  00095	83 7d e0 00	 cmp	 DWORD PTR _v6$3[ebp], 0
  00099	0f 84 80 00 00
	00		 je	 $LN6@CheckPlaye

; 485  : 			{
; 486  : 				int v7 = v6->teamNo;

  0009f	8b 45 e0	 mov	 eax, DWORD PTR _v6$3[ebp]
  000a2	0f be 88 be 00
	00 00		 movsx	 ecx, BYTE PTR [eax+190]
  000a9	89 4d d4	 mov	 DWORD PTR _v7$2[ebp], ecx

; 487  : 				TObjTeam* v3 = teamTOp[v7];

  000ac	8b 45 d4	 mov	 eax, DWORD PTR _v7$2[ebp]
  000af	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  000b5	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000b8	89 55 c8	 mov	 DWORD PTR _v3$1[ebp], edx

; 488  : 				if (v3)

  000bb	83 7d c8 00	 cmp	 DWORD PTR _v3$1[ebp], 0
  000bf	74 5e		 je	 SHORT $LN6@CheckPlaye

; 489  : 				{
; 490  : 					if (v3->playerNo[v3->GetNowLeaderPlayerNo() % 3] == v1 || v3->playerNo[v3->GetLeaderPlayerNo() % 3] == v1)

  000c1	8b 4d c8	 mov	 ecx, DWORD PTR _v3$1[ebp]
  000c4	e8 00 00 00 00	 call	 ?GetNowLeaderPlayerNo@TObjTeam@@QAEDXZ ; TObjTeam::GetNowLeaderPlayerNo
  000c9	0f be c0	 movsx	 eax, al
  000cc	99		 cdq
  000cd	b9 03 00 00 00	 mov	 ecx, 3
  000d2	f7 f9		 idiv	 ecx
  000d4	8b 45 c8	 mov	 eax, DWORD PTR _v3$1[ebp]
  000d7	0f be 8c 10 10
	01 00 00	 movsx	 ecx, BYTE PTR [eax+edx+272]
  000df	3b 4d ec	 cmp	 ecx, DWORD PTR _v1$4[ebp]
  000e2	74 23		 je	 SHORT $LN9@CheckPlaye
  000e4	8b 4d c8	 mov	 ecx, DWORD PTR _v3$1[ebp]
  000e7	e8 00 00 00 00	 call	 ?GetLeaderPlayerNo@TObjTeam@@QAEDXZ ; TObjTeam::GetLeaderPlayerNo
  000ec	0f be c0	 movsx	 eax, al
  000ef	99		 cdq
  000f0	b9 03 00 00 00	 mov	 ecx, 3
  000f5	f7 f9		 idiv	 ecx
  000f7	8b 45 c8	 mov	 eax, DWORD PTR _v3$1[ebp]
  000fa	0f be 8c 10 10
	01 00 00	 movsx	 ecx, BYTE PTR [eax+edx+272]
  00102	3b 4d ec	 cmp	 ecx, DWORD PTR _v1$4[ebp]
  00105	75 18		 jne	 SHORT $LN6@CheckPlaye
$LN9@CheckPlaye:

; 491  : 					{
; 492  : 						if (v3->IsThisPostedPlayer(v1))

  00107	8b 45 ec	 mov	 eax, DWORD PTR _v1$4[ebp]
  0010a	50		 push	 eax
  0010b	8b 4d c8	 mov	 ecx, DWORD PTR _v3$1[ebp]
  0010e	e8 00 00 00 00	 call	 ?IsThisPostedPlayer@TObjTeam@@QAE_NH@Z ; TObjTeam::IsThisPostedPlayer
  00113	0f b6 c8	 movzx	 ecx, al
  00116	85 c9		 test	 ecx, ecx
  00118	74 05		 je	 SHORT $LN6@CheckPlaye

; 493  : 						{
; 494  : 							//this->currentPlayerNo = v7;
; 495  : 							return v7;

  0011a	8b 45 d4	 mov	 eax, DWORD PTR _v7$2[ebp]
  0011d	eb 07		 jmp	 SHORT $LN1@CheckPlaye
$LN6@CheckPlaye:

; 496  : 						}
; 497  : 					}
; 498  : 				}
; 499  : 			}
; 500  : 		}

  0011f	e9 28 ff ff ff	 jmp	 $LN2@CheckPlaye
$LN4@CheckPlaye:

; 501  : 	}
; 502  : 	return 0;

  00124	33 c0		 xor	 eax, eax
$LN1@CheckPlaye:

; 503  : }

  00126	5f		 pop	 edi
  00127	5e		 pop	 esi
  00128	5b		 pop	 ebx
  00129	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  0012f	3b ec		 cmp	 ebp, esp
  00131	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
?CheckPlayerHack@@YAHPAUTObjTrainCore@@@Z ENDP		; CheckPlayerHack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?WarpCameraAndPlayer_ASM@@YAXXZ
_TEXT	SEGMENT
?WarpCameraAndPlayer_ASM@@YAXXZ PROC			; WarpCameraAndPlayer_ASM, COMDAT

; 450  : 	__asm
; 451  : 	{
; 452  : 		push[ebp + 0xF8];

  00000	ff b5 f8 00 00
	00		 push	 DWORD PTR [ebp+248]

; 453  : 		push eax;

  00006	50		 push	 eax

; 454  : 		call TObjCamera::WarpCameraAndPlayer;

  00007	e8 00 00 00 00	 call	 ?WarpCameraAndPlayer@TObjCamera@@SAXPAURwV3d@@D@Z ; TObjCamera::WarpCameraAndPlayer

; 455  : 		add esp, 0x8;

  0000c	83 c4 08	 add	 esp, 8

; 456  : 		jmp [addyback];

  0000f	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?addyback@@3HA
?WarpCameraAndPlayer_ASM@@YAXXZ ENDP			; WarpCameraAndPlayer_ASM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?RingSubstanceCheckCollisionHook_ASM@@YAXXZ
_TEXT	SEGMENT
?RingSubstanceCheckCollisionHook_ASM@@YAXXZ PROC	; RingSubstanceCheckCollisionHook_ASM, COMDAT

; 430  : 	__asm
; 431  : 	{
; 432  : 		push eax;

  00000	50		 push	 eax

; 433  : 		push ecx;

  00001	51		 push	 ecx

; 434  : 	}
; 435  : 	if (*(int*)t->pTObjSetRing == 0x7525CC)

  00002	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t@@3PAUTObjRingSubstance@@A ; t
  00007	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  0000d	81 39 cc 25 75
	00		 cmp	 DWORD PTR [ecx], 7677388 ; 007525ccH
  00013	75 0c		 jne	 SHORT $LN2@RingSubsta

; 436  : 	{
; 437  : 		t->state__ = 5;

  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t@@3PAUTObjRingSubstance@@A ; t
  0001a	c6 80 c9 00 00
	00 05		 mov	 BYTE PTR [eax+201], 5
$LN2@RingSubsta:

; 438  : 	}
; 439  : 	__asm
; 440  : 	{
; 441  : 		pop ecx;

  00021	59		 pop	 ecx

; 442  : 		pop eax;

  00022	58		 pop	 eax

; 443  : 		jmp addybacktocheckcolli;

  00023	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?addybacktocheckcolli@@3HA
?RingSubstanceCheckCollisionHook_ASM@@YAXXZ ENDP	; RingSubstanceCheckCollisionHook_ASM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?ringsubstanceexechook_ASM@@YAXXZ
_TEXT	SEGMENT
?ringsubstanceexechook_ASM@@YAXXZ PROC			; ringsubstanceexechook_ASM, COMDAT

; 376  : 	__asm push eax;

  00000	50		 push	 eax
  00001	51		 push	 ecx
  00002	52		 push	 edx
  00003	89 35 00 00 00
	00		 mov	 DWORD PTR ?t@@3PAUTObjRingSubstance@@A, esi ; t
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t@@3PAUTObjRingSubstance@@A ; t
  0000e	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  00014	81 39 cc 25 75
	00		 cmp	 DWORD PTR [ecx], 7677388 ; 007525ccH
  0001a	74 6e		 je	 SHORT $LN2@ringsubsta

; 377  : 	__asm push ecx;
; 378  : 	__asm push edx;
; 379  : 	__asm mov[t], esi;
; 380  : 	if (*(int*)t->pTObjSetRing != 0x7525CC)//(t->pTObjSetRing->type_HHC != 4)//(t->field_CC)
; 381  : 	{
; 382  : 		// terribleFunc(); enable for logging, when releasing also remove import fstream at top
; 383  : 
; 384  : 		// null and common case
; 385  : 		//if (t->pTObjSetRing->field_54 == NULL || (int)(t->pTObjSetRing->field_54) <= 0xCFFF) {
; 386  : 		//	goto endOfRingCheck;
; 387  : 		//}
; 388  : 
; 389  : 		if (!((1 << (t->ringNo & 31)) & *(&t->pTObjSetRing->field_54->pStrage_HHC->gottenFlag + ((t->ringNo >> 5) & 3))))

  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t@@3PAUTObjRingSubstance@@A ; t
  00021	0f be 88 ca 00
	00 00		 movsx	 ecx, BYTE PTR [eax+202]
  00028	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0002b	ba 01 00 00 00	 mov	 edx, 1
  00030	d3 e2		 shl	 edx, cl
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t@@3PAUTObjRingSubstance@@A ; t
  00037	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  0003d	8b 41 54	 mov	 eax, DWORD PTR [ecx+84]
  00040	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t@@3PAUTObjRingSubstance@@A ; t
  00048	0f be 80 ca 00
	00 00		 movsx	 eax, BYTE PTR [eax+202]
  0004f	c1 f8 05	 sar	 eax, 5
  00052	83 e0 03	 and	 eax, 3
  00055	23 14 81	 and	 edx, DWORD PTR [ecx+eax*4]
  00058	75 0e		 jne	 SHORT $LN4@ringsubsta
$heretest$8:

; 390  : 		{
; 391  : 				heretest:
; 392  : 			{
; 393  : 				__asm
; 394  : 				{
; 395  : 					pop edx;

  0005a	5a		 pop	 edx

; 396  : 					pop ecx;

  0005b	59		 pop	 ecx

; 397  : 					pop eax;

  0005c	58		 pop	 eax

; 398  : 					call[addy];

  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR ?addy@@3HA

; 399  : 					push eax;

  00063	50		 push	 eax

; 400  : 					push ecx;

  00064	51		 push	 ecx

; 401  : 					push edx;

  00065	52		 push	 edx

; 402  : 				}
; 403  : 			}
; 404  : 		}

  00066	eb 20		 jmp	 SHORT $LN5@ringsubsta
$LN4@ringsubsta:

; 405  : 		else
; 406  : 		{
; 407  : 			if (t->pTObjSetRing->numRings < 5)

  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t@@3PAUTObjRingSubstance@@A ; t
  0006d	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  00073	0f be 51 28	 movsx	 edx, BYTE PTR [ecx+40]
  00077	83 fa 05	 cmp	 edx, 5
  0007a	7d 0c		 jge	 SHORT $LN5@ringsubsta

; 408  : 			{
; 409  : 				t->state__ = 5;

  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?t@@3PAUTObjRingSubstance@@A ; t
  00081	c6 80 c9 00 00
	00 05		 mov	 BYTE PTR [eax+201], 5
$LN5@ringsubsta:

; 410  : 			}
; 411  : 		}
; 412  : 	}

  00088	eb 02		 jmp	 SHORT $endOfRingCheck$9
$LN2@ringsubsta:

; 413  : 	else
; 414  : 	{
; 415  : 		goto heretest;

  0008a	eb ce		 jmp	 SHORT $heretest$8
$endOfRingCheck$9:

; 416  : 	}
; 417  : endOfRingCheck: ; //label marker, do nothing before pop and return
; 418  : 	__asm
; 419  : 	{
; 420  : 		pop edx;

  0008c	5a		 pop	 edx

; 421  : 		pop ecx;

  0008d	59		 pop	 ecx

; 422  : 		pop eax;

  0008e	58		 pop	 eax

; 423  : 		jmp [addy2];

  0008f	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?addy2@@3HA
?ringsubstanceexechook_ASM@@YAXXZ ENDP			; ringsubstanceexechook_ASM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?ringtest@@YAXXZ
_TEXT	SEGMENT
_addy$1 = -24						; size = 4
_t$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?ringtest@@YAXXZ PROC					; ringtest, COMDAT

; 351  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00012	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 352  : 	TObjRingSubstance* t;
; 353  : 	__asm mov [t], esi;

  00028	89 75 f4	 mov	 DWORD PTR _t$[ebp], esi
  0002b	8b 45 f4	 mov	 eax, DWORD PTR _t$[ebp]
  0002e	0f be 88 ca 00
	00 00		 movsx	 ecx, BYTE PTR [eax+202]
  00035	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00038	ba 01 00 00 00	 mov	 edx, 1
  0003d	d3 e2		 shl	 edx, cl
  0003f	8b 45 f4	 mov	 eax, DWORD PTR _t$[ebp]
  00042	8b 88 d8 00 00
	00		 mov	 ecx, DWORD PTR [eax+216]
  00048	8b 41 54	 mov	 eax, DWORD PTR [ecx+84]
  0004b	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  0004e	8b 45 f4	 mov	 eax, DWORD PTR _t$[ebp]
  00051	0f be 80 ca 00
	00 00		 movsx	 eax, BYTE PTR [eax+202]
  00058	c1 f8 05	 sar	 eax, 5
  0005b	83 e0 03	 and	 eax, 3
  0005e	23 14 81	 and	 edx, DWORD PTR [ecx+eax*4]
  00061	75 0a		 jne	 SHORT $LN1@ringtest

; 354  : 	if (!((1 << (t->ringNo & 31)) &*(&t->pTObjSetRing->field_54->pStrage_HHC->gottenFlag + ((t->ringNo >> 5) & 3))))
; 355  : 	{
; 356  : 		int addy = 0x4832F0;

  00063	c7 45 e8 f0 32
	48 00		 mov	 DWORD PTR _addy$1[ebp], 4731632 ; 004832f0H

; 357  : 		__asm jmp [addy];

  0006a	ff 65 e8	 jmp	 DWORD PTR _addy$1[ebp]
$LN1@ringtest:

; 358  : 	}
; 359  : }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	33 cd		 xor	 ecx, ebp
  00075	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007a	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  00080	3b ec		 cmp	 ebp, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c3		 ret	 0
?ringtest@@YAXXZ ENDP					; ringtest
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?BobCatchPlayer_Hook@@YAXXZ
_TEXT	SEGMENT
?BobCatchPlayer_Hook@@YAXXZ PROC			; BobCatchPlayer_Hook, COMDAT

; 332  : 	static int addytrue = 0x45EEF7;
; 333  : 	static int addyfalse = 0x45EF41;
; 334  : 	__asm
; 335  : 	{
; 336  : 		mov ecx, [esi + 0x198];

  00000	8b 8e 98 01 00
	00		 mov	 ecx, DWORD PTR [esi+408]

; 337  : 		cmp eax, ecx;

  00006	3b c1		 cmp	 eax, ecx

; 338  : 		jne itsfalse;

  00008	75 02		 jne	 SHORT $itsfalse$3

; 339  : 		jmp itstrue;

  0000a	eb 06		 jmp	 SHORT $itstrue$4
$itsfalse$3:

; 340  : 
; 341  : 	itsfalse:
; 342  : 		jmp addyfalse;

  0000c	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?addyfalse@?1??BobCatchPlayer_Hook@@YAXXZ@4HA
$itstrue$4:

; 343  : 
; 344  : 	itstrue:
; 345  : 		cmp eax, 3;

  00012	83 f8 03	 cmp	 eax, 3

; 346  : 		jmp addytrue;

  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?addytrue@?1??BobCatchPlayer_Hook@@YAXXZ@4HA
?BobCatchPlayer_Hook@@YAXXZ ENDP			; BobCatchPlayer_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?SetBobsleigh_Hook2@@YAXHPADPAX1@Z
_TEXT	SEGMENT
_bobsleighID_HHC$ = 8					; size = 4
_BobsleighParam$ = 12					; size = 4
_a6$ = 16						; size = 4
_a7$ = 20						; size = 4
?SetBobsleigh_Hook2@@YAXHPADPAX1@Z PROC			; SetBobsleigh_Hook2, COMDAT

; 322  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 323  : 	*(float*)(BobsleighParam + 0x1C) = 0;

  00028	8b 45 0c	 mov	 eax, DWORD PTR _BobsleighParam$[ebp]
  0002b	0f 57 c0	 xorps	 xmm0, xmm0
  0002e	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 324  : 	myCodeSetBobsleigh2(bobsleighID_HHC, BobsleighParam, a6, a7);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 14	 mov	 eax, DWORD PTR _a7$[ebp]
  00038	50		 push	 eax
  00039	8b 4d 10	 mov	 ecx, DWORD PTR _a6$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 55 0c	 mov	 edx, DWORD PTR _BobsleighParam$[ebp]
  00040	52		 push	 edx
  00041	8b 45 08	 mov	 eax, DWORD PTR _bobsleighID_HHC$[ebp]
  00044	50		 push	 eax
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR ?myCodeSetBobsleigh2@@3P6AXHPADPAX1@ZA ; myCodeSetBobsleigh2
  0004b	83 c4 10	 add	 esp, 16			; 00000010H
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 325  : 	*(int*)(BobsleighParam + 0x38) = 1;

  00055	8b 45 0c	 mov	 eax, DWORD PTR _BobsleighParam$[ebp]
  00058	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 326  : 	*(float*)(BobsleighParam + 0x1C) = 0.5;

  0005f	8b 45 0c	 mov	 eax, DWORD PTR _BobsleighParam$[ebp]
  00062	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0006a	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 327  : 	bobsleighID_HHC = 4;

  0006f	c7 45 08 04 00
	00 00		 mov	 DWORD PTR _bobsleighID_HHC$[ebp], 4

; 328  : 	myCodeSetBobsleigh2(bobsleighID_HHC, BobsleighParam, a6, a7);

  00076	8b f4		 mov	 esi, esp
  00078	8b 45 14	 mov	 eax, DWORD PTR _a7$[ebp]
  0007b	50		 push	 eax
  0007c	8b 4d 10	 mov	 ecx, DWORD PTR _a6$[ebp]
  0007f	51		 push	 ecx
  00080	8b 55 0c	 mov	 edx, DWORD PTR _BobsleighParam$[ebp]
  00083	52		 push	 edx
  00084	8b 45 08	 mov	 eax, DWORD PTR _bobsleighID_HHC$[ebp]
  00087	50		 push	 eax
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR ?myCodeSetBobsleigh2@@3P6AXHPADPAX1@ZA ; myCodeSetBobsleigh2
  0008e	83 c4 10	 add	 esp, 16			; 00000010H
  00091	3b f4		 cmp	 esi, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 329  : }

  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
?SetBobsleigh_Hook2@@YAXHPADPAX1@Z ENDP			; SetBobsleigh_Hook2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?SetBobsleigh_Hook@@YAXHPAD@Z
_TEXT	SEGMENT
_bobsleighID_HHC$ = 8					; size = 4
_BobsleighParam$ = 12					; size = 4
?SetBobsleigh_Hook@@YAXHPAD@Z PROC			; SetBobsleigh_Hook, COMDAT

; 313  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 314  : 	*(float*)(BobsleighParam + 0x1C) = 0;

  00028	8b 45 0c	 mov	 eax, DWORD PTR _BobsleighParam$[ebp]
  0002b	0f 57 c0	 xorps	 xmm0, xmm0
  0002e	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 315  : 	myCodeSetBobsleigh(bobsleighID_HHC, BobsleighParam);

  00033	8b f4		 mov	 esi, esp
  00035	8b 45 0c	 mov	 eax, DWORD PTR _BobsleighParam$[ebp]
  00038	50		 push	 eax
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _bobsleighID_HHC$[ebp]
  0003c	51		 push	 ecx
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR ?myCodeSetBobsleigh@@3P6AXHPAD@ZA ; myCodeSetBobsleigh
  00043	83 c4 08	 add	 esp, 8
  00046	3b f4		 cmp	 esi, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 316  : 	*(int*)(BobsleighParam + 0x38) = 1;

  0004d	8b 45 0c	 mov	 eax, DWORD PTR _BobsleighParam$[ebp]
  00050	c7 40 38 01 00
	00 00		 mov	 DWORD PTR [eax+56], 1

; 317  : 	*(float*)(BobsleighParam + 0x1C) = 1;

  00057	8b 45 0c	 mov	 eax, DWORD PTR _BobsleighParam$[ebp]
  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00062	f3 0f 11 40 1c	 movss	 DWORD PTR [eax+28], xmm0

; 318  : 	bobsleighID_HHC = 4;

  00067	c7 45 08 04 00
	00 00		 mov	 DWORD PTR _bobsleighID_HHC$[ebp], 4

; 319  : 	myCodeSetBobsleigh(bobsleighID_HHC, BobsleighParam);

  0006e	8b f4		 mov	 esi, esp
  00070	8b 45 0c	 mov	 eax, DWORD PTR _BobsleighParam$[ebp]
  00073	50		 push	 eax
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _bobsleighID_HHC$[ebp]
  00077	51		 push	 ecx
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR ?myCodeSetBobsleigh@@3P6AXHPAD@ZA ; myCodeSetBobsleigh
  0007e	83 c4 08	 add	 esp, 8
  00081	3b f4		 cmp	 esi, esp
  00083	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 320  : }

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00091	3b ec		 cmp	 ebp, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
?SetBobsleigh_Hook@@YAXHPAD@Z ENDP			; SetBobsleigh_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?dirtygotogamechallengepatch@@YAXXZ
_TEXT	SEGMENT
?dirtygotogamechallengepatch@@YAXXZ PROC		; dirtygotogamechallengepatch, COMDAT

; 306  : 	__asm
; 307  : 	{
; 308  : 		mov layoutTeamKind, eax

  00000	a3 00 00 00 00	 mov	 DWORD PTR ?layoutTeamKind@@3HA, eax ; layoutTeamKind

; 309  : 		jmp address2;

  00005	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?address2@@3HA ; address2
?dirtygotogamechallengepatch@@YAXXZ ENDP		; dirtygotogamechallengepatch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?superdirtybinpatch@@YAXXZ
_TEXT	SEGMENT
?superdirtybinpatch@@YAXXZ PROC				; superdirtybinpatch, COMDAT

; 296  : 	__asm
; 297  : 	{
; 298  : 		mov eax, layoutTeamKind;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?layoutTeamKind@@3HA ; layoutTeamKind

; 299  : 		cmp eax, 4;

  00005	83 f8 04	 cmp	 eax, 4

; 300  : 		jmp address;

  00008	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?address@@3HA	; address
?superdirtybinpatch@@YAXXZ ENDP				; superdirtybinpatch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?ADV_2P_ExecSelect2@@YAXXZ
_TEXT	SEGMENT
?ADV_2P_ExecSelect2@@YAXXZ PROC				; ADV_2P_ExecSelect2, COMDAT

; 285  : 	__asm
; 286  : 	{
; 287  : 		push eax;

  00000	50		 push	 eax

; 288  : 		call ADV_2P_ExecSelect2_Tramp;

  00001	e8 00 00 00 00	 call	 ?ADV_2P_ExecSelect2_Tramp@@YAXPAUADV_2P@@@Z ; ADV_2P_ExecSelect2_Tramp

; 289  : 		add esp, 0x4;

  00006	83 c4 04	 add	 esp, 4

; 290  : 		ret;

  00009	c3		 ret	 0
?ADV_2P_ExecSelect2@@YAXXZ ENDP				; ADV_2P_ExecSelect2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?ADV_2P_ExecSelect2_Tramp@@YAXPAUADV_2P@@@Z
_TEXT	SEGMENT
_a1$ = 8						; size = 4
?ADV_2P_ExecSelect2_Tramp@@YAXPAUADV_2P@@@Z PROC	; ADV_2P_ExecSelect2_Tramp, COMDAT

; 274  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 275  : 	__asm
; 276  : 	{
; 277  : 		mov eax, a1;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]

; 278  : 		call myCode3;

  00021	ff 15 00 00 00
	00		 call	 DWORD PTR ?myCode3@@3P6AXPAX@ZA ; myCode3

; 279  : 	}
; 280  : 	team1 = a1->p1Team;

  00027	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0002a	8a 88 34 02 00
	00		 mov	 cl, BYTE PTR [eax+564]
  00030	88 0d 00 00 00
	00		 mov	 BYTE PTR ?team1@@3DA, cl ; team1

; 281  : 	team2 = a1->p2Team;

  00036	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  00039	8a 88 38 02 00
	00		 mov	 cl, BYTE PTR [eax+568]
  0003f	88 0d 00 00 00
	00		 mov	 BYTE PTR ?team2@@3DA, cl ; team2

; 282  : }

  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx
  00048	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?ADV_2P_ExecSelect2_Tramp@@YAXPAUADV_2P@@@Z ENDP	; ADV_2P_ExecSelect2_Tramp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?ADV_2P_Create_Tramp@@YAXPAUTObject@@@Z
_TEXT	SEGMENT
_a1$ = 8						; size = 4
?ADV_2P_Create_Tramp@@YAXPAUTObject@@@Z PROC		; ADV_2P_Create_Tramp, COMDAT

; 262  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 263  : 	
; 264  : 	//ADV_2P_Create();
; 265  : 	//__asm call myCode;
; 266  : 	myCode2(a1);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0002d	50		 push	 eax
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR ?myCode2@@3P6AXPAX@ZA ; myCode2
  00034	83 c4 04	 add	 esp, 4
  00037	3b f4		 cmp	 esi, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 267  : 	//((ADVERTISE_CONTROL*)((char*)(*Advertise.folder_HHC) + 0x18))->lastSubMode = 6;
; 268  : 	((ADVERTISE_CONTROL*)(a1->Child))->lastSubMode = 6;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  00041	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00044	c7 41 44 06 00
	00 00		 mov	 DWORD PTR [ecx+68], 6

; 269  : 	((ADVERTISE_CONTROL*)(a1->Child))->animCount = 14;

  0004b	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0004e	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00051	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41600000
  00059	f3 0f 11 41 34	 movss	 DWORD PTR [ecx+52], xmm0

; 270  : 	*(float*)0x7C933C = 13;

  0005e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41500000
  00066	f3 0f 11 05 3c
	93 7c 00	 movss	 DWORD PTR ds:8164156, xmm0

; 271  : 	//Advertise.lastSubMode = 6;
; 272  : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	5b		 pop	 ebx
  00071	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?ADV_2P_Create_Tramp@@YAXPAUTObject@@@Z ENDP		; ADV_2P_Create_Tramp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?ADV_2P_Create@@YAXXZ
_TEXT	SEGMENT
?ADV_2P_Create@@YAXXZ PROC				; ADV_2P_Create, COMDAT

; 256  : 	__asm
; 257  : 	{
; 258  : 		call myCode2;

  00000	ff 15 00 00 00
	00		 call	 DWORD PTR ?myCode2@@3P6AXPAX@ZA ; myCode2
?ADV_2P_Create@@YAXXZ ENDP				; ADV_2P_Create
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?CreateTrampoline@@YAPAXPAX0D@Z
_TEXT	SEGMENT
_data$1 = -73						; size = 1
_i$2 = -61						; size = 1
_nopAddress$3 = -52					; size = 4
_myCode$ = -40						; size = 4
_nopCount$ = -25					; size = 1
_Hooker$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_address$ = 8						; size = 4
_trampoline$ = 12					; size = 4
_overwriteSize$ = 16					; size = 1
?CreateTrampoline@@YAPAXPAX0D@Z PROC			; CreateTrampoline, COMDAT

; 228  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-272]
  00012	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 229  : 	Hook Hooker;
; 230  : 	char nopCount = overwriteSize - 0x5;

  00032	0f be 45 10	 movsx	 eax, BYTE PTR _overwriteSize$[ebp]
  00036	83 e8 05	 sub	 eax, 5
  00039	88 45 e7	 mov	 BYTE PTR _nopCount$[ebp], al

; 231  : 
; 232  : 	void* myCode = VirtualAlloc(nullptr, overwriteSize + 0x5, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);

  0003c	8b f4		 mov	 esi, esp
  0003e	6a 40		 push	 64			; 00000040H
  00040	68 00 30 00 00	 push	 12288			; 00003000H
  00045	0f be 45 10	 movsx	 eax, BYTE PTR _overwriteSize$[ebp]
  00049	83 c0 05	 add	 eax, 5
  0004c	50		 push	 eax
  0004d	6a 00		 push	 0
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualAlloc@16
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	89 45 d8	 mov	 DWORD PTR _myCode$[ebp], eax

; 233  : 	memcpy(myCode, address, overwriteSize);

  0005f	0f be 45 10	 movsx	 eax, BYTE PTR _overwriteSize$[ebp]
  00063	50		 push	 eax
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _address$[ebp]
  00067	51		 push	 ecx
  00068	8b 55 d8	 mov	 edx, DWORD PTR _myCode$[ebp]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 _memcpy
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  : 	if (nopCount)

  00074	0f be 45 e7	 movsx	 eax, BYTE PTR _nopCount$[ebp]
  00078	85 c0		 test	 eax, eax
  0007a	74 46		 je	 SHORT $LN5@CreateTram

; 235  : 	{
; 236  : 		void* nopAddress = (void*)((char*)address + (overwriteSize - nopCount));

  0007c	0f be 45 10	 movsx	 eax, BYTE PTR _overwriteSize$[ebp]
  00080	0f be 4d e7	 movsx	 ecx, BYTE PTR _nopCount$[ebp]
  00084	2b c1		 sub	 eax, ecx
  00086	03 45 08	 add	 eax, DWORD PTR _address$[ebp]
  00089	89 45 cc	 mov	 DWORD PTR _nopAddress$3[ebp], eax

; 237  : 		for (char i = 0; i < nopCount; ++i)

  0008c	c6 45 c3 00	 mov	 BYTE PTR _i$2[ebp], 0
  00090	eb 08		 jmp	 SHORT $LN4@CreateTram
$LN2@CreateTram:
  00092	8a 45 c3	 mov	 al, BYTE PTR _i$2[ebp]
  00095	04 01		 add	 al, 1
  00097	88 45 c3	 mov	 BYTE PTR _i$2[ebp], al
$LN4@CreateTram:
  0009a	0f be 45 c3	 movsx	 eax, BYTE PTR _i$2[ebp]
  0009e	0f be 4d e7	 movsx	 ecx, BYTE PTR _nopCount$[ebp]
  000a2	3b c1		 cmp	 eax, ecx
  000a4	7d 1c		 jge	 SHORT $LN5@CreateTram

; 238  : 		{
; 239  : 			{
; 240  : 				char data[] = { 0x90 };

  000a6	c6 45 b7 90	 mov	 BYTE PTR _data$1[ebp], -112 ; ffffff90H

; 241  : 				Hooker.WritePatch((void*)((char*)nopAddress + i), data, 1);

  000aa	6a 01		 push	 1
  000ac	8d 45 b7	 lea	 eax, DWORD PTR _data$1[ebp]
  000af	50		 push	 eax
  000b0	0f be 4d c3	 movsx	 ecx, BYTE PTR _i$2[ebp]
  000b4	03 4d cc	 add	 ecx, DWORD PTR _nopAddress$3[ebp]
  000b7	51		 push	 ecx
  000b8	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  000bb	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 242  : 			}
; 243  : 		}

  000c0	eb d0		 jmp	 SHORT $LN2@CreateTram
$LN5@CreateTram:

; 244  : 	}
; 245  : 	Hooker.WriteJMP(address, trampoline);

  000c2	8b 45 0c	 mov	 eax, DWORD PTR _trampoline$[ebp]
  000c5	50		 push	 eax
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _address$[ebp]
  000c9	51		 push	 ecx
  000ca	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  000cd	e8 00 00 00 00	 call	 ?WriteJMP@Hook@@QAE_NPAX0@Z ; Hook::WriteJMP

; 246  : 	Hooker.WriteJMP((void*)((char*)myCode + overwriteSize), (void*)((char*)address + overwriteSize));

  000d2	0f be 45 10	 movsx	 eax, BYTE PTR _overwriteSize$[ebp]
  000d6	03 45 08	 add	 eax, DWORD PTR _address$[ebp]
  000d9	50		 push	 eax
  000da	0f be 4d 10	 movsx	 ecx, BYTE PTR _overwriteSize$[ebp]
  000de	03 4d d8	 add	 ecx, DWORD PTR _myCode$[ebp]
  000e1	51		 push	 ecx
  000e2	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  000e5	e8 00 00 00 00	 call	 ?WriteJMP@Hook@@QAE_NPAX0@Z ; Hook::WriteJMP

; 247  : 	return myCode;

  000ea	8b 45 d8	 mov	 eax, DWORD PTR _myCode$[ebp]

; 248  : }

  000ed	52		 push	 edx
  000ee	8b cd		 mov	 ecx, ebp
  000f0	50		 push	 eax
  000f1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@CreateTram
  000f7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000fc	58		 pop	 eax
  000fd	5a		 pop	 edx
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx
  00101	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00104	33 cd		 xor	 ecx, ebp
  00106	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010b	81 c4 10 01 00
	00		 add	 esp, 272		; 00000110H
  00111	3b ec		 cmp	 ebp, esp
  00113	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c3		 ret	 0
$LN10@CreateTram:
  0011c	02 00 00 00	 DD	 2
  00120	00 00 00 00	 DD	 $LN9@CreateTram
$LN9@CreateTram:
  00124	f0 ff ff ff	 DD	 -16			; fffffff0H
  00128	08 00 00 00	 DD	 8
  0012c	00 00 00 00	 DD	 $LN7@CreateTram
  00130	b7 ff ff ff	 DD	 -73			; ffffffb7H
  00134	01 00 00 00	 DD	 1
  00138	00 00 00 00	 DD	 $LN8@CreateTram
$LN8@CreateTram:
  0013c	64		 DB	 100			; 00000064H
  0013d	61		 DB	 97			; 00000061H
  0013e	74		 DB	 116			; 00000074H
  0013f	61		 DB	 97			; 00000061H
  00140	00		 DB	 0
$LN7@CreateTram:
  00141	48		 DB	 72			; 00000048H
  00142	6f		 DB	 111			; 0000006fH
  00143	6f		 DB	 111			; 0000006fH
  00144	6b		 DB	 107			; 0000006bH
  00145	65		 DB	 101			; 00000065H
  00146	72		 DB	 114			; 00000072H
  00147	00		 DB	 0
?CreateTrampoline@@YAPAXPAX0D@Z ENDP			; CreateTrampoline
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?IncChaotixClearItem_ASM@@YAXXZ
_TEXT	SEGMENT
?IncChaotixClearItem_ASM@@YAXXZ PROC			; IncChaotixClearItem_ASM, COMDAT

; 218  : 	__asm
; 219  : 	{
; 220  : 		push eax;

  00000	50		 push	 eax

; 221  : 		call IncChaotixClearItem;

  00001	e8 00 00 00 00	 call	 ?IncChaotixClearItem@@YAHPAUTObjTeam@@@Z ; IncChaotixClearItem

; 222  : 		add esp, 0x4;

  00006	83 c4 04	 add	 esp, 4

; 223  : 		ret

  00009	c3		 ret	 0
?IncChaotixClearItem_ASM@@YAXXZ ENDP			; IncChaotixClearItem_ASM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?SearchStartStageLocator_ASM@@YAXXZ
_TEXT	SEGMENT
?SearchStartStageLocator_ASM@@YAXXZ PROC		; SearchStartStageLocator_ASM, COMDAT

; 207  : 	__asm 
; 208  : 	{
; 209  : 		push eax;

  00000	50		 push	 eax

; 210  : 		call SearchStartStageLocator_Hook;

  00001	e8 00 00 00 00	 call	 ?SearchStartStageLocator_Hook@@YAPADH@Z ; SearchStartStageLocator_Hook

; 211  : 		add esp, 0x4;

  00006	83 c4 04	 add	 esp, 4

; 212  : 		ret

  00009	c3		 ret	 0
?SearchStartStageLocator_ASM@@YAXXZ ENDP		; SearchStartStageLocator_ASM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?IncChaotixClearItem@@YAHPAUTObjTeam@@@Z
_TEXT	SEGMENT
tv76 = -208						; size = 4
_t$ = 8							; size = 4
?IncChaotixClearItem@@YAHPAUTObjTeam@@@Z PROC		; IncChaotixClearItem, COMDAT

; 195  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 196  : 	int v1;
; 197  : 
; 198  : 	*(char*)0x9DD6F2 = *(char*)0x9DD70A;

  00028	a0 0a d7 9d 00	 mov	 al, BYTE PTR ds:10344202
  0002d	a2 f2 d6 9d 00	 mov	 BYTE PTR ds:10344178, al

; 199  : 	*(char*)0x9DD6F1 = *(char*)0x9DD709; //for now am lazy

  00032	a0 09 d7 9d 00	 mov	 al, BYTE PTR ds:10344201
  00037	a2 f1 d6 9d 00	 mov	 BYTE PTR ds:10344177, al

; 200  : 	*(char*)0x9DD6F0 = *(char*)0x9DD708;

  0003c	a0 08 d7 9d 00	 mov	 al, BYTE PTR ds:10344200
  00041	a2 f0 d6 9d 00	 mov	 BYTE PTR ds:10344176, al

; 201  : 
; 202  : 	return ++teamTOp[0]->chaotixClearItem;

  00046	b8 04 00 00 00	 mov	 eax, 4
  0004b	6b c8 00	 imul	 ecx, eax, 0
  0004e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  00054	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00057	8b 88 3c 02 00
	00		 mov	 ecx, DWORD PTR [eax+572]
  0005d	83 c1 01	 add	 ecx, 1
  00060	89 8d 30 ff ff
	ff		 mov	 DWORD PTR tv76[ebp], ecx
  00066	ba 04 00 00 00	 mov	 edx, 4
  0006b	6b c2 00	 imul	 eax, edx, 0
  0006e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  00074	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  00077	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv76[ebp]
  0007d	89 82 3c 02 00
	00		 mov	 DWORD PTR [edx+572], eax
  00083	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv76[ebp]

; 203  : }

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00092	3b ec		 cmp	 ebp, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c3		 ret	 0
?IncChaotixClearItem@@YAHPAUTObjTeam@@@Z ENDP		; IncChaotixClearItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT ?SearchStartStageLocator_Hook@@YAPADH@Z
_TEXT	SEGMENT
_v4$ = -32						; size = 4
_result$ = -20						; size = 4
_stageNoIndex_HHC$ = -8					; size = 4
_teamKind$ = 8						; size = 4
?SearchStartStageLocator_Hook@@YAPADH@Z PROC		; SearchStartStageLocator_Hook, COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00012	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 133  : 	unsigned int stageNoIndex_HHC; // ecx
; 134  : 	char* result; // eax
; 135  : 	unsigned int v4; // eax
; 136  : 	int playerNoIndex_HHC; // edx
; 137  : 	TObjTeam* v6; // eax
; 138  : 	int* v7; // eax
; 139  : 	
; 140  : 	stageNoIndex_HHC = 0;

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _stageNoIndex_HHC$[ebp], 0

; 141  : 	if (pModeSwitch->demoMode && *(int*)&DemoLocator[0x1C * teamKind + 0x18])

  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pModeSwitch@@3AAPAUMODESWITCH@@A ; pModeSwitch
  00034	8b 08		 mov	 ecx, DWORD PTR [eax]
  00036	0f be 51 18	 movsx	 edx, BYTE PTR [ecx+24]
  0003a	85 d2		 test	 edx, edx
  0003c	74 23		 je	 SHORT $LN4@SearchStar
  0003e	6b 45 08 1c	 imul	 eax, DWORD PTR _teamKind$[ebp], 28
  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?DemoLocator@@3AAPADA ; DemoLocator
  00048	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004a	83 7c 02 18 00	 cmp	 DWORD PTR [edx+eax+24], 0
  0004f	74 10		 je	 SHORT $LN4@SearchStar

; 142  : 	{
; 143  : 		return &DemoLocator[0x1C * teamKind];

  00051	6b 45 08 1c	 imul	 eax, DWORD PTR _teamKind$[ebp], 28
  00055	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?DemoLocator@@3AAPADA ; DemoLocator
  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005d	03 c2		 add	 eax, edx
  0005f	eb 5c		 jmp	 SHORT $LN1@SearchStar
$LN4@SearchStar:

; 144  : 	}
; 145  : 	/*if (pModeSwitch->is2PMode)
; 146  : 	{
; 147  : 		playerNoIndex_HHC = 0;
; 148  : 		while (1)
; 149  : 		{
; 150  : 			v6 = teamTOp[playerNoIndex_HHC];
; 151  : 			if (v6)
; 152  : 			{
; 153  : 				if (v6->teamKind == teamKind && stageNoIndex_HHC < 0x17)
; 154  : 				{
; 155  : 					break;
; 156  : 				}
; 157  : 			}
; 158  : 		LABEL_17:
; 159  : 			if (++playerNoIndex_HHC >= 4)
; 160  : 			{
; 161  : 				return 0;
; 162  : 			}
; 163  : 		}
; 164  : 		v7 = &gStartStageLocator2p[0xF * stageNoIndex_HHC];
; 165  : 		while (*v7 != Action.stageNo)
; 166  : 		{
; 167  : 			++stageNoIndex_HHC;
; 168  : 			v7 += 0xF;
; 169  : 			if (stageNoIndex_HHC >= 0x17)
; 170  : 			{
; 171  : 				goto LABEL_17;
; 172  : 			}
; 173  : 		}
; 174  : 		result = (char*)&gStartStageLocator2p[0xF * stageNoIndex_HHC + 1 + 7 * playerNoIndex_HHC];
; 175  : 	}*/
; 176  : 	//else
; 177  : 	{
; 178  : 		v4 = 0;

  00061	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _v4$[ebp], 0
$LN2@SearchStar:

; 179  : 		while (gStartStageLocator[v4] != Action.stageNo)

  00068	8b 45 e0	 mov	 eax, DWORD PTR _v4$[ebp]
  0006b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gStartStageLocator@@3PAHA ; gStartStageLocator
  00071	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?Action@@3AAUACTION@@A ; Action
  00077	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  0007a	3b 42 28	 cmp	 eax, DWORD PTR [edx+40]
  0007d	74 21		 je	 SHORT $LN3@SearchStar

; 180  : 		{
; 181  : 			v4 += 0x24;

  0007f	8b 45 e0	 mov	 eax, DWORD PTR _v4$[ebp]
  00082	83 c0 24	 add	 eax, 36			; 00000024H
  00085	89 45 e0	 mov	 DWORD PTR _v4$[ebp], eax

; 182  : 			++stageNoIndex_HHC;

  00088	8b 45 f8	 mov	 eax, DWORD PTR _stageNoIndex_HHC$[ebp]
  0008b	83 c0 01	 add	 eax, 1
  0008e	89 45 f8	 mov	 DWORD PTR _stageNoIndex_HHC$[ebp], eax

; 183  : 			if (v4 >= 0x57C)

  00091	81 7d e0 7c 05
	00 00		 cmp	 DWORD PTR _v4$[ebp], 1404 ; 0000057cH
  00098	72 04		 jb	 SHORT $LN5@SearchStar

; 184  : 			{
; 185  : 				return 0;

  0009a	33 c0		 xor	 eax, eax
  0009c	eb 1f		 jmp	 SHORT $LN1@SearchStar
$LN5@SearchStar:

; 186  : 
; 187  : 			}
; 188  : 		}

  0009e	eb c8		 jmp	 SHORT $LN2@SearchStar
$LN3@SearchStar:

; 189  : 		result = (char*)&gStartStageLocator[0x24 * stageNoIndex_HHC + 1 + 7 * layoutTeamKind];

  000a0	6b 45 f8 24	 imul	 eax, DWORD PTR _stageNoIndex_HHC$[ebp], 36
  000a4	6b 0d 00 00 00
	00 07		 imul	 ecx, DWORD PTR ?layoutTeamKind@@3HA, 7 ; layoutTeamKind
  000ab	8d 54 08 01	 lea	 edx, DWORD PTR [eax+ecx+1]
  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gStartStageLocator@@3PAHA ; gStartStageLocator
  000b4	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  000b7	89 4d ec	 mov	 DWORD PTR _result$[ebp], ecx

; 190  : 	}
; 191  : 	return result;

  000ba	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]
$LN1@SearchStar:

; 192  : }

  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  000c6	3b ec		 cmp	 ebp, esp
  000c8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c3		 ret	 0
?SearchStartStageLocator_Hook@@YAPADH@Z ENDP		; SearchStartStageLocator_Hook
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT _DllMain@12
_TEXT	SEGMENT
tv64 = -196						; size = 4
_hModule$ = 8						; size = 4
_ul_reason_for_call$ = 12				; size = 4
_lpReserved$ = 16					; size = 4
_DllMain@12 PROC					; COMDAT

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 102  : 	switch (ul_reason_for_call)

  00028	8b 45 0c	 mov	 eax, DWORD PTR _ul_reason_for_call$[ebp]
  0002b	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv64[ebp], eax

; 103  : 	{
; 104  : 		case DLL_PROCESS_ATTACH:
; 105  : 		{
; 106  : 			//Init();
; 107  : 			break;
; 108  : 		}
; 109  : 		case DLL_THREAD_ATTACH:
; 110  : 		{
; 111  : 			break;
; 112  : 		}
; 113  : 		case DLL_THREAD_DETACH:
; 114  : 		{
; 115  : 			break;
; 116  : 		}
; 117  : 		case DLL_PROCESS_DETACH:
; 118  : 		{
; 119  : 			break;
; 120  : 		}
; 121  : 	}
; 122  : 	return TRUE;

  00031	b8 01 00 00 00	 mov	 eax, 1

; 123  : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
_DllMain@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\dllmain.cpp
;	COMDAT _Init
_TEXT	SEGMENT
_data$1 = -236						; size = 4
_data$2 = -224						; size = 7
_data$3 = -208						; size = 7
_data$4 = -192						; size = 6
_data$5 = -176						; size = 4
_data$6 = -161						; size = 1
_data$7 = -152						; size = 7
_data$8 = -136						; size = 2
_data$9 = -124						; size = 2
_data$10 = -112						; size = 3
_data$11 = -97						; size = 1
_data$12 = -85						; size = 1
_data$13 = -73						; size = 1
_data$14 = -61						; size = 1
_data$15 = -49						; size = 1
_data$16 = -37						; size = 1
_data$17 = -28						; size = 2
_Hooker$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_Init	PROC						; COMDAT

; 525  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 01 00
	00		 sub	 esp, 432		; 000001b0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 50 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-432]
  00012	b9 6c 00 00 00	 mov	 ecx, 108		; 0000006cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __1BA9ED96_dllmain@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 526  : 	Hook Hooker;
; 527  : 
; 528  : 	Hooker.Replace(0x5865E0, MakePlayersKeyData);

  00032	6a 00		 push	 0
  00034	68 00 00 00 00	 push	 OFFSET ?MakePlayersKeyData@@YAXXZ ; MakePlayersKeyData
  00039	68 e0 65 58 00	 push	 5793248			; 005865e0H
  0003e	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00041	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 529  : 	Hooker.Replace(0x435550, MakeGameKeyData);

  00046	6a 00		 push	 0
  00048	68 00 00 00 00	 push	 OFFSET ?MakeGameKeyData@@YAPAFXZ ; MakeGameKeyData
  0004d	68 50 55 43 00	 push	 4412752			; 00435550H
  00052	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00055	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 530  : 	Hooker.Replace(0x427510, MAIN::InitModules);

  0005a	6a 00		 push	 0
  0005c	68 00 00 00 00	 push	 OFFSET ?InitModules@MAIN@@SAHXZ ; MAIN::InitModules
  00061	68 10 75 42 00	 push	 4355344			; 00427510H
  00066	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00069	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 531  : 	Hooker.Replace(0x444D20, PCSpecific::SetupDInput);

  0006e	6a 00		 push	 0
  00070	68 00 00 00 00	 push	 OFFSET ?SetupDInput@PCSpecific@@YAJXZ ; PCSpecific::SetupDInput
  00075	68 20 4d 44 00	 push	 4476192			; 00444d20H
  0007a	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  0007d	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 532  : 	Hooker.Replace(0x5C9C10, ChangeModeFormationFly_Hook);

  00082	6a 00		 push	 0
  00084	68 00 00 00 00	 push	 OFFSET ?ChangeModeFormationFly_Hook@@YAXXZ ; ChangeModeFormationFly_Hook
  00089	68 10 9c 5c 00	 push	 6069264			; 005c9c10H
  0008e	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00091	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 533  : 	Hooker.Replace(0x463A60, SetArrowPosition_hook);

  00096	6a 00		 push	 0
  00098	68 00 00 00 00	 push	 OFFSET ?SetArrowPosition_hook@@YAXPAUTObjBobsleigh@@@Z ; SetArrowPosition_hook
  0009d	68 60 3a 46 00	 push	 4602464			; 00463a60H
  000a2	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  000a5	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 534  : 	Hooker.Replace(0x4198D0, CLASS_DVDREAD::Start);

  000aa	6a 00		 push	 0
  000ac	68 00 00 00 00	 push	 OFFSET ?Start@CLASS_DVDREAD@@YGPAHPAH@Z ; CLASS_DVDREAD::Start
  000b1	68 d0 98 41 00	 push	 4298960			; 004198d0H
  000b6	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  000b9	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 535  : 	Hooker.Replace(0x465BB0, initObjS31Bob);

  000be	6a 00		 push	 0
  000c0	68 00 00 00 00	 push	 OFFSET ?initObjS31Bob@@YAXXZ ; initObjS31Bob
  000c5	68 b0 5b 46 00	 push	 4610992			; 00465bb0H
  000ca	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  000cd	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 536  : 	Hooker.Replace(0x5B3917, arrowdisptest_hook);

  000d2	6a 00		 push	 0
  000d4	68 00 00 00 00	 push	 OFFSET ?arrowdisptest_hook@@YAXXZ ; arrowdisptest_hook
  000d9	68 17 39 5b 00	 push	 5978391			; 005b3917H
  000de	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  000e1	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 537  : 	Hooker.Replace(0x404DB0, addFrame_Hook);

  000e6	6a 00		 push	 0
  000e8	68 00 00 00 00	 push	 OFFSET ?addFrame_Hook@@YAXHPAUACTION@@@Z ; addFrame_Hook
  000ed	68 b0 4d 40 00	 push	 4214192			; 00404db0H
  000f2	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  000f5	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 538  : 	//Hooker.Replace(0x40206E, initObjS31Bob);
; 539  : 	Hooker.Replace(0x43E1B0, setobjCheckRangeOut2_hook);

  000fa	6a 00		 push	 0
  000fc	68 00 00 00 00	 push	 OFFSET ?setobjCheckRangeOut2_hook@@YAXPAURwV3d@@M@Z ; setobjCheckRangeOut2_hook
  00101	68 b0 e1 43 00	 push	 4448688			; 0043e1b0H
  00106	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00109	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 540  : 	Hooker.Replace(0x503000, TObjS11Warp_Exec_Hook);

  0010e	6a 00		 push	 0
  00110	68 00 00 00 00	 push	 OFFSET ?TObjS11Warp_Exec_Hook@@YAXXZ ; TObjS11Warp_Exec_Hook
  00115	68 00 30 50 00	 push	 5255168			; 00503000H
  0011a	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  0011d	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 541  : 	Hooker.Replace(0x48AE70, TObjWarp_Exec_Hook);

  00122	6a 00		 push	 0
  00124	68 00 00 00 00	 push	 OFFSET ?TObjWarp_Exec_Hook@@YAXXZ ; TObjWarp_Exec_Hook
  00129	68 70 ae 48 00	 push	 4763248			; 0048ae70H
  0012e	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00131	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 542  : 	Hooker.Replace(0x404700, InitStageAndTeamInfo);

  00136	6a 00		 push	 0
  00138	68 00 00 00 00	 push	 OFFSET ?InitStageAndTeamInfo@@YAXXZ ; InitStageAndTeamInfo
  0013d	68 00 47 40 00	 push	 4212480			; 00404700H
  00142	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00145	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 543  : 	Hooker.Replace(0x426F10, SearchStartStageLocator_ASM);

  0014a	6a 00		 push	 0
  0014c	68 00 00 00 00	 push	 OFFSET ?SearchStartStageLocator_ASM@@YAXXZ ; SearchStartStageLocator_ASM
  00151	68 10 6f 42 00	 push	 4353808			; 00426f10H
  00156	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00159	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 544  : 	Hooker.Replace(0x4DA6AA, TObjTrainCore_Exec_ASM);

  0015e	6a 00		 push	 0
  00160	68 00 00 00 00	 push	 OFFSET ?TObjTrainCore_Exec_ASM@@YAXXZ ; TObjTrainCore_Exec_ASM
  00165	68 aa a6 4d 00	 push	 5088938			; 004da6aaH
  0016a	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  0016d	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 545  : 
; 546  : 
; 547  : 
; 548  : 	// Dirty Hax For Now //
; 549  : 	{
; 550  : 		short data = 0x9090;

  00172	b8 90 90 ff ff	 mov	 eax, -28528		; ffff9090H
  00177	66 89 45 e4	 mov	 WORD PTR _data$17[ebp], ax

; 551  : 		Hooker.WritePatch((void*)0x426F48, (char*)&data, 2); //multiplayer start position patch

  0017b	6a 02		 push	 2
  0017d	8d 45 e4	 lea	 eax, DWORD PTR _data$17[ebp]
  00180	50		 push	 eax
  00181	68 48 6f 42 00	 push	 4353864			; 00426f48H
  00186	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00189	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 552  : 	}
; 553  : 
; 554  : 	{
; 555  : 		char data = 0xEB;

  0018e	c6 45 db eb	 mov	 BYTE PTR _data$16[ebp], -21 ; ffffffebH

; 556  : 		Hooker.WritePatch((void*)0x557ADA, &data, 1); //Skip a check that calls TObjTeam::TObjTeam() if its not "2PMode" for team battles

  00192	6a 01		 push	 1
  00194	8d 45 db	 lea	 eax, DWORD PTR _data$16[ebp]
  00197	50		 push	 eax
  00198	68 da 7a 55 00	 push	 5602010			; 00557adaH
  0019d	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  001a0	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 557  : 	}
; 558  : 
; 559  : 	{
; 560  : 		char data = 0xEB;

  001a5	c6 45 cf eb	 mov	 BYTE PTR _data$15[ebp], -21 ; ffffffebH

; 561  : 		Hooker.WritePatch((void*)0x5AB053, &data, 1); //Skip a check that calls SetGame2PManager()

  001a9	6a 01		 push	 1
  001ab	8d 45 cf	 lea	 eax, DWORD PTR _data$15[ebp]
  001ae	50		 push	 eax
  001af	68 53 b0 5a 00	 push	 5943379			; 005ab053H
  001b4	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  001b7	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 562  : 	}
; 563  : 
; 564  : 	{
; 565  : 		char data = 0xEB;

  001bc	c6 45 c3 eb	 mov	 BYTE PTR _data$14[ebp], -21 ; ffffffebH

; 566  : 		Hooker.WritePatch((void*)0x41DD51, &data, 1);

  001c0	6a 01		 push	 1
  001c2	8d 45 c3	 lea	 eax, DWORD PTR _data$14[ebp]
  001c5	50		 push	 eax
  001c6	68 51 dd 41 00	 push	 4316497			; 0041dd51H
  001cb	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  001ce	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 567  : 	}
; 568  : 
; 569  : 	{
; 570  : 		char data = 0xEB;

  001d3	c6 45 b7 eb	 mov	 BYTE PTR _data$13[ebp], -21 ; ffffffebH

; 571  : 		Hooker.WritePatch((void*)0x5AB6EA, &data, 1); //Skip a check that calls SetGame2PManager()

  001d7	6a 01		 push	 1
  001d9	8d 45 b7	 lea	 eax, DWORD PTR _data$13[ebp]
  001dc	50		 push	 eax
  001dd	68 ea b6 5a 00	 push	 5945066			; 005ab6eaH
  001e2	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  001e5	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 572  : 	}
; 573  : 
; 574  : 	{
; 575  : 		char data = 0x06;

  001ea	c6 45 ab 06	 mov	 BYTE PTR _data$12[ebp], 6

; 576  : 		Hooker.WritePatch((void*)0x44737A, &data, 1); //bring up character select on first 2p page

  001ee	6a 01		 push	 1
  001f0	8d 45 ab	 lea	 eax, DWORD PTR _data$12[ebp]
  001f3	50		 push	 eax
  001f4	68 7a 73 44 00	 push	 4486010			; 0044737aH
  001f9	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  001fc	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 577  : 	}
; 578  : 
; 579  : 	{
; 580  : 		char data = 0x02;

  00201	c6 45 9f 02	 mov	 BYTE PTR _data$11[ebp], 2

; 581  : 		Hooker.WritePatch((void*)0x447C81, &data, 1); //goto challange after picking characters

  00205	6a 01		 push	 1
  00207	8d 45 9f	 lea	 eax, DWORD PTR _data$11[ebp]
  0020a	50		 push	 eax
  0020b	68 81 7c 44 00	 push	 4488321			; 00447c81H
  00210	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00213	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 582  : 	}
; 583  : 
; 584  : 	{
; 585  : 		char data[] = { 0xB1, 0x02, 0x90 };

  00218	c6 45 90 b1	 mov	 BYTE PTR _data$10[ebp], -79 ; ffffffb1H
  0021c	c6 45 91 02	 mov	 BYTE PTR _data$10[ebp+1], 2
  00220	c6 45 92 90	 mov	 BYTE PTR _data$10[ebp+2], -112 ; ffffff90H

; 586  : 		Hooker.WritePatch((void*)0x4BA322, data, 3); //allow p2 to control casino flippers

  00224	6a 03		 push	 3
  00226	8d 45 90	 lea	 eax, DWORD PTR _data$10[ebp]
  00229	50		 push	 eax
  0022a	68 22 a3 4b 00	 push	 4956962			; 004ba322H
  0022f	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00232	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 587  : 	}
; 588  : 
; 589  : 	{
; 590  : 		char data[] = { 0x90, 0x90 };

  00237	c6 45 84 90	 mov	 BYTE PTR _data$9[ebp], -112 ; ffffff90H
  0023b	c6 45 85 90	 mov	 BYTE PTR _data$9[ebp+1], -112 ; ffffff90H

; 591  : 		Hooker.WritePatch((void*)0x4029F2, data, 2); //dirty rank screen patch to make it show

  0023f	6a 02		 push	 2
  00241	8d 45 84	 lea	 eax, DWORD PTR _data$9[ebp]
  00244	50		 push	 eax
  00245	68 f2 29 40 00	 push	 4205042			; 004029f2H
  0024a	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  0024d	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 592  : 	}
; 593  : 
; 594  : 	{
; 595  : 		char data[] = { 0x90, 0x90 };

  00252	c6 85 78 ff ff
	ff 90		 mov	 BYTE PTR _data$8[ebp], -112 ; ffffff90H
  00259	c6 85 79 ff ff
	ff 90		 mov	 BYTE PTR _data$8[ebp+1], -112 ; ffffff90H

; 596  : 		Hooker.WritePatch((void*)0x402A21, data, 2); //dirty rank screen patch to make it show

  00260	6a 02		 push	 2
  00262	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _data$8[ebp]
  00268	50		 push	 eax
  00269	68 21 2a 40 00	 push	 4205089			; 00402a21H
  0026e	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00271	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 597  : 	}
; 598  : 
; 599  : 	{
; 600  : 		char data[]{ 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 }; // nop setobjdestroy for train after breaking

  00276	c6 85 68 ff ff
	ff 90		 mov	 BYTE PTR _data$7[ebp], -112 ; ffffff90H
  0027d	c6 85 69 ff ff
	ff 90		 mov	 BYTE PTR _data$7[ebp+1], -112 ; ffffff90H
  00284	c6 85 6a ff ff
	ff 90		 mov	 BYTE PTR _data$7[ebp+2], -112 ; ffffff90H
  0028b	c6 85 6b ff ff
	ff 90		 mov	 BYTE PTR _data$7[ebp+3], -112 ; ffffff90H
  00292	c6 85 6c ff ff
	ff 90		 mov	 BYTE PTR _data$7[ebp+4], -112 ; ffffff90H
  00299	c6 85 6d ff ff
	ff 90		 mov	 BYTE PTR _data$7[ebp+5], -112 ; ffffff90H
  002a0	c6 85 6e ff ff
	ff 90		 mov	 BYTE PTR _data$7[ebp+6], -112 ; ffffff90H

; 601  : 		Hooker.WritePatch((void*)0x4DA6AF, data, 7);

  002a7	6a 07		 push	 7
  002a9	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _data$7[ebp]
  002af	50		 push	 eax
  002b0	68 af a6 4d 00	 push	 5088943			; 004da6afH
  002b5	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  002b8	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 602  : 	}
; 603  : 
; 604  : 	Hooker.WriteJMP((void*)0x43D167, superdirtybinpatch);

  002bd	68 00 00 00 00	 push	 OFFSET ?superdirtybinpatch@@YAXXZ ; superdirtybinpatch
  002c2	68 67 d1 43 00	 push	 4444519			; 0043d167H
  002c7	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  002ca	e8 00 00 00 00	 call	 ?WriteJMP@Hook@@QAE_NPAX0@Z ; Hook::WriteJMP

; 605  : 	Hooker.WriteJMP((void*)0x44B678, dirtygotogamechallengepatch);

  002cf	68 00 00 00 00	 push	 OFFSET ?dirtygotogamechallengepatch@@YAXXZ ; dirtygotogamechallengepatch
  002d4	68 78 b6 44 00	 push	 4503160			; 0044b678H
  002d9	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  002dc	e8 00 00 00 00	 call	 ?WriteJMP@Hook@@QAE_NPAX0@Z ; Hook::WriteJMP

; 606  : 	Hooker.WriteJMP((void*)0x5B48D0, IncChaotixClearItem_ASM);

  002e1	68 00 00 00 00	 push	 OFFSET ?IncChaotixClearItem_ASM@@YAXXZ ; IncChaotixClearItem_ASM
  002e6	68 d0 48 5b 00	 push	 5982416			; 005b48d0H
  002eb	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  002ee	e8 00 00 00 00	 call	 ?WriteJMP@Hook@@QAE_NPAX0@Z ; Hook::WriteJMP

; 607  : 	//Hooker.WriteJMP((void*)0x482FF3, ringsubstanceexechook_ASM);
; 608  : 	//Hooker.WriteJMP((void*)0x4833D6, RingSubstanceCheckCollisionHook_ASM);
; 609  : 	Hooker.WriteJMP((void*)0x47194C, WarpCameraAndPlayer_ASM);

  002f3	68 00 00 00 00	 push	 OFFSET ?WarpCameraAndPlayer_ASM@@YAXXZ ; WarpCameraAndPlayer_ASM
  002f8	68 4c 19 47 00	 push	 4659532			; 0047194cH
  002fd	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00300	e8 00 00 00 00	 call	 ?WriteJMP@Hook@@QAE_NPAX0@Z ; Hook::WriteJMP

; 610  : 
; 611  : 	{
; 612  : 		char data[] = { 0x90 };

  00305	c6 85 5f ff ff
	ff 90		 mov	 BYTE PTR _data$6[ebp], -112 ; ffffff90H

; 613  : 		Hooker.WritePatch((void*)0x43D16C, data, 1); //last byte left over to nop from previous JMP

  0030c	6a 01		 push	 1
  0030e	8d 85 5f ff ff
	ff		 lea	 eax, DWORD PTR _data$6[ebp]
  00314	50		 push	 eax
  00315	68 6c d1 43 00	 push	 4444524			; 0043d16cH
  0031a	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  0031d	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 614  : 	}
; 615  : 
; 616  : 	{
; 617  : 		char data[] = { 0x90, 0x90, 0x90, 0x90 };

  00322	c6 85 50 ff ff
	ff 90		 mov	 BYTE PTR _data$5[ebp], -112 ; ffffff90H
  00329	c6 85 51 ff ff
	ff 90		 mov	 BYTE PTR _data$5[ebp+1], -112 ; ffffff90H
  00330	c6 85 52 ff ff
	ff 90		 mov	 BYTE PTR _data$5[ebp+2], -112 ; ffffff90H
  00337	c6 85 53 ff ff
	ff 90		 mov	 BYTE PTR _data$5[ebp+3], -112 ; ffffff90H

; 618  : 		Hooker.WritePatch((void*)0x45EEF1, data, 4);

  0033e	6a 04		 push	 4
  00340	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _data$5[ebp]
  00346	50		 push	 eax
  00347	68 f1 ee 45 00	 push	 4583153			; 0045eef1H
  0034c	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  0034f	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 619  : 		Hooker.Replace(0x45EEEC, BobCatchPlayer_Hook);

  00354	6a 00		 push	 0
  00356	68 00 00 00 00	 push	 OFFSET ?BobCatchPlayer_Hook@@YAXXZ ; BobCatchPlayer_Hook
  0035b	68 ec ee 45 00	 push	 4583148			; 0045eeecH
  00360	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  00363	e8 00 00 00 00	 call	 ?Replace@Hook@@QAEXHPAXW4ConventionType@1@@Z ; Hook::Replace

; 620  : 	}
; 621  : 
; 622  : 	{
; 623  : 		char data[]{ 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 };

  00368	c6 85 40 ff ff
	ff 90		 mov	 BYTE PTR _data$4[ebp], -112 ; ffffff90H
  0036f	c6 85 41 ff ff
	ff 90		 mov	 BYTE PTR _data$4[ebp+1], -112 ; ffffff90H
  00376	c6 85 42 ff ff
	ff 90		 mov	 BYTE PTR _data$4[ebp+2], -112 ; ffffff90H
  0037d	c6 85 43 ff ff
	ff 90		 mov	 BYTE PTR _data$4[ebp+3], -112 ; ffffff90H
  00384	c6 85 44 ff ff
	ff 90		 mov	 BYTE PTR _data$4[ebp+4], -112 ; ffffff90H
  0038b	c6 85 45 ff ff
	ff 90		 mov	 BYTE PTR _data$4[ebp+5], -112 ; ffffff90H

; 624  : 		Hooker.WritePatch((void*)0x401858, data, 6);

  00392	6a 06		 push	 6
  00394	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR _data$4[ebp]
  0039a	50		 push	 eax
  0039b	68 58 18 40 00	 push	 4200536			; 00401858H
  003a0	8d 4d f0	 lea	 ecx, DWORD PTR _Hooker$[ebp]
  003a3	e8 00 00 00 00	 call	 ?WritePatch@Hook@@QAE_NPAXPADH@Z ; Hook::WritePatch

; 625  : 	}
; 626  : 
; 627  : 	{
; 628  : 		char data[]{ 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 };

  003a8	c6 85 30 ff ff
	ff 90		 mov	 BYTE PTR _data$3[ebp], -112 ; ffffff90H
  003af	c6 85 31 ff ff
	ff 90		 mov	 BYTE PTR _data$3[ebp+1], -112 ; ffffff90H
  003b6	c6 85 32 ff ff
	ff 90		 mov	 BYTE PTR _data$3[ebp+2], -112 ; ffffff90H
  003bd	c6 85 33 ff ff
	ff 90		 mov	 BYTE PTR _data$3[ebp+3], -112 ; ffffff90H
  003c4	c6 85 34 ff ff
	ff 90		 mov	 BYTE PTR _data$3[ebp+4], -112 ; ffffff90H
  003cb	c6 85 35 ff ff
	ff 90		 mov	 BYTE PTR _data$3[ebp+5], -112 ; ffffff90H
  003d2	c6 85 36 ff ff
	ff 90		 mov	 BYTE PTR _data$3[ebp+6], -112 ; ffffff90H

; 629  : 		//Hooker.WritePatch((void*)0x4833D6, data, 7);
; 630  : 	}
; 631  : 
; 632  : 	{
; 633  : 		char data[]{ 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 };

  003d9	c6 85 20 ff ff
	ff 90		 mov	 BYTE PTR _data$2[ebp], -112 ; ffffff90H
  003e0	c6 85 21 ff ff
	ff 90		 mov	 BYTE PTR _data$2[ebp+1], -112 ; ffffff90H
  003e7	c6 85 22 ff ff
	ff 90		 mov	 BYTE PTR _data$2[ebp+2], -112 ; ffffff90H
  003ee	c6 85 23 ff ff
	ff 90		 mov	 BYTE PTR _data$2[ebp+3], -112 ; ffffff90H
  003f5	c6 85 24 ff ff
	ff 90		 mov	 BYTE PTR _data$2[ebp+4], -112 ; ffffff90H
  003fc	c6 85 25 ff ff
	ff 90		 mov	 BYTE PTR _data$2[ebp+5], -112 ; ffffff90H
  00403	c6 85 26 ff ff
	ff 90		 mov	 BYTE PTR _data$2[ebp+6], -112 ; ffffff90H

; 634  : 		//Hooker.WritePatch((void*)0x483156, data, 7);
; 635  : 	}
; 636  : 
; 637  : 	{
; 638  : 		char data[]{ 0x90, 0x90, 0x90, 0x90 };

  0040a	c6 85 14 ff ff
	ff 90		 mov	 BYTE PTR _data$1[ebp], -112 ; ffffff90H
  00411	c6 85 15 ff ff
	ff 90		 mov	 BYTE PTR _data$1[ebp+1], -112 ; ffffff90H
  00418	c6 85 16 ff ff
	ff 90		 mov	 BYTE PTR _data$1[ebp+2], -112 ; ffffff90H
  0041f	c6 85 17 ff ff
	ff 90		 mov	 BYTE PTR _data$1[ebp+3], -112 ; ffffff90H

; 639  : 		//Hooker.WritePatch((void*)0x4823D6, data, 4);
; 640  : 	}
; 641  : 
; 642  : 	myCode2 = (void(__cdecl*)(void*))CreateTrampoline((void*)0x447280, ADV_2P_Create_Tramp, 7);

  00426	6a 07		 push	 7
  00428	68 00 00 00 00	 push	 OFFSET ?ADV_2P_Create_Tramp@@YAXPAUTObject@@@Z ; ADV_2P_Create_Tramp
  0042d	68 80 72 44 00	 push	 4485760			; 00447280H
  00432	e8 00 00 00 00	 call	 ?CreateTrampoline@@YAPAXPAX0D@Z ; CreateTrampoline
  00437	83 c4 0c	 add	 esp, 12			; 0000000cH
  0043a	a3 00 00 00 00	 mov	 DWORD PTR ?myCode2@@3P6AXPAX@ZA, eax ; myCode2

; 643  : 	myCode3 = (void(__cdecl*)(void*))CreateTrampoline((void*)0x447C10, ADV_2P_ExecSelect2, 10);

  0043f	6a 0a		 push	 10			; 0000000aH
  00441	68 00 00 00 00	 push	 OFFSET ?ADV_2P_ExecSelect2@@YAXXZ ; ADV_2P_ExecSelect2
  00446	68 10 7c 44 00	 push	 4488208			; 00447c10H
  0044b	e8 00 00 00 00	 call	 ?CreateTrampoline@@YAPAXPAX0D@Z ; CreateTrampoline
  00450	83 c4 0c	 add	 esp, 12			; 0000000cH
  00453	a3 00 00 00 00	 mov	 DWORD PTR ?myCode3@@3P6AXPAX@ZA, eax ; myCode3

; 644  : 	myCodeSetBobsleigh = (void(__cdecl*)(int, char*))CreateTrampoline((void*)0x45C9A0, SetBobsleigh_Hook, 7);

  00458	6a 07		 push	 7
  0045a	68 00 00 00 00	 push	 OFFSET ?SetBobsleigh_Hook@@YAXHPAD@Z ; SetBobsleigh_Hook
  0045f	68 a0 c9 45 00	 push	 4573600			; 0045c9a0H
  00464	e8 00 00 00 00	 call	 ?CreateTrampoline@@YAPAXPAX0D@Z ; CreateTrampoline
  00469	83 c4 0c	 add	 esp, 12			; 0000000cH
  0046c	a3 00 00 00 00	 mov	 DWORD PTR ?myCodeSetBobsleigh@@3P6AXHPAD@ZA, eax ; myCodeSetBobsleigh

; 645  : 	myCodeSetBobsleigh2 = (void(__cdecl*)(int, char*, void*, void*))CreateTrampoline((void*)0x45CA70, SetBobsleigh_Hook2, 7);

  00471	6a 07		 push	 7
  00473	68 00 00 00 00	 push	 OFFSET ?SetBobsleigh_Hook2@@YAXHPADPAX1@Z ; SetBobsleigh_Hook2
  00478	68 70 ca 45 00	 push	 4573808			; 0045ca70H
  0047d	e8 00 00 00 00	 call	 ?CreateTrampoline@@YAPAXPAX0D@Z ; CreateTrampoline
  00482	83 c4 0c	 add	 esp, 12			; 0000000cH
  00485	a3 00 00 00 00	 mov	 DWORD PTR ?myCodeSetBobsleigh2@@3P6AXHPADPAX1@ZA, eax ; myCodeSetBobsleigh2

; 646  : 
; 647  : }

  0048a	52		 push	 edx
  0048b	8b cd		 mov	 ecx, ebp
  0048d	50		 push	 eax
  0048e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN22@Init
  00494	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00499	58		 pop	 eax
  0049a	5a		 pop	 edx
  0049b	5f		 pop	 edi
  0049c	5e		 pop	 esi
  0049d	5b		 pop	 ebx
  0049e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004a1	33 cd		 xor	 ecx, ebp
  004a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004a8	81 c4 b0 01 00
	00		 add	 esp, 432		; 000001b0H
  004ae	3b ec		 cmp	 ebp, esp
  004b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004b5	8b e5		 mov	 esp, ebp
  004b7	5d		 pop	 ebp
  004b8	c3		 ret	 0
  004b9	0f 1f 00	 npad	 3
$LN22@Init:
  004bc	12 00 00 00	 DD	 18			; 00000012H
  004c0	00 00 00 00	 DD	 $LN21@Init
$LN21@Init:
  004c4	f0 ff ff ff	 DD	 -16			; fffffff0H
  004c8	08 00 00 00	 DD	 8
  004cc	00 00 00 00	 DD	 $LN3@Init
  004d0	e4 ff ff ff	 DD	 -28			; ffffffe4H
  004d4	02 00 00 00	 DD	 2
  004d8	00 00 00 00	 DD	 $LN4@Init
  004dc	db ff ff ff	 DD	 -37			; ffffffdbH
  004e0	01 00 00 00	 DD	 1
  004e4	00 00 00 00	 DD	 $LN5@Init
  004e8	cf ff ff ff	 DD	 -49			; ffffffcfH
  004ec	01 00 00 00	 DD	 1
  004f0	00 00 00 00	 DD	 $LN6@Init
  004f4	c3 ff ff ff	 DD	 -61			; ffffffc3H
  004f8	01 00 00 00	 DD	 1
  004fc	00 00 00 00	 DD	 $LN7@Init
  00500	b7 ff ff ff	 DD	 -73			; ffffffb7H
  00504	01 00 00 00	 DD	 1
  00508	00 00 00 00	 DD	 $LN8@Init
  0050c	ab ff ff ff	 DD	 -85			; ffffffabH
  00510	01 00 00 00	 DD	 1
  00514	00 00 00 00	 DD	 $LN9@Init
  00518	9f ff ff ff	 DD	 -97			; ffffff9fH
  0051c	01 00 00 00	 DD	 1
  00520	00 00 00 00	 DD	 $LN10@Init
  00524	90 ff ff ff	 DD	 -112			; ffffff90H
  00528	03 00 00 00	 DD	 3
  0052c	00 00 00 00	 DD	 $LN11@Init
  00530	84 ff ff ff	 DD	 -124			; ffffff84H
  00534	02 00 00 00	 DD	 2
  00538	00 00 00 00	 DD	 $LN12@Init
  0053c	78 ff ff ff	 DD	 -136			; ffffff78H
  00540	02 00 00 00	 DD	 2
  00544	00 00 00 00	 DD	 $LN13@Init
  00548	68 ff ff ff	 DD	 -152			; ffffff68H
  0054c	07 00 00 00	 DD	 7
  00550	00 00 00 00	 DD	 $LN14@Init
  00554	5f ff ff ff	 DD	 -161			; ffffff5fH
  00558	01 00 00 00	 DD	 1
  0055c	00 00 00 00	 DD	 $LN15@Init
  00560	50 ff ff ff	 DD	 -176			; ffffff50H
  00564	04 00 00 00	 DD	 4
  00568	00 00 00 00	 DD	 $LN16@Init
  0056c	40 ff ff ff	 DD	 -192			; ffffff40H
  00570	06 00 00 00	 DD	 6
  00574	00 00 00 00	 DD	 $LN17@Init
  00578	30 ff ff ff	 DD	 -208			; ffffff30H
  0057c	07 00 00 00	 DD	 7
  00580	00 00 00 00	 DD	 $LN18@Init
  00584	20 ff ff ff	 DD	 -224			; ffffff20H
  00588	07 00 00 00	 DD	 7
  0058c	00 00 00 00	 DD	 $LN19@Init
  00590	14 ff ff ff	 DD	 -236			; ffffff14H
  00594	04 00 00 00	 DD	 4
  00598	00 00 00 00	 DD	 $LN20@Init
$LN20@Init:
  0059c	64		 DB	 100			; 00000064H
  0059d	61		 DB	 97			; 00000061H
  0059e	74		 DB	 116			; 00000074H
  0059f	61		 DB	 97			; 00000061H
  005a0	00		 DB	 0
$LN19@Init:
  005a1	64		 DB	 100			; 00000064H
  005a2	61		 DB	 97			; 00000061H
  005a3	74		 DB	 116			; 00000074H
  005a4	61		 DB	 97			; 00000061H
  005a5	00		 DB	 0
$LN18@Init:
  005a6	64		 DB	 100			; 00000064H
  005a7	61		 DB	 97			; 00000061H
  005a8	74		 DB	 116			; 00000074H
  005a9	61		 DB	 97			; 00000061H
  005aa	00		 DB	 0
$LN17@Init:
  005ab	64		 DB	 100			; 00000064H
  005ac	61		 DB	 97			; 00000061H
  005ad	74		 DB	 116			; 00000074H
  005ae	61		 DB	 97			; 00000061H
  005af	00		 DB	 0
$LN16@Init:
  005b0	64		 DB	 100			; 00000064H
  005b1	61		 DB	 97			; 00000061H
  005b2	74		 DB	 116			; 00000074H
  005b3	61		 DB	 97			; 00000061H
  005b4	00		 DB	 0
$LN15@Init:
  005b5	64		 DB	 100			; 00000064H
  005b6	61		 DB	 97			; 00000061H
  005b7	74		 DB	 116			; 00000074H
  005b8	61		 DB	 97			; 00000061H
  005b9	00		 DB	 0
$LN14@Init:
  005ba	64		 DB	 100			; 00000064H
  005bb	61		 DB	 97			; 00000061H
  005bc	74		 DB	 116			; 00000074H
  005bd	61		 DB	 97			; 00000061H
  005be	00		 DB	 0
$LN13@Init:
  005bf	64		 DB	 100			; 00000064H
  005c0	61		 DB	 97			; 00000061H
  005c1	74		 DB	 116			; 00000074H
  005c2	61		 DB	 97			; 00000061H
  005c3	00		 DB	 0
$LN12@Init:
  005c4	64		 DB	 100			; 00000064H
  005c5	61		 DB	 97			; 00000061H
  005c6	74		 DB	 116			; 00000074H
  005c7	61		 DB	 97			; 00000061H
  005c8	00		 DB	 0
$LN11@Init:
  005c9	64		 DB	 100			; 00000064H
  005ca	61		 DB	 97			; 00000061H
  005cb	74		 DB	 116			; 00000074H
  005cc	61		 DB	 97			; 00000061H
  005cd	00		 DB	 0
$LN10@Init:
  005ce	64		 DB	 100			; 00000064H
  005cf	61		 DB	 97			; 00000061H
  005d0	74		 DB	 116			; 00000074H
  005d1	61		 DB	 97			; 00000061H
  005d2	00		 DB	 0
$LN9@Init:
  005d3	64		 DB	 100			; 00000064H
  005d4	61		 DB	 97			; 00000061H
  005d5	74		 DB	 116			; 00000074H
  005d6	61		 DB	 97			; 00000061H
  005d7	00		 DB	 0
$LN8@Init:
  005d8	64		 DB	 100			; 00000064H
  005d9	61		 DB	 97			; 00000061H
  005da	74		 DB	 116			; 00000074H
  005db	61		 DB	 97			; 00000061H
  005dc	00		 DB	 0
$LN7@Init:
  005dd	64		 DB	 100			; 00000064H
  005de	61		 DB	 97			; 00000061H
  005df	74		 DB	 116			; 00000074H
  005e0	61		 DB	 97			; 00000061H
  005e1	00		 DB	 0
$LN6@Init:
  005e2	64		 DB	 100			; 00000064H
  005e3	61		 DB	 97			; 00000061H
  005e4	74		 DB	 116			; 00000074H
  005e5	61		 DB	 97			; 00000061H
  005e6	00		 DB	 0
$LN5@Init:
  005e7	64		 DB	 100			; 00000064H
  005e8	61		 DB	 97			; 00000061H
  005e9	74		 DB	 116			; 00000074H
  005ea	61		 DB	 97			; 00000061H
  005eb	00		 DB	 0
$LN4@Init:
  005ec	64		 DB	 100			; 00000064H
  005ed	61		 DB	 97			; 00000061H
  005ee	74		 DB	 116			; 00000074H
  005ef	61		 DB	 97			; 00000061H
  005f0	00		 DB	 0
$LN3@Init:
  005f1	48		 DB	 72			; 00000048H
  005f2	6f		 DB	 111			; 0000006fH
  005f3	6f		 DB	 111			; 0000006fH
  005f4	6b		 DB	 107			; 0000006bH
  005f5	65		 DB	 101			; 00000065H
  005f6	72		 DB	 114			; 00000072H
  005f7	00		 DB	 0
_Init	ENDP
_TEXT	ENDS
END
