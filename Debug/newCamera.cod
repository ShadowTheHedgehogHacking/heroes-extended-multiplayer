; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28316.0 

	TITLE	C:\Users\DonutStopGaming\Desktop\Mod\newCamera.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?CameraModeTable@@3AAPADA			; CameraModeTable
PUBLIC	?CameraAdjustTable@@3AAPADA			; CameraAdjustTable
PUBLIC	?cameraTp@@3ABQAUTObjCamera@@B			; cameraTp
PUBLIC	?CameraParameterP@TObjCamera@@2QAPAUcameraParamType@1@A ; TObjCamera::CameraParameterP
PUBLIC	?CurrentCameraParameterP@TObjCamera@@2QAPAUcameraParamType@1@A ; TObjCamera::CurrentCameraParameterP
PUBLIC	?cameraParam@TObjCamera@@2QAUcameraParamType@1@A ; TObjCamera::cameraParam
PUBLIC	?maxCamera@TObjCamera@@2ABHB			; TObjCamera::maxCamera
PUBLIC	?currentCamera@TObjCamera@@2AAHA		; TObjCamera::currentCamera
msvcjmc	SEGMENT
__F2BDCE38_pch@h DB 01H
__6EE8A1C6_mod@pch DB 01H
__4F5C2835_newCamera@cpp DB 01H
__BB40F913_TObject@hpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
?CameraParameterP@TObjCamera@@2QAPAUcameraParamType@1@A DD 0a4ce98H ; TObjCamera::CameraParameterP
?CurrentCameraParameterP@TObjCamera@@2QAPAUcameraParamType@1@A DD 0a4cea8H ; TObjCamera::CurrentCameraParameterP
?cameraParam@TObjCamera@@2QAUcameraParamType@1@A DD 0a60c30H ; TObjCamera::cameraParam
CONST	ENDS
_DATA	SEGMENT
?CameraModeTable@@3AAPADA DD 0746700H			; CameraModeTable
?CameraAdjustTable@@3AAPADA DD 0746860H			; CameraAdjustTable
?cameraTp@@3ABQAUTObjCamera@@B DD 0a78d1cH		; cameraTp
?maxCamera@TObjCamera@@2ABHB DD 0a60be4H		; TObjCamera::maxCamera
?currentCamera@TObjCamera@@2AAHA DD 0a60be8H		; TObjCamera::currentCamera
_DATA	ENDS
PUBLIC	?WarpCameraAndPlayer@TObjCamera@@SAXPAURwV3d@@D@Z ; TObjCamera::WarpCameraAndPlayer
PUBLIC	?WarpCameraAndPlayerKeepRelativePosition@TObjCamera@@SAXHPAUsAngle@@PAURwV3d@@@Z ; TObjCamera::WarpCameraAndPlayerKeepRelativePosition
PUBLIC	?SetCameraEarthquake@TObjCamera@@SAHMH@Z	; TObjCamera::SetCameraEarthquake
PUBLIC	?EntryAdjustMode@TObjCamera@@QAE_NHW4MODE_TYPE@@@Z ; TObjCamera::EntryAdjustMode
PUBLIC	?GetCameraLevel@TObjCamera@@QAEHXZ		; TObjCamera::GetCameraLevel
PUBLIC	?GetCurrentCameraNumber@TObjCamera@@QAEHXZ	; TObjCamera::GetCurrentCameraNumber
PUBLIC	__JustMyCode_Default
PUBLIC	__real@3ff0000000000000
EXTRN	_memset:PROC
EXTRN	?RwMatrixTranslate@@YAPAURwMatrix@@PAU1@PAURwV3d@@W4RwOpCombineType@@@Z:PROC ; RwMatrixTranslate
EXTRN	?RwMatrixRotateOneMinusCosineSine@@YAPAURwMatrix@@PAU1@QAURwV3d@@MMW4RwOpCombineType@@@Z:PROC ; RwMatrixRotateOneMinusCosineSine
EXTRN	?GetCameraTargetPosition@TObjTeam@@QAEPAURwV3d@@XZ:PROC ; TObjTeam::GetCameraTargetPosition
EXTRN	?SetCameraTargetPositionHistory@TObjTeam@@QAEXPAURwV3d@@@Z:PROC ; TObjTeam::SetCameraTargetPositionHistory
EXTRN	?GetPlayerPositionHistory@PlayerMaster@@SAPAURwV3d@@HE@Z:PROC ; PlayerMaster::GetPlayerPositionHistory
EXTRN	?SetPlayerPosition@PlayerMaster@@SAXHEPAURwV3d@@PAUsAngle@@@Z:PROC ; PlayerMaster::SetPlayerPosition
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?gFormationPositionDat@@3PAHA:DWORD		; gFormationPositionDat
EXTRN	?teamTOp@@3PAPAUTObjTeam@@A:DWORD		; teamTOp
EXTRN	?pos_history@PlayerMaster@@2AAPAUpos_history_struct@1@A:DWORD ; PlayerMaster::pos_history
EXTRN	?n_history@PlayerMaster@@2PAEA:DWORD		; PlayerMaster::n_history
EXTRN	?playerTOp@@3QAPAUTObjPlayer@@A:DWORD		; playerTOp
EXTRN	?AxisZ@@3AAURwV3d@@A:DWORD			; AxisZ
EXTRN	?AxisX@@3AAURwV3d@@A:DWORD			; AxisX
EXTRN	?AxisY@@3AAURwV3d@@A:DWORD			; AxisY
EXTRN	?sine@@3ABQAMB:DWORD				; sine
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\newCamera.cpp
;	COMDAT ?GetCurrentCameraNumber@TObjCamera@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetCurrentCameraNumber@TObjCamera@@QAEHXZ PROC		; TObjCamera::GetCurrentCameraNumber, COMDAT
; _this$ = ecx

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __4F5C2835_newCamera@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 234  : 	return currentCamera;

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?currentCamera@TObjCamera@@2AAHA ; TObjCamera::currentCamera
  00032	8b 00		 mov	 eax, DWORD PTR [eax]

; 235  : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?GetCurrentCameraNumber@TObjCamera@@QAEHXZ ENDP		; TObjCamera::GetCurrentCameraNumber
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\newCamera.cpp
;	COMDAT ?GetCameraLevel@TObjCamera@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetCameraLevel@TObjCamera@@QAEHXZ PROC			; TObjCamera::GetCameraLevel, COMDAT
; _this$ = ecx

; 227  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __4F5C2835_newCamera@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 228  : 	return cameraParam[currentCamera].cameraLevel;

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?currentCamera@TObjCamera@@2AAHA ; TObjCamera::currentCamera
  00032	69 08 24 23 00
	00		 imul	 ecx, DWORD PTR [eax], 8996
  00038	8b 81 7c 0c a6
	00		 mov	 eax, DWORD PTR [ecx+10882172]

; 229  : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?GetCameraLevel@TObjCamera@@QAEHXZ ENDP			; TObjCamera::GetCameraLevel
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\newCamera.cpp
;	COMDAT ?EntryAdjustMode@TObjCamera@@QAE_NHW4MODE_TYPE@@@Z
_TEXT	SEGMENT
_v1$1 = -20						; size = 4
_this$ = -8						; size = 4
_cameraLevel$ = 8					; size = 4
_mode$ = 12						; size = 4
?EntryAdjustMode@TObjCamera@@QAE_NHW4MODE_TYPE@@@Z PROC	; TObjCamera::EntryAdjustMode, COMDAT
; _this$ = ecx

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __4F5C2835_newCamera@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 212  : 	if (cameraLevel <= GetCameraLevel())

  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?GetCameraLevel@TObjCamera@@QAEHXZ ; TObjCamera::GetCameraLevel
  00035	39 45 08	 cmp	 DWORD PTR _cameraLevel$[ebp], eax
  00038	0f 8f 99 00 00
	00		 jg	 $LN2@EntryAdjus

; 213  : 	{
; 214  : 		int v1 = (0x114 * cameraLevel) + (currentCamera * 0x2324);

  0003e	69 45 08 14 01
	00 00		 imul	 eax, DWORD PTR _cameraLevel$[ebp], 276
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?currentCamera@TObjCamera@@2AAHA ; TObjCamera::currentCamera
  0004b	69 11 24 23 00
	00		 imul	 edx, DWORD PTR [ecx], 8996
  00051	03 c2		 add	 eax, edx
  00053	89 45 ec	 mov	 DWORD PTR _v1$1[ebp], eax

; 215  : 		*&cameraParam[0].gap54[v1 + 0x113C] = mode;

  00056	b8 24 23 00 00	 mov	 eax, 8996		; 00002324H
  0005b	6b c8 00	 imul	 ecx, eax, 0
  0005e	8b 55 ec	 mov	 edx, DWORD PTR _v1$1[ebp]
  00061	8a 45 0c	 mov	 al, BYTE PTR _mode$[ebp]
  00064	88 84 11 c0 1d
	a6 00		 mov	 BYTE PTR [ecx+edx+10886592], al

; 216  : 		*&cameraParam[0].gap54[v1 + 0x1140] = 0;

  0006b	b8 24 23 00 00	 mov	 eax, 8996		; 00002324H
  00070	6b c8 00	 imul	 ecx, eax, 0
  00073	8b 55 ec	 mov	 edx, DWORD PTR _v1$1[ebp]
  00076	c6 84 11 c4 1d
	a6 00 00	 mov	 BYTE PTR [ecx+edx+10886596], 0

; 217  : 		*&cameraParam[0].gap54[v1 + 0x1144] = 0;

  0007e	b8 24 23 00 00	 mov	 eax, 8996		; 00002324H
  00083	6b c8 00	 imul	 ecx, eax, 0
  00086	8b 55 ec	 mov	 edx, DWORD PTR _v1$1[ebp]
  00089	c6 84 11 c8 1d
	a6 00 00	 mov	 BYTE PTR [ecx+edx+10886600], 0

; 218  : 		memset(&cameraParam[0].gap54[v1 + 0x1150], 0, 0x100u);

  00091	68 00 01 00 00	 push	 256			; 00000100H
  00096	6a 00		 push	 0
  00098	b8 24 23 00 00	 mov	 eax, 8996		; 00002324H
  0009d	6b c8 00	 imul	 ecx, eax, 0
  000a0	8b 55 ec	 mov	 edx, DWORD PTR _v1$1[ebp]
  000a3	8d 84 11 d4 1d
	a6 00		 lea	 eax, DWORD PTR [ecx+edx+10886612]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 _memset
  000b0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 219  : 		*&cameraParam[0].gap54[v1 + 0x1148] = CameraAdjustTable[2 * mode + 1];

  000b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?CameraAdjustTable@@3AAPADA ; CameraAdjustTable
  000b8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ba	ba 24 23 00 00	 mov	 edx, 8996		; 00002324H
  000bf	6b c2 00	 imul	 eax, edx, 0
  000c2	8b 55 ec	 mov	 edx, DWORD PTR _v1$1[ebp]
  000c5	8b 75 0c	 mov	 esi, DWORD PTR _mode$[ebp]
  000c8	8a 4c 71 01	 mov	 cl, BYTE PTR [ecx+esi*2+1]
  000cc	88 8c 10 cc 1d
	a6 00		 mov	 BYTE PTR [eax+edx+10886604], cl

; 220  : 		return true;

  000d3	b0 01		 mov	 al, 1
  000d5	eb 02		 jmp	 SHORT $LN1@EntryAdjus
$LN2@EntryAdjus:

; 221  : 	}
; 222  : 	return false;

  000d7	32 c0		 xor	 al, al
$LN1@EntryAdjus:

; 223  : }

  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	5b		 pop	 ebx
  000dc	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000e2	3b ec		 cmp	 ebp, esp
  000e4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c2 08 00	 ret	 8
?EntryAdjustMode@TObjCamera@@QAE_NHW4MODE_TYPE@@@Z ENDP	; TObjCamera::EntryAdjustMode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\newCamera.cpp
;	COMDAT ?SetCameraEarthquake@TObjCamera@@SAHMH@Z
_TEXT	SEGMENT
_a1$ = 8						; size = 4
_frameCount$ = 12					; size = 4
?SetCameraEarthquake@TObjCamera@@SAHMH@Z PROC		; TObjCamera::SetCameraEarthquake, COMDAT

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F5C2835_newCamera@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 203  : 	TObjCamera::cameraParam[currentCamera].earthquakeFrameCount = frameCount;

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?currentCamera@TObjCamera@@2AAHA ; TObjCamera::currentCamera
  0002d	69 08 24 23 00
	00		 imul	 ecx, DWORD PTR [eax], 8996
  00033	8b 55 0c	 mov	 edx, DWORD PTR _frameCount$[ebp]
  00036	89 91 70 0c a6
	00		 mov	 DWORD PTR [ecx+10882160], edx

; 204  : 	TObjCamera::cameraParam[currentCamera].earthquakeMagnitude = 1.0 / frameCount;

  0003c	f2 0f 2a 45 0c	 cvtsi2sd xmm0, DWORD PTR _frameCount$[ebp]
  00041	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00049	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0004d	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?currentCamera@TObjCamera@@2AAHA ; TObjCamera::currentCamera
  00056	69 08 24 23 00
	00		 imul	 ecx, DWORD PTR [eax], 8996
  0005c	f3 0f 11 81 74
	0c a6 00	 movss	 DWORD PTR [ecx+10882164], xmm0

; 205  : 	TObjCamera::cameraParam[currentCamera].earthquakeAmplitude = a1;

  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?currentCamera@TObjCamera@@2AAHA ; TObjCamera::currentCamera
  00069	69 08 24 23 00
	00		 imul	 ecx, DWORD PTR [eax], 8996
  0006f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _a1$[ebp]
  00074	f3 0f 11 81 78
	0c a6 00	 movss	 DWORD PTR [ecx+10882168], xmm0

; 206  : 	return currentCamera * 0x2324;

  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?currentCamera@TObjCamera@@2AAHA ; TObjCamera::currentCamera
  00081	69 00 24 23 00
	00		 imul	 eax, DWORD PTR [eax], 8996

; 207  : }

  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00090	3b ec		 cmp	 ebp, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
?SetCameraEarthquake@TObjCamera@@SAHMH@Z ENDP		; TObjCamera::SetCameraEarthquake
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\newCamera.cpp
;	COMDAT ?WarpCameraAndPlayerKeepRelativePosition@TObjCamera@@SAXHPAUsAngle@@PAURwV3d@@@Z
_TEXT	SEGMENT
tv382 = -530						; size = 2
_i$1 = -332						; size = 4
_i$2 = -320						; size = 4
_var$ = -308						; size = 36
_v37$ = -264						; size = 4
_matrix$ = -252						; size = 64
_v36$ = -180						; size = 4
_currentWarpTeamLeaderPlayerNo$ = -168			; size = 4
_v31$ = -156						; size = 4
_v30$ = -144						; size = 4
_result$ = -132						; size = 4
_v26$ = -120						; size = 4
_currentPlayerPosition$ = -108				; size = 4
_pCurrentPlayerIndex$ = -96				; size = 4
_currentWarpTeamPlayerNoIndex$ = -84			; size = 4
_oneMinusCosine$ = -72					; size = 4
_v10$ = -60						; size = 4
_v9$ = -45						; size = 1
_pCurrentWarpTeam$ = -12				; size = 4
__$ArrayPad$ = -4					; size = 4
_warpPlayerNo$ = 8					; size = 4
_a2$ = 12						; size = 4
_targetPosition$ = 16					; size = 4
?WarpCameraAndPlayerKeepRelativePosition@TObjCamera@@SAXHPAUsAngle@@PAURwV3d@@@Z PROC ; TObjCamera::WarpCameraAndPlayerKeepRelativePosition, COMDAT

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 02 00
	00		 sub	 esp, 532		; 00000214H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd ec fd ff
	ff		 lea	 edi, DWORD PTR [ebp-532]
  00012	b9 85 00 00 00	 mov	 ecx, 133		; 00000085H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __4F5C2835_newCamera@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 73   : 	TObjTeam* pCurrentWarpTeam;
; 74   : 	RwV3d* v6; // esi
; 75   : 	RwReal* v7; // ebp
; 76   : 	char v9;
; 77   : 	TObjPlayer* v10; // ecx
; 78   : 	RwReal oneMinusCosine; // ST14_4
; 79   : 	int currentWarpTeamPlayerNoIndex;
; 80   : 	TObjPlayer* pCurrentPlayerIndex;
; 81   : 	RwV3d* currentPlayerPosition;
; 82   : 	int v26;
; 83   : 	TObjTeam* result; // eax
; 84   : 	RwV3d* v30; // esi
; 85   : 	int v31;
; 86   : 	int currentWarpTeamLeaderPlayerNo; // [esp+24h] [ebp-14h]
; 87   : 	int v36; // [esp+28h] [ebp-10h]
; 88   : 	RwMatrix matrix; // [esp+48h] [ebp+10h]
; 89   : 
; 90   : 
; 91   : 	pCurrentWarpTeam = teamTOp[warpPlayerNo];

  00032	8b 45 08	 mov	 eax, DWORD PTR _warpPlayerNo$[ebp]
  00035	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  0003b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0003e	89 55 f4	 mov	 DWORD PTR _pCurrentWarpTeam$[ebp], edx

; 92   : 	currentWarpTeamLeaderPlayerNo = pCurrentWarpTeam->playerNo[(char)pCurrentWarpTeam->nowLeaderPlayerNo];

  00041	8b 45 f4	 mov	 eax, DWORD PTR _pCurrentWarpTeam$[ebp]
  00044	0f be 48 3b	 movsx	 ecx, BYTE PTR [eax+59]
  00048	8b 55 f4	 mov	 edx, DWORD PTR _pCurrentWarpTeam$[ebp]
  0004b	0f be 84 0a 10
	01 00 00	 movsx	 eax, BYTE PTR [edx+ecx+272]
  00053	89 85 58 ff ff
	ff		 mov	 DWORD PTR _currentWarpTeamLeaderPlayerNo$[ebp], eax

; 93   : 	RwV3d* v37 = PlayerMaster::GetPlayerPositionHistory(currentWarpTeamLeaderPlayerNo, 0);

  00059	6a 00		 push	 0
  0005b	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _currentWarpTeamLeaderPlayerNo$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?GetPlayerPositionHistory@PlayerMaster@@SAPAURwV3d@@HE@Z ; PlayerMaster::GetPlayerPositionHistory
  00067	83 c4 08	 add	 esp, 8
  0006a	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _v37$[ebp], eax

; 94   : 	RwV3d var[3];
; 95   : 	for (int i = 0; i < 3; ++i)

  00070	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$2[ebp], 0
  0007a	eb 0f		 jmp	 SHORT $LN4@WarpCamera
$LN2@WarpCamera:
  0007c	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _i$2[ebp]
  00082	83 c0 01	 add	 eax, 1
  00085	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _i$2[ebp], eax
$LN4@WarpCamera:
  0008b	83 bd c0 fe ff
	ff 03		 cmp	 DWORD PTR _i$2[ebp], 3
  00092	0f 8d aa 03 00
	00		 jge	 $LN3@WarpCamera

; 96   : 	{
; 97   : 		v9 = pCurrentWarpTeam->playerNo[i];

  00098	8b 45 f4	 mov	 eax, DWORD PTR _pCurrentWarpTeam$[ebp]
  0009b	03 85 c0 fe ff
	ff		 add	 eax, DWORD PTR _i$2[ebp]
  000a1	8a 88 10 01 00
	00		 mov	 cl, BYTE PTR [eax+272]
  000a7	88 4d d3	 mov	 BYTE PTR _v9$[ebp], cl

; 98   : 		v10 = playerTOp[v9];

  000aa	0f be 45 d3	 movsx	 eax, BYTE PTR _v9$[ebp]
  000ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?playerTOp@@3QAPAUTObjPlayer@@A ; playerTOp
  000b4	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000b7	89 55 c4	 mov	 DWORD PTR _v10$[ebp], edx

; 99   : 		if (v10)

  000ba	83 7d c4 00	 cmp	 DWORD PTR _v10$[ebp], 0
  000be	0f 84 79 03 00
	00		 je	 $LN12@WarpCamera

; 100  : 		{
; 101  : 			if (v10->mode != PlayerMode_Captured)

  000c4	8b 45 c4	 mov	 eax, DWORD PTR _v10$[ebp]
  000c7	0f bf 88 f4 00
	00 00		 movsx	 ecx, WORD PTR [eax+244]
  000ce	83 f9 26	 cmp	 ecx, 38			; 00000026H
  000d1	0f 84 66 03 00
	00		 je	 $LN12@WarpCamera

; 102  : 			{
; 103  : 				v10->C_COLLI.flag |= 0x100u;     // #inline C_COLLI::Ignore_On((void))

  000d7	8b 45 c4	 mov	 eax, DWORD PTR _v10$[ebp]
  000da	0f bf 48 34	 movsx	 ecx, WORD PTR [eax+52]
  000de	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  000e4	8b 55 c4	 mov	 edx, DWORD PTR _v10$[ebp]
  000e7	66 89 4a 34	 mov	 WORD PTR [edx+52], cx

; 104  : 				v10->PlayerFlag |= 0x200u;           // #inline TObjOldPlayer::SetFlagOfMoved((void))

  000eb	8b 45 c4	 mov	 eax, DWORD PTR _v10$[ebp]
  000ee	8b 88 bc 01 00
	00		 mov	 ecx, DWORD PTR [eax+444]
  000f4	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  000fa	8b 55 c4	 mov	 edx, DWORD PTR _v10$[ebp]
  000fd	89 8a bc 01 00
	00		 mov	 DWORD PTR [edx+444], ecx

; 105  : 				if (v9 != currentWarpTeamLeaderPlayerNo)

  00103	0f be 45 d3	 movsx	 eax, BYTE PTR _v9$[ebp]
  00107	3b 85 58 ff ff
	ff		 cmp	 eax, DWORD PTR _currentWarpTeamLeaderPlayerNo$[ebp]
  0010d	0f 84 2a 03 00
	00		 je	 $LN12@WarpCamera

; 106  : 				{
; 107  : 					v36 = playerTOp[v9]->role - 1;

  00113	0f be 45 d3	 movsx	 eax, BYTE PTR _v9$[ebp]
  00117	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?playerTOp@@3QAPAUTObjPlayer@@A ; playerTOp
  0011d	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00120	0f be 82 c1 00
	00 00		 movsx	 eax, BYTE PTR [edx+193]
  00127	83 e8 01	 sub	 eax, 1
  0012a	89 85 4c ff ff
	ff		 mov	 DWORD PTR _v36$[ebp], eax

; 108  : 					if (v36 < 0 || gFormationPositionDat[4 * (v36 + 2 * (pCurrentWarpTeam->teamKind + 5 * pCurrentWarpTeam->formationNo)) + 7] == 3) // #inline TObjTeam::GetFormation(const(void))

  00130	78 2a		 js	 SHORT $LN13@WarpCamera
  00132	8b 45 f4	 mov	 eax, DWORD PTR _pCurrentWarpTeam$[ebp]
  00135	6b 88 40 01 00
	00 05		 imul	 ecx, DWORD PTR [eax+320], 5
  0013c	8b 55 f4	 mov	 edx, DWORD PTR _pCurrentWarpTeam$[ebp]
  0013f	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  00142	03 c1		 add	 eax, ecx
  00144	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _v36$[ebp]
  0014a	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0014d	c1 e2 02	 shl	 edx, 2
  00150	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gFormationPositionDat@@3PAHA ; gFormationPositionDat
  00155	83 7c 90 1c 03	 cmp	 DWORD PTR [eax+edx*4+28], 3
  0015a	75 26		 jne	 SHORT $LN11@WarpCamera
$LN13@WarpCamera:

; 109  : 					{
; 110  : 						var[i] = *targetPosition;

  0015c	6b 85 c0 fe ff
	ff 0c		 imul	 eax, DWORD PTR _i$2[ebp], 12
  00163	8d 8c 05 cc fe
	ff ff		 lea	 ecx, DWORD PTR _var$[ebp+eax]
  0016a	8b 55 10	 mov	 edx, DWORD PTR _targetPosition$[ebp]
  0016d	8b 02		 mov	 eax, DWORD PTR [edx]
  0016f	89 01		 mov	 DWORD PTR [ecx], eax
  00171	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00174	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00177	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  0017a	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 111  : 					}

  0017d	e9 bb 02 00 00	 jmp	 $LN12@WarpCamera
$LN11@WarpCamera:

; 112  : 					else
; 113  : 					{
; 114  : 						var[i] = *PlayerMaster::GetPlayerPositionHistory(v9, 0);

  00182	6a 00		 push	 0
  00184	0f be 45 d3	 movsx	 eax, BYTE PTR _v9$[ebp]
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 ?GetPlayerPositionHistory@PlayerMaster@@SAPAURwV3d@@HE@Z ; PlayerMaster::GetPlayerPositionHistory
  0018e	83 c4 08	 add	 esp, 8
  00191	6b 8d c0 fe ff
	ff 0c		 imul	 ecx, DWORD PTR _i$2[ebp], 12
  00198	8d 94 0d cc fe
	ff ff		 lea	 edx, DWORD PTR _var$[ebp+ecx]
  0019f	8b 08		 mov	 ecx, DWORD PTR [eax]
  001a1	89 0a		 mov	 DWORD PTR [edx], ecx
  001a3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001a6	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  001a9	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001ac	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 115  : 						var[i].x = var[i].x - v37->x;

  001af	6b 85 c0 fe ff
	ff 0c		 imul	 eax, DWORD PTR _i$2[ebp], 12
  001b6	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _v37$[ebp]
  001bc	f3 0f 10 84 05
	cc fe ff ff	 movss	 xmm0, DWORD PTR _var$[ebp+eax]
  001c5	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  001c9	6b 95 c0 fe ff
	ff 0c		 imul	 edx, DWORD PTR _i$2[ebp], 12
  001d0	f3 0f 11 84 15
	cc fe ff ff	 movss	 DWORD PTR _var$[ebp+edx], xmm0

; 116  : 						var[i].y = var[i].y - v37->y;

  001d9	6b 85 c0 fe ff
	ff 0c		 imul	 eax, DWORD PTR _i$2[ebp], 12
  001e0	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _v37$[ebp]
  001e6	f3 0f 10 84 05
	d0 fe ff ff	 movss	 xmm0, DWORD PTR _var$[ebp+eax+4]
  001ef	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  001f4	6b 95 c0 fe ff
	ff 0c		 imul	 edx, DWORD PTR _i$2[ebp], 12
  001fb	f3 0f 11 84 15
	d0 fe ff ff	 movss	 DWORD PTR _var$[ebp+edx+4], xmm0

; 117  : 						var[i].z = var[i].z - v37->z;

  00204	6b 85 c0 fe ff
	ff 0c		 imul	 eax, DWORD PTR _i$2[ebp], 12
  0020b	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _v37$[ebp]
  00211	f3 0f 10 84 05
	d4 fe ff ff	 movss	 xmm0, DWORD PTR _var$[ebp+eax+8]
  0021a	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0021f	6b 95 c0 fe ff
	ff 0c		 imul	 edx, DWORD PTR _i$2[ebp], 12
  00226	f3 0f 11 84 15
	d4 fe ff ff	 movss	 DWORD PTR _var$[ebp+edx+8], xmm0

; 118  : 						
; 119  : 						if (a2)

  0022f	83 7d 0c 00	 cmp	 DWORD PTR _a2$[ebp], 0
  00233	0f 84 8d 01 00
	00		 je	 $LN14@WarpCamera

; 120  : 						{
; 121  : 							oneMinusCosine = 1.0 - sine[(unsigned short)(a2->z + 0x4000)];

  00239	8b 45 0c	 mov	 eax, DWORD PTR _a2$[ebp]
  0023c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0023f	81 c1 00 40 00
	00		 add	 ecx, 16384		; 00004000H
  00245	0f b7 d1	 movzx	 edx, cx
  00248	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sine@@3ABQAMB ; sine
  0024d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0024f	f3 0f 5a 04 91	 cvtss2sd xmm0, DWORD PTR [ecx+edx*4]
  00254	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0025c	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00260	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  00264	f3 0f 11 45 b8	 movss	 DWORD PTR _oneMinusCosine$[ebp], xmm0

; 122  : 							RwMatrixRotateOneMinusCosineSine(&matrix, &AxisZ, oneMinusCosine, sine[(unsigned short)a2->z], rwCOMBINEREPLACE);

  00269	6a 00		 push	 0
  0026b	8b 45 0c	 mov	 eax, DWORD PTR _a2$[ebp]
  0026e	0f b7 48 08	 movzx	 ecx, WORD PTR [eax+8]
  00272	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?sine@@3ABQAMB ; sine
  00278	8b 02		 mov	 eax, DWORD PTR [edx]
  0027a	51		 push	 ecx
  0027b	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [eax+ecx*4]
  00280	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00285	51		 push	 ecx
  00286	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _oneMinusCosine$[ebp]
  0028b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00290	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?AxisZ@@3AAURwV3d@@A ; AxisZ
  00296	51		 push	 ecx
  00297	8d 95 04 ff ff
	ff		 lea	 edx, DWORD PTR _matrix$[ebp]
  0029d	52		 push	 edx
  0029e	e8 00 00 00 00	 call	 ?RwMatrixRotateOneMinusCosineSine@@YAPAURwMatrix@@PAU1@QAURwV3d@@MMW4RwOpCombineType@@@Z ; RwMatrixRotateOneMinusCosineSine
  002a3	83 c4 14	 add	 esp, 20			; 00000014H

; 123  : 							oneMinusCosine = 1.0 - sine[(unsigned short)(a2->x + 0x4000)];

  002a6	8b 45 0c	 mov	 eax, DWORD PTR _a2$[ebp]
  002a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002ab	81 c1 00 40 00
	00		 add	 ecx, 16384		; 00004000H
  002b1	0f b7 d1	 movzx	 edx, cx
  002b4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sine@@3ABQAMB ; sine
  002b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  002bb	f3 0f 5a 04 91	 cvtss2sd xmm0, DWORD PTR [ecx+edx*4]
  002c0	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  002c8	f2 0f 5c c8	 subsd	 xmm1, xmm0
  002cc	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  002d0	f3 0f 11 45 b8	 movss	 DWORD PTR _oneMinusCosine$[ebp], xmm0

; 124  : 							RwMatrixRotateOneMinusCosineSine(&matrix, &AxisX, oneMinusCosine, sine[(unsigned short)a2->x], rwCOMBINEPRECONCA);

  002d5	6a 01		 push	 1
  002d7	8b 45 0c	 mov	 eax, DWORD PTR _a2$[ebp]
  002da	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  002dd	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?sine@@3ABQAMB ; sine
  002e3	8b 02		 mov	 eax, DWORD PTR [edx]
  002e5	51		 push	 ecx
  002e6	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [eax+ecx*4]
  002eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f0	51		 push	 ecx
  002f1	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _oneMinusCosine$[ebp]
  002f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?AxisX@@3AAURwV3d@@A ; AxisX
  00301	51		 push	 ecx
  00302	8d 95 04 ff ff
	ff		 lea	 edx, DWORD PTR _matrix$[ebp]
  00308	52		 push	 edx
  00309	e8 00 00 00 00	 call	 ?RwMatrixRotateOneMinusCosineSine@@YAPAURwMatrix@@PAU1@QAURwV3d@@MMW4RwOpCombineType@@@Z ; RwMatrixRotateOneMinusCosineSine
  0030e	83 c4 14	 add	 esp, 20			; 00000014H

; 125  : 							oneMinusCosine = 1.0 - sine[(unsigned short)(a2->y + 0x4000)];

  00311	8b 45 0c	 mov	 eax, DWORD PTR _a2$[ebp]
  00314	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00317	81 c1 00 40 00
	00		 add	 ecx, 16384		; 00004000H
  0031d	0f b7 d1	 movzx	 edx, cx
  00320	a1 00 00 00 00	 mov	 eax, DWORD PTR ?sine@@3ABQAMB ; sine
  00325	8b 08		 mov	 ecx, DWORD PTR [eax]
  00327	f3 0f 5a 04 91	 cvtss2sd xmm0, DWORD PTR [ecx+edx*4]
  0032c	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00334	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00338	f2 0f 5a c1	 cvtsd2ss xmm0, xmm1
  0033c	f3 0f 11 45 b8	 movss	 DWORD PTR _oneMinusCosine$[ebp], xmm0

; 126  : 							RwMatrixRotateOneMinusCosineSine(&matrix, &AxisY, oneMinusCosine, sine[(unsigned short)a2->y], rwCOMBINEPRECONCA);

  00341	6a 01		 push	 1
  00343	8b 45 0c	 mov	 eax, DWORD PTR _a2$[ebp]
  00346	0f b7 48 04	 movzx	 ecx, WORD PTR [eax+4]
  0034a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?sine@@3ABQAMB ; sine
  00350	8b 02		 mov	 eax, DWORD PTR [edx]
  00352	51		 push	 ecx
  00353	f3 0f 10 04 88	 movss	 xmm0, DWORD PTR [eax+ecx*4]
  00358	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035d	51		 push	 ecx
  0035e	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _oneMinusCosine$[ebp]
  00363	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00368	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?AxisY@@3AAURwV3d@@A ; AxisY
  0036e	51		 push	 ecx
  0036f	8d 95 04 ff ff
	ff		 lea	 edx, DWORD PTR _matrix$[ebp]
  00375	52		 push	 edx
  00376	e8 00 00 00 00	 call	 ?RwMatrixRotateOneMinusCosineSine@@YAPAURwMatrix@@PAU1@QAURwV3d@@MMW4RwOpCombineType@@@Z ; RwMatrixRotateOneMinusCosineSine
  0037b	83 c4 14	 add	 esp, 20			; 00000014H

; 127  : 							RwMatrixTranslate(&matrix, &var[i], rwCOMBINEPRECONCA);

  0037e	6a 01		 push	 1
  00380	6b 85 c0 fe ff
	ff 0c		 imul	 eax, DWORD PTR _i$2[ebp], 12
  00387	8d 8c 05 cc fe
	ff ff		 lea	 ecx, DWORD PTR _var$[ebp+eax]
  0038e	51		 push	 ecx
  0038f	8d 95 04 ff ff
	ff		 lea	 edx, DWORD PTR _matrix$[ebp]
  00395	52		 push	 edx
  00396	e8 00 00 00 00	 call	 ?RwMatrixTranslate@@YAPAURwMatrix@@PAU1@PAURwV3d@@W4RwOpCombineType@@@Z ; RwMatrixTranslate
  0039b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 128  : 							var[i] = matrix.pos;

  0039e	6b 85 c0 fe ff
	ff 0c		 imul	 eax, DWORD PTR _i$2[ebp], 12
  003a5	8d 8c 05 cc fe
	ff ff		 lea	 ecx, DWORD PTR _var$[ebp+eax]
  003ac	8b 95 34 ff ff
	ff		 mov	 edx, DWORD PTR _matrix$[ebp+48]
  003b2	89 11		 mov	 DWORD PTR [ecx], edx
  003b4	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _matrix$[ebp+52]
  003ba	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  003bd	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _matrix$[ebp+56]
  003c3	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$LN14@WarpCamera:

; 129  : 						}
; 130  : 						var[i].x = targetPosition->x + var[i].x;

  003c6	6b 85 c0 fe ff
	ff 0c		 imul	 eax, DWORD PTR _i$2[ebp], 12
  003cd	8b 4d 10	 mov	 ecx, DWORD PTR _targetPosition$[ebp]
  003d0	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  003d4	f3 0f 58 84 05
	cc fe ff ff	 addss	 xmm0, DWORD PTR _var$[ebp+eax]
  003dd	6b 95 c0 fe ff
	ff 0c		 imul	 edx, DWORD PTR _i$2[ebp], 12
  003e4	f3 0f 11 84 15
	cc fe ff ff	 movss	 DWORD PTR _var$[ebp+edx], xmm0

; 131  : 						var[i].y = targetPosition->y + var[i].y;

  003ed	6b 85 c0 fe ff
	ff 0c		 imul	 eax, DWORD PTR _i$2[ebp], 12
  003f4	8b 4d 10	 mov	 ecx, DWORD PTR _targetPosition$[ebp]
  003f7	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  003fc	f3 0f 58 84 05
	d0 fe ff ff	 addss	 xmm0, DWORD PTR _var$[ebp+eax+4]
  00405	6b 95 c0 fe ff
	ff 0c		 imul	 edx, DWORD PTR _i$2[ebp], 12
  0040c	f3 0f 11 84 15
	d0 fe ff ff	 movss	 DWORD PTR _var$[ebp+edx+4], xmm0

; 132  : 						var[i].z = targetPosition->z + var[i].z;

  00415	6b 85 c0 fe ff
	ff 0c		 imul	 eax, DWORD PTR _i$2[ebp], 12
  0041c	8b 4d 10	 mov	 ecx, DWORD PTR _targetPosition$[ebp]
  0041f	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00424	f3 0f 58 84 05
	d4 fe ff ff	 addss	 xmm0, DWORD PTR _var$[ebp+eax+8]
  0042d	6b 95 c0 fe ff
	ff 0c		 imul	 edx, DWORD PTR _i$2[ebp], 12
  00434	f3 0f 11 84 15
	d4 fe ff ff	 movss	 DWORD PTR _var$[ebp+edx+8], xmm0
$LN12@WarpCamera:

; 133  : 					}
; 134  : 				}
; 135  : 			}
; 136  : 		}
; 137  : 	}

  0043d	e9 3a fc ff ff	 jmp	 $LN2@WarpCamera
$LN3@WarpCamera:

; 138  : 
; 139  : 	for (int i = 0; i < 3; ++i)

  00442	c7 85 b4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1[ebp], 0
  0044c	eb 0f		 jmp	 SHORT $LN7@WarpCamera
$LN5@WarpCamera:
  0044e	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _i$1[ebp]
  00454	83 c0 01	 add	 eax, 1
  00457	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _i$1[ebp], eax
$LN7@WarpCamera:
  0045d	83 bd b4 fe ff
	ff 03		 cmp	 DWORD PTR _i$1[ebp], 3
  00464	0f 8d aa 01 00
	00		 jge	 $LN6@WarpCamera

; 140  : 	{
; 141  : 		currentWarpTeamPlayerNoIndex = pCurrentWarpTeam->playerNo[i];

  0046a	8b 45 f4	 mov	 eax, DWORD PTR _pCurrentWarpTeam$[ebp]
  0046d	03 85 b4 fe ff
	ff		 add	 eax, DWORD PTR _i$1[ebp]
  00473	0f be 88 10 01
	00 00		 movsx	 ecx, BYTE PTR [eax+272]
  0047a	89 4d ac	 mov	 DWORD PTR _currentWarpTeamPlayerNoIndex$[ebp], ecx

; 142  : 		pCurrentPlayerIndex = playerTOp[currentWarpTeamPlayerNoIndex];

  0047d	8b 45 ac	 mov	 eax, DWORD PTR _currentWarpTeamPlayerNoIndex$[ebp]
  00480	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?playerTOp@@3QAPAUTObjPlayer@@A ; playerTOp
  00486	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00489	89 55 a0	 mov	 DWORD PTR _pCurrentPlayerIndex$[ebp], edx

; 143  : 		if (pCurrentPlayerIndex && pCurrentPlayerIndex->mode != PlayerMode_Captured)

  0048c	83 7d a0 00	 cmp	 DWORD PTR _pCurrentPlayerIndex$[ebp], 0
  00490	0f 84 79 01 00
	00		 je	 $LN21@WarpCamera
  00496	8b 45 a0	 mov	 eax, DWORD PTR _pCurrentPlayerIndex$[ebp]
  00499	0f bf 88 f4 00
	00 00		 movsx	 ecx, WORD PTR [eax+244]
  004a0	83 f9 26	 cmp	 ecx, 38			; 00000026H
  004a3	0f 84 66 01 00
	00		 je	 $LN21@WarpCamera

; 144  : 		{
; 145  : 			currentPlayerPosition = &pCurrentPlayerIndex->position;

  004a9	8b 45 a0	 mov	 eax, DWORD PTR _pCurrentPlayerIndex$[ebp]
  004ac	05 14 01 00 00	 add	 eax, 276		; 00000114H
  004b1	89 45 94	 mov	 DWORD PTR _currentPlayerPosition$[ebp], eax

; 146  : 			if (currentWarpTeamPlayerNoIndex == currentWarpTeamLeaderPlayerNo)

  004b4	8b 45 ac	 mov	 eax, DWORD PTR _currentWarpTeamPlayerNoIndex$[ebp]
  004b7	3b 85 58 ff ff
	ff		 cmp	 eax, DWORD PTR _currentWarpTeamLeaderPlayerNo$[ebp]
  004bd	0f 85 a1 00 00
	00		 jne	 $LN16@WarpCamera

; 147  : 			{
; 148  : 				*currentPlayerPosition = *targetPosition;

  004c3	8b 45 10	 mov	 eax, DWORD PTR _targetPosition$[ebp]
  004c6	8b 4d 94	 mov	 ecx, DWORD PTR _currentPlayerPosition$[ebp]
  004c9	8b 10		 mov	 edx, DWORD PTR [eax]
  004cb	89 11		 mov	 DWORD PTR [ecx], edx
  004cd	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  004d0	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  004d3	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  004d6	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 149  : 				if (playerTOp[currentWarpTeamPlayerNoIndex])

  004d9	8b 45 ac	 mov	 eax, DWORD PTR _currentWarpTeamPlayerNoIndex$[ebp]
  004dc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?playerTOp@@3QAPAUTObjPlayer@@A ; playerTOp
  004e2	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  004e6	74 33		 je	 SHORT $LN18@WarpCamera

; 150  : 				{
; 151  : 					PlayerMaster::pos_history->entry[PlayerMaster::n_history[currentWarpTeamPlayerNoIndex] + (currentWarpTeamPlayerNoIndex * 0x100)] = *targetPosition; // #inline PlayerMaster::SetPlayerPosition((int,uchar,RwV3d *,sAngle *))

  004e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pos_history@PlayerMaster@@2AAPAUpos_history_struct@1@A ; PlayerMaster::pos_history
  004ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  004ef	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?n_history@PlayerMaster@@2PAEA ; PlayerMaster::n_history
  004f5	03 55 ac	 add	 edx, DWORD PTR _currentWarpTeamPlayerNoIndex$[ebp]
  004f8	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  004fb	8b 55 ac	 mov	 edx, DWORD PTR _currentWarpTeamPlayerNoIndex$[ebp]
  004fe	c1 e2 08	 shl	 edx, 8
  00501	03 c2		 add	 eax, edx
  00503	6b c0 0c	 imul	 eax, eax, 12
  00506	03 c8		 add	 ecx, eax
  00508	8b 55 10	 mov	 edx, DWORD PTR _targetPosition$[ebp]
  0050b	8b 02		 mov	 eax, DWORD PTR [edx]
  0050d	89 01		 mov	 DWORD PTR [ecx], eax
  0050f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00512	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00515	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00518	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$LN18@WarpCamera:

; 152  : 				}
; 153  : 				if (playerTOp[currentWarpTeamPlayerNoIndex])

  0051b	8b 45 ac	 mov	 eax, DWORD PTR _currentWarpTeamPlayerNoIndex$[ebp]
  0051e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?playerTOp@@3QAPAUTObjPlayer@@A ; playerTOp
  00524	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  00528	74 35		 je	 SHORT $LN19@WarpCamera

; 154  : 				{
; 155  : 					PlayerMaster::pos_history->entry[(PlayerMaster::n_history[currentWarpTeamPlayerNoIndex] - 1) + (currentWarpTeamPlayerNoIndex * 0x100)] = *targetPosition; // #inline PlayerMaster::SetPlayerPosition((int,uchar,RwV3d *,sAngle *))

  0052a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pos_history@PlayerMaster@@2AAPAUpos_history_struct@1@A ; PlayerMaster::pos_history
  0052f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00531	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?n_history@PlayerMaster@@2PAEA ; PlayerMaster::n_history
  00537	03 55 ac	 add	 edx, DWORD PTR _currentWarpTeamPlayerNoIndex$[ebp]
  0053a	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0053d	8b 55 ac	 mov	 edx, DWORD PTR _currentWarpTeamPlayerNoIndex$[ebp]
  00540	c1 e2 08	 shl	 edx, 8
  00543	8d 44 10 ff	 lea	 eax, DWORD PTR [eax+edx-1]
  00547	6b d0 0c	 imul	 edx, eax, 12
  0054a	03 ca		 add	 ecx, edx
  0054c	8b 45 10	 mov	 eax, DWORD PTR _targetPosition$[ebp]
  0054f	8b 10		 mov	 edx, DWORD PTR [eax]
  00551	89 11		 mov	 DWORD PTR [ecx], edx
  00553	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00556	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00559	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0055c	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN19@WarpCamera:

; 156  : 				}
; 157  : 			}

  0055f	e9 ab 00 00 00	 jmp	 $LN21@WarpCamera
$LN16@WarpCamera:

; 158  : 			else
; 159  : 			{
; 160  : 				currentPlayerPosition->x = var[i].x;;

  00564	6b 85 b4 fe ff
	ff 0c		 imul	 eax, DWORD PTR _i$1[ebp], 12
  0056b	8b 4d 94	 mov	 ecx, DWORD PTR _currentPlayerPosition$[ebp]
  0056e	8b 94 05 cc fe
	ff ff		 mov	 edx, DWORD PTR _var$[ebp+eax]
  00575	89 11		 mov	 DWORD PTR [ecx], edx

; 161  : 				currentPlayerPosition->y = var[i].y;;

  00577	6b 85 b4 fe ff
	ff 0c		 imul	 eax, DWORD PTR _i$1[ebp], 12
  0057e	8b 4d 94	 mov	 ecx, DWORD PTR _currentPlayerPosition$[ebp]
  00581	8b 94 05 d0 fe
	ff ff		 mov	 edx, DWORD PTR _var$[ebp+eax+4]
  00588	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 162  : 				currentPlayerPosition->z = var[i].z;;

  0058b	6b 85 b4 fe ff
	ff 0c		 imul	 eax, DWORD PTR _i$1[ebp], 12
  00592	8b 4d 94	 mov	 ecx, DWORD PTR _currentPlayerPosition$[ebp]
  00595	8b 94 05 d4 fe
	ff ff		 mov	 edx, DWORD PTR _var$[ebp+eax+8]
  0059c	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 163  : 				if (playerTOp[currentWarpTeamPlayerNoIndex] && var)

  0059f	8b 45 ac	 mov	 eax, DWORD PTR _currentWarpTeamPlayerNoIndex$[ebp]
  005a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?playerTOp@@3QAPAUTObjPlayer@@A ; playerTOp
  005a8	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  005ac	74 29		 je	 SHORT $LN20@WarpCamera
  005ae	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _var$[ebp]
  005b4	85 c0		 test	 eax, eax
  005b6	74 1f		 je	 SHORT $LN20@WarpCamera

; 164  : 				{
; 165  : 					PlayerMaster::SetPlayerPosition(currentWarpTeamPlayerNoIndex, 0, &var[i], 0);

  005b8	6a 00		 push	 0
  005ba	6b 85 b4 fe ff
	ff 0c		 imul	 eax, DWORD PTR _i$1[ebp], 12
  005c1	8d 8c 05 cc fe
	ff ff		 lea	 ecx, DWORD PTR _var$[ebp+eax]
  005c8	51		 push	 ecx
  005c9	6a 00		 push	 0
  005cb	8b 55 ac	 mov	 edx, DWORD PTR _currentWarpTeamPlayerNoIndex$[ebp]
  005ce	52		 push	 edx
  005cf	e8 00 00 00 00	 call	 ?SetPlayerPosition@PlayerMaster@@SAXHEPAURwV3d@@PAUsAngle@@@Z ; PlayerMaster::SetPlayerPosition
  005d4	83 c4 10	 add	 esp, 16			; 00000010H
$LN20@WarpCamera:

; 166  : 				}
; 167  : 				if (playerTOp[currentWarpTeamPlayerNoIndex] && var)

  005d7	8b 45 ac	 mov	 eax, DWORD PTR _currentWarpTeamPlayerNoIndex$[ebp]
  005da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?playerTOp@@3QAPAUTObjPlayer@@A ; playerTOp
  005e0	83 3c 81 00	 cmp	 DWORD PTR [ecx+eax*4], 0
  005e4	74 29		 je	 SHORT $LN21@WarpCamera
  005e6	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _var$[ebp]
  005ec	85 c0		 test	 eax, eax
  005ee	74 1f		 je	 SHORT $LN21@WarpCamera

; 168  : 				{
; 169  : 					PlayerMaster::SetPlayerPosition(currentWarpTeamPlayerNoIndex, 1, &var[i], 0);

  005f0	6a 00		 push	 0
  005f2	6b 85 b4 fe ff
	ff 0c		 imul	 eax, DWORD PTR _i$1[ebp], 12
  005f9	8d 8c 05 cc fe
	ff ff		 lea	 ecx, DWORD PTR _var$[ebp+eax]
  00600	51		 push	 ecx
  00601	6a 01		 push	 1
  00603	8b 55 ac	 mov	 edx, DWORD PTR _currentWarpTeamPlayerNoIndex$[ebp]
  00606	52		 push	 edx
  00607	e8 00 00 00 00	 call	 ?SetPlayerPosition@PlayerMaster@@SAXHEPAURwV3d@@PAUsAngle@@@Z ; PlayerMaster::SetPlayerPosition
  0060c	83 c4 10	 add	 esp, 16			; 00000010H
$LN21@WarpCamera:

; 170  : 				}
; 171  : 			}
; 172  : 		}
; 173  : 	}

  0060f	e9 3a fe ff ff	 jmp	 $LN5@WarpCamera
$LN6@WarpCamera:

; 174  : 	v26 = TObjCamera::currentCamera;

  00614	a1 00 00 00 00	 mov	 eax, DWORD PTR ?currentCamera@TObjCamera@@2AAHA ; TObjCamera::currentCamera
  00619	8b 08		 mov	 ecx, DWORD PTR [eax]
  0061b	89 4d 88	 mov	 DWORD PTR _v26$[ebp], ecx

; 175  : 	TObjCamera::cameraParam[v26].position = *targetPosition;

  0061e	69 45 88 24 23
	00 00		 imul	 eax, DWORD PTR _v26$[ebp], 8996
  00625	05 30 0c a6 00	 add	 eax, 10882096		; 00a60c30H
  0062a	8b 4d 10	 mov	 ecx, DWORD PTR _targetPosition$[ebp]
  0062d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0062f	89 10		 mov	 DWORD PTR [eax], edx
  00631	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00634	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00637	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0063a	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 176  : 	TObjCamera::cameraParam[v26].position.x += 1.0;

  0063d	69 45 88 24 23
	00 00		 imul	 eax, DWORD PTR _v26$[ebp], 8996
  00644	f3 0f 5a 80 30
	0c a6 00	 cvtss2sd xmm0, DWORD PTR [eax+10882096]
  0064c	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00654	69 4d 88 24 23
	00 00		 imul	 ecx, DWORD PTR _v26$[ebp], 8996
  0065b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0065f	f3 0f 11 81 30
	0c a6 00	 movss	 DWORD PTR [ecx+10882096], xmm0

; 177  : 	TObjCamera::cameraParam[v26].targetPosition = *targetPosition;

  00667	69 45 88 24 23
	00 00		 imul	 eax, DWORD PTR _v26$[ebp], 8996
  0066e	05 54 0c a6 00	 add	 eax, 10882132		; 00a60c54H
  00673	8b 4d 10	 mov	 ecx, DWORD PTR _targetPosition$[ebp]
  00676	8b 11		 mov	 edx, DWORD PTR [ecx]
  00678	89 10		 mov	 DWORD PTR [eax], edx
  0067a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0067d	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00680	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00683	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 178  : 	teamTOp[v26]->cameraTargetPosition = *targetPosition;

  00686	8b 45 88	 mov	 eax, DWORD PTR _v26$[ebp]
  00689	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  0068f	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00692	83 c2 40	 add	 edx, 64			; 00000040H
  00695	8b 45 10	 mov	 eax, DWORD PTR _targetPosition$[ebp]
  00698	8b 08		 mov	 ecx, DWORD PTR [eax]
  0069a	89 0a		 mov	 DWORD PTR [edx], ecx
  0069c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0069f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  006a2	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  006a5	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 179  : 	result = teamTOp[v26];

  006a8	8b 45 88	 mov	 eax, DWORD PTR _v26$[ebp]
  006ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  006b1	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  006b4	89 95 7c ff ff
	ff		 mov	 DWORD PTR _result$[ebp], edx

; 180  : 	v30 = &result->cameraTargetPositionHistory[result->cameraTargetPositionHistoryCount];

  006ba	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _result$[ebp]
  006c0	0f bf 48 3e	 movsx	 ecx, WORD PTR [eax+62]
  006c4	6b d1 0c	 imul	 edx, ecx, 12
  006c7	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _result$[ebp]
  006cd	8d 4c 10 4c	 lea	 ecx, DWORD PTR [eax+edx+76]
  006d1	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _v30$[ebp], ecx

; 181  : 	v30->x = result->cameraTargetPosition.x;

  006d7	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _v30$[ebp]
  006dd	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _result$[ebp]
  006e3	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  006e6	89 10		 mov	 DWORD PTR [eax], edx

; 182  : 	v30->y = result->cameraTargetPosition.y;

  006e8	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _v30$[ebp]
  006ee	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _result$[ebp]
  006f4	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  006f7	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 183  : 	v30->z = result->cameraTargetPosition.z;

  006fa	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _v30$[ebp]
  00700	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _result$[ebp]
  00706	8b 51 48	 mov	 edx, DWORD PTR [ecx+72]
  00709	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 184  : 	if (++result->cameraTargetPositionHistoryCount >= 16)

  0070c	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _result$[ebp]
  00712	66 8b 48 3e	 mov	 cx, WORD PTR [eax+62]
  00716	66 83 c1 01	 add	 cx, 1
  0071a	66 89 8d ee fd
	ff ff		 mov	 WORD PTR tv382[ebp], cx
  00721	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _result$[ebp]
  00727	66 8b 85 ee fd
	ff ff		 mov	 ax, WORD PTR tv382[ebp]
  0072e	66 89 42 3e	 mov	 WORD PTR [edx+62], ax
  00732	0f bf 8d ee fd
	ff ff		 movsx	 ecx, WORD PTR tv382[ebp]
  00739	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0073c	7c 0c		 jl	 SHORT $LN22@WarpCamera

; 185  : 	{
; 186  : 		result->cameraTargetPositionHistoryCount = 0;

  0073e	33 c0		 xor	 eax, eax
  00740	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _result$[ebp]
  00746	66 89 41 3e	 mov	 WORD PTR [ecx+62], ax
$LN22@WarpCamera:

; 187  : 	}
; 188  : 	if (v26 <= TObjCamera::cameraParam[v26].cameraLevel)

  0074a	69 45 88 24 23
	00 00		 imul	 eax, DWORD PTR _v26$[ebp], 8996
  00751	8b 4d 88	 mov	 ecx, DWORD PTR _v26$[ebp]
  00754	3b 88 7c 0c a6
	00		 cmp	 ecx, DWORD PTR [eax+10882172]
  0075a	0f 8f a9 00 00
	00		 jg	 $LN23@WarpCamera

; 189  : 	{
; 190  : 		v31 = v26 * 0x2324 + 0x114 * v26;

  00760	69 45 88 24 23
	00 00		 imul	 eax, DWORD PTR _v26$[ebp], 8996
  00767	69 4d 88 14 01
	00 00		 imul	 ecx, DWORD PTR _v26$[ebp], 276
  0076e	03 c1		 add	 eax, ecx
  00770	89 85 64 ff ff
	ff		 mov	 DWORD PTR _v31$[ebp], eax

; 191  : 		*(int*)&TObjCamera::cameraParam[0].gap54[v31 + 0x113C] = 0;

  00776	b8 24 23 00 00	 mov	 eax, 8996		; 00002324H
  0077b	6b c8 00	 imul	 ecx, eax, 0
  0077e	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _v31$[ebp]
  00784	c7 84 11 c0 1d
	a6 00 00 00 00
	00		 mov	 DWORD PTR [ecx+edx+10886592], 0

; 192  : 		*(int*)&TObjCamera::cameraParam[0].gap54[v31 + 0x1140] = 0;

  0078f	b8 24 23 00 00	 mov	 eax, 8996		; 00002324H
  00794	6b c8 00	 imul	 ecx, eax, 0
  00797	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _v31$[ebp]
  0079d	c7 84 11 c4 1d
	a6 00 00 00 00
	00		 mov	 DWORD PTR [ecx+edx+10886596], 0

; 193  : 		*(int*)&TObjCamera::cameraParam[0].gap54[v31 + 0x1144] = 0;

  007a8	b8 24 23 00 00	 mov	 eax, 8996		; 00002324H
  007ad	6b c8 00	 imul	 ecx, eax, 0
  007b0	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _v31$[ebp]
  007b6	c7 84 11 c8 1d
	a6 00 00 00 00
	00		 mov	 DWORD PTR [ecx+edx+10886600], 0

; 194  : 		result = 0;

  007c1	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _result$[ebp], 0

; 195  : 		memset(&TObjCamera::cameraParam[0].gap54[v31 + 0x1150], 0, 0x100u);

  007cb	68 00 01 00 00	 push	 256			; 00000100H
  007d0	6a 00		 push	 0
  007d2	b8 24 23 00 00	 mov	 eax, 8996		; 00002324H
  007d7	6b c8 00	 imul	 ecx, eax, 0
  007da	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _v31$[ebp]
  007e0	8d 84 11 d4 1d
	a6 00		 lea	 eax, DWORD PTR [ecx+edx+10886612]
  007e7	50		 push	 eax
  007e8	e8 00 00 00 00	 call	 _memset
  007ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 196  : 		*(int*)&TObjCamera::cameraParam[0].gap54[v31 + 0x1148] = 0;

  007f0	b8 24 23 00 00	 mov	 eax, 8996		; 00002324H
  007f5	6b c8 00	 imul	 ecx, eax, 0
  007f8	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _v31$[ebp]
  007fe	c7 84 11 cc 1d
	a6 00 00 00 00
	00		 mov	 DWORD PTR [ecx+edx+10886604], 0
$LN23@WarpCamera:

; 197  : 	}
; 198  : }

  00809	52		 push	 edx
  0080a	8b cd		 mov	 ecx, ebp
  0080c	50		 push	 eax
  0080d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN28@WarpCamera
  00813	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00818	58		 pop	 eax
  00819	5a		 pop	 edx
  0081a	5f		 pop	 edi
  0081b	5e		 pop	 esi
  0081c	5b		 pop	 ebx
  0081d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00820	33 cd		 xor	 ecx, ebp
  00822	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00827	81 c4 14 02 00
	00		 add	 esp, 532		; 00000214H
  0082d	3b ec		 cmp	 ebp, esp
  0082f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00834	8b e5		 mov	 esp, ebp
  00836	5d		 pop	 ebp
  00837	c3		 ret	 0
$LN28@WarpCamera:
  00838	02 00 00 00	 DD	 2
  0083c	00 00 00 00	 DD	 $LN27@WarpCamera
$LN27@WarpCamera:
  00840	04 ff ff ff	 DD	 -252			; ffffff04H
  00844	40 00 00 00	 DD	 64			; 00000040H
  00848	00 00 00 00	 DD	 $LN25@WarpCamera
  0084c	cc fe ff ff	 DD	 -308			; fffffeccH
  00850	24 00 00 00	 DD	 36			; 00000024H
  00854	00 00 00 00	 DD	 $LN26@WarpCamera
$LN26@WarpCamera:
  00858	76		 DB	 118			; 00000076H
  00859	61		 DB	 97			; 00000061H
  0085a	72		 DB	 114			; 00000072H
  0085b	00		 DB	 0
$LN25@WarpCamera:
  0085c	6d		 DB	 109			; 0000006dH
  0085d	61		 DB	 97			; 00000061H
  0085e	74		 DB	 116			; 00000074H
  0085f	72		 DB	 114			; 00000072H
  00860	69		 DB	 105			; 00000069H
  00861	78		 DB	 120			; 00000078H
  00862	00		 DB	 0
?WarpCameraAndPlayerKeepRelativePosition@TObjCamera@@SAXHPAUsAngle@@PAURwV3d@@@Z ENDP ; TObjCamera::WarpCameraAndPlayerKeepRelativePosition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\newCamera.cpp
;	COMDAT ?WarpCameraAndPlayer@TObjCamera@@SAXPAURwV3d@@D@Z
_TEXT	SEGMENT
_v2$ = -112						; size = 4
_vv1$1 = -100						; size = 4
_i$2 = -88						; size = 4
_v31$ = -32						; size = 4
_v26$ = -8						; size = 4
_targetPosition$ = 8					; size = 4
_HHC_teamNo$ = 12					; size = 1
?WarpCameraAndPlayer@TObjCamera@@SAXPAURwV3d@@D@Z PROC	; TObjCamera::WarpCameraAndPlayer, COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 01 00
	00		 sub	 esp, 308		; 00000134H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd cc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-308]
  00012	b9 4d 00 00 00	 mov	 ecx, 77			; 0000004dH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __4F5C2835_newCamera@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 29   : 	int v26;
; 30   : 	RwV3d* v30;
; 31   : 	int v31;
; 32   : 
; 33   : 
; 34   : 	RwV3d var[3];
; 35   : 	for (int i = 0; i < 3; ++i)

  00028	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@WarpCamera
$LN2@WarpCamera:
  00031	8b 45 a8	 mov	 eax, DWORD PTR _i$2[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 a8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@WarpCamera:
  0003a	83 7d a8 03	 cmp	 DWORD PTR _i$2[ebp], 3
  0003e	0f 8d b1 00 00
	00		 jge	 $LN3@WarpCamera

; 36   : 	{
; 37   : 		TObjPlayer* vv1 = playerTOp[i + (3 * HHC_teamNo)];

  00044	0f be 45 0c	 movsx	 eax, BYTE PTR _HHC_teamNo$[ebp]
  00048	6b c8 03	 imul	 ecx, eax, 3
  0004b	03 4d a8	 add	 ecx, DWORD PTR _i$2[ebp]
  0004e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?playerTOp@@3QAPAUTObjPlayer@@A ; playerTOp
  00054	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00057	89 45 9c	 mov	 DWORD PTR _vv1$1[ebp], eax

; 38   : 		if (vv1)

  0005a	83 7d 9c 00	 cmp	 DWORD PTR _vv1$1[ebp], 0
  0005e	0f 84 8c 00 00
	00		 je	 $LN6@WarpCamera

; 39   : 		{
; 40   : 			if (vv1->mode != PlayerMode_Captured)

  00064	8b 45 9c	 mov	 eax, DWORD PTR _vv1$1[ebp]
  00067	0f bf 88 f4 00
	00 00		 movsx	 ecx, WORD PTR [eax+244]
  0006e	83 f9 26	 cmp	 ecx, 38			; 00000026H
  00071	74 7d		 je	 SHORT $LN6@WarpCamera

; 41   : 			{
; 42   : 				vv1->position = *targetPosition;

  00073	8b 45 9c	 mov	 eax, DWORD PTR _vv1$1[ebp]
  00076	05 14 01 00 00	 add	 eax, 276		; 00000114H
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _targetPosition$[ebp]
  0007e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00080	89 10		 mov	 DWORD PTR [eax], edx
  00082	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00085	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00088	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0008b	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 43   : 				vv1->C_COLLI.flag |= 0x100u;     // #inline C_COLLI::Ignore_On((void))

  0008e	8b 45 9c	 mov	 eax, DWORD PTR _vv1$1[ebp]
  00091	0f bf 48 34	 movsx	 ecx, WORD PTR [eax+52]
  00095	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
  0009b	8b 55 9c	 mov	 edx, DWORD PTR _vv1$1[ebp]
  0009e	66 89 4a 34	 mov	 WORD PTR [edx+52], cx

; 44   : 				vv1->PlayerFlag |= 0x200u;           // #inline TObjOldPlayer::SetFlagOfMoved((void))

  000a2	8b 45 9c	 mov	 eax, DWORD PTR _vv1$1[ebp]
  000a5	8b 88 bc 01 00
	00		 mov	 ecx, DWORD PTR [eax+444]
  000ab	81 c9 00 02 00
	00		 or	 ecx, 512		; 00000200H
  000b1	8b 55 9c	 mov	 edx, DWORD PTR _vv1$1[ebp]
  000b4	89 8a bc 01 00
	00		 mov	 DWORD PTR [edx+444], ecx

; 45   : 				PlayerMaster::SetPlayerPosition(i + (3 * HHC_teamNo), 0, targetPosition, 0);

  000ba	6a 00		 push	 0
  000bc	8b 45 08	 mov	 eax, DWORD PTR _targetPosition$[ebp]
  000bf	50		 push	 eax
  000c0	6a 00		 push	 0
  000c2	0f be 4d 0c	 movsx	 ecx, BYTE PTR _HHC_teamNo$[ebp]
  000c6	6b d1 03	 imul	 edx, ecx, 3
  000c9	03 55 a8	 add	 edx, DWORD PTR _i$2[ebp]
  000cc	52		 push	 edx
  000cd	e8 00 00 00 00	 call	 ?SetPlayerPosition@PlayerMaster@@SAXHEPAURwV3d@@PAUsAngle@@@Z ; PlayerMaster::SetPlayerPosition
  000d2	83 c4 10	 add	 esp, 16			; 00000010H

; 46   : 				PlayerMaster::SetPlayerPosition(i + (3 * HHC_teamNo), 1, targetPosition, 0);

  000d5	6a 00		 push	 0
  000d7	8b 45 08	 mov	 eax, DWORD PTR _targetPosition$[ebp]
  000da	50		 push	 eax
  000db	6a 01		 push	 1
  000dd	0f be 4d 0c	 movsx	 ecx, BYTE PTR _HHC_teamNo$[ebp]
  000e1	6b d1 03	 imul	 edx, ecx, 3
  000e4	03 55 a8	 add	 edx, DWORD PTR _i$2[ebp]
  000e7	52		 push	 edx
  000e8	e8 00 00 00 00	 call	 ?SetPlayerPosition@PlayerMaster@@SAXHEPAURwV3d@@PAUsAngle@@@Z ; PlayerMaster::SetPlayerPosition
  000ed	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@WarpCamera:

; 47   : 			}
; 48   : 		}
; 49   : 	}

  000f0	e9 3c ff ff ff	 jmp	 $LN2@WarpCamera
$LN3@WarpCamera:

; 50   : 	v26 = TObjCamera::currentCamera;

  000f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?currentCamera@TObjCamera@@2AAHA ; TObjCamera::currentCamera
  000fa	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fc	89 4d f8	 mov	 DWORD PTR _v26$[ebp], ecx

; 51   : 	TObjCamera::cameraParam[HHC_teamNo].position = *targetPosition;

  000ff	0f be 45 0c	 movsx	 eax, BYTE PTR _HHC_teamNo$[ebp]
  00103	69 c8 24 23 00
	00		 imul	 ecx, eax, 8996
  00109	81 c1 30 0c a6
	00		 add	 ecx, 10882096		; 00a60c30H
  0010f	8b 55 08	 mov	 edx, DWORD PTR _targetPosition$[ebp]
  00112	8b 02		 mov	 eax, DWORD PTR [edx]
  00114	89 01		 mov	 DWORD PTR [ecx], eax
  00116	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00119	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0011c	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  0011f	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 52   : 	TObjCamera::cameraParam[HHC_teamNo].position.x += 1.0;

  00122	0f be 45 0c	 movsx	 eax, BYTE PTR _HHC_teamNo$[ebp]
  00126	69 c8 24 23 00
	00		 imul	 ecx, eax, 8996
  0012c	f3 0f 5a 81 30
	0c a6 00	 cvtss2sd xmm0, DWORD PTR [ecx+10882096]
  00134	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0013c	0f be 55 0c	 movsx	 edx, BYTE PTR _HHC_teamNo$[ebp]
  00140	69 c2 24 23 00
	00		 imul	 eax, edx, 8996
  00146	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0014a	f3 0f 11 80 30
	0c a6 00	 movss	 DWORD PTR [eax+10882096], xmm0

; 53   : 	TObjCamera::cameraParam[HHC_teamNo].targetPosition = *targetPosition;

  00152	0f be 45 0c	 movsx	 eax, BYTE PTR _HHC_teamNo$[ebp]
  00156	69 c8 24 23 00
	00		 imul	 ecx, eax, 8996
  0015c	81 c1 54 0c a6
	00		 add	 ecx, 10882132		; 00a60c54H
  00162	8b 55 08	 mov	 edx, DWORD PTR _targetPosition$[ebp]
  00165	8b 02		 mov	 eax, DWORD PTR [edx]
  00167	89 01		 mov	 DWORD PTR [ecx], eax
  00169	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0016c	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0016f	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00172	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 54   : 	*teamTOp[HHC_teamNo]->GetCameraTargetPosition() = *targetPosition;

  00175	8b 75 08	 mov	 esi, DWORD PTR _targetPosition$[ebp]
  00178	0f be 45 0c	 movsx	 eax, BYTE PTR _HHC_teamNo$[ebp]
  0017c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  00182	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  00185	e8 00 00 00 00	 call	 ?GetCameraTargetPosition@TObjTeam@@QAEPAURwV3d@@XZ ; TObjTeam::GetCameraTargetPosition
  0018a	8b 16		 mov	 edx, DWORD PTR [esi]
  0018c	89 10		 mov	 DWORD PTR [eax], edx
  0018e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00191	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00194	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00197	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 55   : 
; 56   : 	TObjTeam* v2 = teamTOp[HHC_teamNo];

  0019a	0f be 45 0c	 movsx	 eax, BYTE PTR _HHC_teamNo$[ebp]
  0019e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?teamTOp@@3PAPAUTObjTeam@@A ; teamTOp
  001a4	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  001a7	89 55 90	 mov	 DWORD PTR _v2$[ebp], edx

; 57   : 	v2->SetCameraTargetPositionHistory(targetPosition);

  001aa	8b 45 08	 mov	 eax, DWORD PTR _targetPosition$[ebp]
  001ad	50		 push	 eax
  001ae	8b 4d 90	 mov	 ecx, DWORD PTR _v2$[ebp]
  001b1	e8 00 00 00 00	 call	 ?SetCameraTargetPositionHistory@TObjTeam@@QAEXPAURwV3d@@@Z ; TObjTeam::SetCameraTargetPositionHistory

; 58   : 	//EntryAdjustMode(currentCamera, (MODE_TYPE)0);
; 59   : 	if (HHC_teamNo <= TObjCamera::cameraParam[HHC_teamNo].cameraLevel)

  001b6	0f be 45 0c	 movsx	 eax, BYTE PTR _HHC_teamNo$[ebp]
  001ba	0f be 4d 0c	 movsx	 ecx, BYTE PTR _HHC_teamNo$[ebp]
  001be	69 d1 24 23 00
	00		 imul	 edx, ecx, 8996
  001c4	3b 82 7c 0c a6
	00		 cmp	 eax, DWORD PTR [edx+10882172]
  001ca	0f 8f 93 00 00
	00		 jg	 $LN7@WarpCamera

; 60   : 	{
; 61   : 		v31 = HHC_teamNo * 0x2324 + 0x114 * HHC_teamNo;

  001d0	0f be 45 0c	 movsx	 eax, BYTE PTR _HHC_teamNo$[ebp]
  001d4	69 c8 24 23 00
	00		 imul	 ecx, eax, 8996
  001da	0f be 55 0c	 movsx	 edx, BYTE PTR _HHC_teamNo$[ebp]
  001de	69 c2 14 01 00
	00		 imul	 eax, edx, 276
  001e4	03 c8		 add	 ecx, eax
  001e6	89 4d e0	 mov	 DWORD PTR _v31$[ebp], ecx

; 62   : 		*(int*)&TObjCamera::cameraParam[0].gap54[v31 + 0x113C] = 0;

  001e9	b8 24 23 00 00	 mov	 eax, 8996		; 00002324H
  001ee	6b c8 00	 imul	 ecx, eax, 0
  001f1	8b 55 e0	 mov	 edx, DWORD PTR _v31$[ebp]
  001f4	c7 84 11 c0 1d
	a6 00 00 00 00
	00		 mov	 DWORD PTR [ecx+edx+10886592], 0

; 63   : 		*(int*)&TObjCamera::cameraParam[0].gap54[v31 + 0x1140] = 0;

  001ff	b8 24 23 00 00	 mov	 eax, 8996		; 00002324H
  00204	6b c8 00	 imul	 ecx, eax, 0
  00207	8b 55 e0	 mov	 edx, DWORD PTR _v31$[ebp]
  0020a	c7 84 11 c4 1d
	a6 00 00 00 00
	00		 mov	 DWORD PTR [ecx+edx+10886596], 0

; 64   : 		*(int*)&TObjCamera::cameraParam[0].gap54[v31 + 0x1144] = 0;

  00215	b8 24 23 00 00	 mov	 eax, 8996		; 00002324H
  0021a	6b c8 00	 imul	 ecx, eax, 0
  0021d	8b 55 e0	 mov	 edx, DWORD PTR _v31$[ebp]
  00220	c7 84 11 c8 1d
	a6 00 00 00 00
	00		 mov	 DWORD PTR [ecx+edx+10886600], 0

; 65   : 		memset(&TObjCamera::cameraParam[0].gap54[v31 + 0x1150], 0, 0x100u);

  0022b	68 00 01 00 00	 push	 256			; 00000100H
  00230	6a 00		 push	 0
  00232	b8 24 23 00 00	 mov	 eax, 8996		; 00002324H
  00237	6b c8 00	 imul	 ecx, eax, 0
  0023a	8b 55 e0	 mov	 edx, DWORD PTR _v31$[ebp]
  0023d	8d 84 11 d4 1d
	a6 00		 lea	 eax, DWORD PTR [ecx+edx+10886612]
  00244	50		 push	 eax
  00245	e8 00 00 00 00	 call	 _memset
  0024a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 66   : 		*(int*)&TObjCamera::cameraParam[0].gap54[v31 + 0x1148] = 0;

  0024d	b8 24 23 00 00	 mov	 eax, 8996		; 00002324H
  00252	6b c8 00	 imul	 ecx, eax, 0
  00255	8b 55 e0	 mov	 edx, DWORD PTR _v31$[ebp]
  00258	c7 84 11 cc 1d
	a6 00 00 00 00
	00		 mov	 DWORD PTR [ecx+edx+10886604], 0
$LN7@WarpCamera:

; 67   : 	}
; 68   : }

  00263	52		 push	 edx
  00264	8b cd		 mov	 ecx, ebp
  00266	50		 push	 eax
  00267	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@WarpCamera
  0026d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00272	58		 pop	 eax
  00273	5a		 pop	 edx
  00274	5f		 pop	 edi
  00275	5e		 pop	 esi
  00276	5b		 pop	 ebx
  00277	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  0027d	3b ec		 cmp	 ebp, esp
  0027f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00284	8b e5		 mov	 esp, ebp
  00286	5d		 pop	 ebp
  00287	c3		 ret	 0
$LN11@WarpCamera:
  00288	01 00 00 00	 DD	 1
  0028c	00 00 00 00	 DD	 $LN10@WarpCamera
$LN10@WarpCamera:
  00290	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00294	24 00 00 00	 DD	 36			; 00000024H
  00298	00 00 00 00	 DD	 $LN9@WarpCamera
$LN9@WarpCamera:
  0029c	76		 DB	 118			; 00000076H
  0029d	61		 DB	 97			; 00000061H
  0029e	72		 DB	 114			; 00000072H
  0029f	00		 DB	 0
?WarpCameraAndPlayer@TObjCamera@@SAXPAURwV3d@@D@Z ENDP	; TObjCamera::WarpCameraAndPlayer
_TEXT	ENDS
END
