; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28316.0 

	TITLE	C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?GrvDir@CCL_MASTER@@2AAHA			; CCL_MASTER::GrvDir
PUBLIC	?enemy2_entry_num_pre@CCL_MASTER@@2AAFA		; CCL_MASTER::enemy2_entry_num_pre
PUBLIC	?enemy_entry_num_pre@CCL_MASTER@@2AAFA		; CCL_MASTER::enemy_entry_num_pre
PUBLIC	?chao_entry_list@CCL_MASTER@@2AAPAHA		; CCL_MASTER::chao_entry_list
PUBLIC	?chao_entry_num@CCL_MASTER@@2AAFA		; CCL_MASTER::chao_entry_num
PUBLIC	?wall_entry_list@CCL_MASTER@@2AAPAHA		; CCL_MASTER::wall_entry_list
PUBLIC	?wall_entry_num@CCL_MASTER@@2AAFA		; CCL_MASTER::wall_entry_num
PUBLIC	?item2_entry_list@CCL_MASTER@@2AAPAHA		; CCL_MASTER::item2_entry_list
PUBLIC	?item2_entry_num@CCL_MASTER@@2AAFA		; CCL_MASTER::item2_entry_num
PUBLIC	?item_entry_list@CCL_MASTER@@2AAPAHA		; CCL_MASTER::item_entry_list
PUBLIC	?item_entry_num@CCL_MASTER@@2AAFA		; CCL_MASTER::item_entry_num
PUBLIC	?object2_entry_list@CCL_MASTER@@2AAPAHA		; CCL_MASTER::object2_entry_list
PUBLIC	?object2_entry_num@CCL_MASTER@@2AAFA		; CCL_MASTER::object2_entry_num
PUBLIC	?object_entry_list@CCL_MASTER@@2PAPAUC_COLLI@@A	; CCL_MASTER::object_entry_list
PUBLIC	?object_entry_num@CCL_MASTER@@2AAFA		; CCL_MASTER::object_entry_num
PUBLIC	?enemy2_entry_list@CCL_MASTER@@2AAPAHA		; CCL_MASTER::enemy2_entry_list
PUBLIC	?enemy2_entry_num@CCL_MASTER@@2AAFA		; CCL_MASTER::enemy2_entry_num
PUBLIC	?enemy_entry_list@CCL_MASTER@@2AAPAHA		; CCL_MASTER::enemy_entry_list
PUBLIC	?enemy_entry_num@CCL_MASTER@@2AAFA		; CCL_MASTER::enemy_entry_num
PUBLIC	?bullet_entry_list@CCL_MASTER@@2AAPAHA		; CCL_MASTER::bullet_entry_list
PUBLIC	?bullet_entry_num@CCL_MASTER@@2AAPAFA		; CCL_MASTER::bullet_entry_num
PUBLIC	?player_entry_list@CCL_MASTER@@2PAPAUC_COLLI@@A	; CCL_MASTER::player_entry_list
PUBLIC	?player_entry_num@CCL_MASTER@@2AAPAFA		; CCL_MASTER::player_entry_num
PUBLIC	?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A		; CCL_MASTER::Search
PUBLIC	?ael_num@CCL_MASTER@@2AAPAHA			; CCL_MASTER::ael_num
PUBLIC	?around_ring_list@CCL_MASTER@@2AAPAHA		; CCL_MASTER::around_ring_list
PUBLIC	?arl_num@CCL_MASTER@@2AAPAHA			; CCL_MASTER::arl_num
PUBLIC	?around_enemy_list@CCL_MASTER@@2AAPAHA		; CCL_MASTER::around_enemy_list
PUBLIC	?id_table$1906@@3PAIA				; id_table$1906
msvcjmc	SEGMENT
__F2BDCE38_pch@h DB 01H
__6EE8A1C6_mod@pch DB 01H
__207763C7__CCL@cpp DB 01H
msvcjmc	ENDS
_DATA	SEGMENT
?GrvDir@CCL_MASTER@@2AAHA DD 09cd388H			; CCL_MASTER::GrvDir
?enemy2_entry_num_pre@CCL_MASTER@@2AAFA DD 09cd38cH	; CCL_MASTER::enemy2_entry_num_pre
?enemy_entry_num_pre@CCL_MASTER@@2AAFA DD 09cd390H	; CCL_MASTER::enemy_entry_num_pre
?chao_entry_list@CCL_MASTER@@2AAPAHA DD 09cd398H	; CCL_MASTER::chao_entry_list
?chao_entry_num@CCL_MASTER@@2AAFA DD 09cd3d8H		; CCL_MASTER::chao_entry_num
?wall_entry_list@CCL_MASTER@@2AAPAHA DD 09cd3d8H	; CCL_MASTER::wall_entry_list
?wall_entry_num@CCL_MASTER@@2AAFA DD 09cd7e0H		; CCL_MASTER::wall_entry_num
?item2_entry_list@CCL_MASTER@@2AAPAHA DD 09cd7e8H	; CCL_MASTER::item2_entry_list
?item2_entry_num@CCL_MASTER@@2AAFA DD 09cd9e8H		; CCL_MASTER::item2_entry_num
?item_entry_list@CCL_MASTER@@2AAPAHA DD 09cd9f0H	; CCL_MASTER::item_entry_list
?item_entry_num@CCL_MASTER@@2AAFA DD 09cdbf0H		; CCL_MASTER::item_entry_num
?object2_entry_list@CCL_MASTER@@2AAPAHA DD 09cdbf8H	; CCL_MASTER::object2_entry_list
?object2_entry_num@CCL_MASTER@@2AAFA DD 09cddf8H	; CCL_MASTER::object2_entry_num
?object_entry_list@CCL_MASTER@@2PAPAUC_COLLI@@A DD 09cde00H ; CCL_MASTER::object_entry_list
?object_entry_num@CCL_MASTER@@2AAFA DD 09ce200H		; CCL_MASTER::object_entry_num
?enemy2_entry_list@CCL_MASTER@@2AAPAHA DD 09ce208H	; CCL_MASTER::enemy2_entry_list
?enemy2_entry_num@CCL_MASTER@@2AAFA DD 09ce408H		; CCL_MASTER::enemy2_entry_num
?enemy_entry_list@CCL_MASTER@@2AAPAHA DD 09ce410H	; CCL_MASTER::enemy_entry_list
?enemy_entry_num@CCL_MASTER@@2AAFA DD 09ce610H		; CCL_MASTER::enemy_entry_num
?bullet_entry_list@CCL_MASTER@@2AAPAHA DD 09ce618H	; CCL_MASTER::bullet_entry_list
?bullet_entry_num@CCL_MASTER@@2AAPAFA DD 09ce818H	; CCL_MASTER::bullet_entry_num
?player_entry_list@CCL_MASTER@@2PAPAUC_COLLI@@A DD 09ce820H ; CCL_MASTER::player_entry_list
?player_entry_num@CCL_MASTER@@2AAPAFA DD 09ce860H	; CCL_MASTER::player_entry_num
?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A DD 09ce864H	; CCL_MASTER::Search
?ael_num@CCL_MASTER@@2AAPAHA DD 09ce874H		; CCL_MASTER::ael_num
?around_ring_list@CCL_MASTER@@2AAPAHA DD 09ce888H	; CCL_MASTER::around_ring_list
?arl_num@CCL_MASTER@@2AAPAHA DD 09d28c8H		; CCL_MASTER::arl_num
?around_enemy_list@CCL_MASTER@@2AAPAHA DD 09d28d8H	; CCL_MASTER::around_enemy_list
?id_table$1906@@3PAIA DD 01H				; id_table$1906
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
_DATA	ENDS
PUBLIC	?GetHitTarget@C_COLLI@@QAEPAU1@PAUCCL_HIT_INFO@@@Z ; C_COLLI::GetHitTarget
PUBLIC	?GetCharacterId@C_COLLI@@QAEHXZ			; C_COLLI::GetCharacterId
PUBLIC	?IsHitKind@C_COLLI@@QAEPAU1@E@Z			; C_COLLI::IsHitKind
PUBLIC	?IsHitKindEx@C_COLLI@@QAEPAUCCL_HIT_INFO@@E@Z	; C_COLLI::IsHitKindEx
PUBLIC	?IsHitPlayer@C_COLLI@@QAEPAU1@XZ		; C_COLLI::IsHitPlayer
PUBLIC	?IsHitPlayerEx@C_COLLI@@QAEPAUCCL_HIT_INFO@@XZ	; C_COLLI::IsHitPlayerEx
PUBLIC	?ClearInfo@C_COLLI@@QAEPAUCCL_HIT_INFO@@XZ	; C_COLLI::ClearInfo
PUBLIC	?Entry@C_COLLI@@QAEHXZ				; C_COLLI::Entry
PUBLIC	?Entry@C_COLLI@@QAEHPAURwV3d@@PAUsAngle@@@Z	; C_COLLI::Entry
PUBLIC	?ClearSearch@CCL_MASTER@@SAXXZ			; CCL_MASTER::ClearSearch
PUBLIC	?ClearHoming@CCL_MASTER@@SAXXZ			; CCL_MASTER::ClearHoming
PUBLIC	?GetCurrSearchNum@CCL_MASTER@@SAHQBUC_COLLI@@HH@Z ; CCL_MASTER::GetCurrSearchNum
PUBLIC	?EntryPlayerCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z	; CCL_MASTER::EntryPlayerCCL
PUBLIC	?EntryBulletCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z	; CCL_MASTER::EntryBulletCCL
PUBLIC	?EntryEnemyCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z	; CCL_MASTER::EntryEnemyCCL
PUBLIC	?EntryEnemy2CCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z	; CCL_MASTER::EntryEnemy2CCL
PUBLIC	?EntryObjectCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z	; CCL_MASTER::EntryObjectCCL
PUBLIC	?EntryObject2CCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z	; CCL_MASTER::EntryObject2CCL
PUBLIC	?EntryItemCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z	; CCL_MASTER::EntryItemCCL
PUBLIC	?EntryItem2CCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z	; CCL_MASTER::EntryItem2CCL
PUBLIC	?EntryWallCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z	; CCL_MASTER::EntryWallCCL
PUBLIC	?EntryChaoCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z	; CCL_MASTER::EntryChaoCCL
PUBLIC	?GetPlayerNumberFromCCLCharacterId@@YAHH@Z	; GetPlayerNumberFromCCLCharacterId
PUBLIC	__JustMyCode_Default
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__fltused:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?GetPlayerNumberFromCCLCharacterId@@YAHH@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_a1$ = 8						; size = 4
?GetPlayerNumberFromCCLCharacterId@@YAHH@Z PROC		; GetPlayerNumberFromCCLCharacterId, COMDAT

; 482  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 483  :     for (int i = 0; i < 6; ++i)

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@GetPlayerN
$LN2@GetPlayerN:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@GetPlayerN:
  0003a	83 7d f8 06	 cmp	 DWORD PTR _i$1[ebp], 6
  0003e	7d 16		 jge	 SHORT $LN3@GetPlayerN

; 484  :     {
; 485  :         if (a1 == id_table$1906[i])

  00040	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _a1$[ebp]
  00046	3b 0c 85 00 00
	00 00		 cmp	 ecx, DWORD PTR ?id_table$1906@@3PAIA[eax*4]
  0004d	75 05		 jne	 SHORT $LN5@GetPlayerN

; 486  :         {
; 487  :             return i;

  0004f	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00052	eb 05		 jmp	 SHORT $LN1@GetPlayerN
$LN5@GetPlayerN:

; 488  :         }
; 489  :     }

  00054	eb db		 jmp	 SHORT $LN2@GetPlayerN
$LN3@GetPlayerN:

; 490  :     return -1;

  00056	83 c8 ff	 or	 eax, -1
$LN1@GetPlayerN:

; 491  : }

  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00062	3b ec		 cmp	 ebp, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?GetPlayerNumberFromCCLCharacterId@@YAHH@Z ENDP		; GetPlayerNumberFromCCLCharacterId
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?EntryChaoCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z
_TEXT	SEGMENT
_v1$ = -8						; size = 4
_a1$ = 8						; size = 4
?EntryChaoCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z PROC	; CCL_MASTER::EntryChaoCCL, COMDAT

; 336  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 337  :     int v1; // ecx
; 338  : 
; 339  :     if (CCL_MASTER::chao_entry_num >= 0x10u)

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?chao_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::chao_entry_num
  0002d	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00030	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00033	72 04		 jb	 SHORT $LN2@EntryChaoC

; 340  :         return 0;

  00035	32 c0		 xor	 al, al
  00037	eb 33		 jmp	 SHORT $LN1@EntryChaoC
$LN2@EntryChaoC:

; 341  :     v1 = CCL_MASTER::chao_entry_num++;

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?chao_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::chao_entry_num
  0003e	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00041	89 4d f8	 mov	 DWORD PTR _v1$[ebp], ecx
  00044	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?chao_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::chao_entry_num
  0004a	66 8b 02	 mov	 ax, WORD PTR [edx]
  0004d	66 83 c0 01	 add	 ax, 1
  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?chao_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::chao_entry_num
  00057	66 89 01	 mov	 WORD PTR [ecx], ax

; 342  :     CCL_MASTER::chao_entry_list[v1] = (int)a1;

  0005a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?chao_entry_list@CCL_MASTER@@2AAPAHA ; CCL_MASTER::chao_entry_list
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	8b 55 f8	 mov	 edx, DWORD PTR _v1$[ebp]
  00064	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  00067	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 343  :     return 1;

  0006a	b0 01		 mov	 al, 1
$LN1@EntryChaoC:

; 344  : }

  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00075	3b ec		 cmp	 ebp, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
?EntryChaoCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ENDP	; CCL_MASTER::EntryChaoCCL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?EntryWallCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z
_TEXT	SEGMENT
_v1$ = -8						; size = 4
_a1$ = 8						; size = 4
?EntryWallCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z PROC	; CCL_MASTER::EntryWallCCL, COMDAT

; 324  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 325  :     int v1; // ecx
; 326  : 
; 327  :     if (CCL_MASTER::wall_entry_num >= 0x100u)

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?wall_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::wall_entry_num
  0002d	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00030	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00036	72 04		 jb	 SHORT $LN2@EntryWallC

; 328  :         return 0;

  00038	32 c0		 xor	 al, al
  0003a	eb 33		 jmp	 SHORT $LN1@EntryWallC
$LN2@EntryWallC:

; 329  :     v1 = CCL_MASTER::wall_entry_num++;

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?wall_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::wall_entry_num
  00041	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00044	89 4d f8	 mov	 DWORD PTR _v1$[ebp], ecx
  00047	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?wall_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::wall_entry_num
  0004d	66 8b 02	 mov	 ax, WORD PTR [edx]
  00050	66 83 c0 01	 add	 ax, 1
  00054	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?wall_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::wall_entry_num
  0005a	66 89 01	 mov	 WORD PTR [ecx], ax

; 330  :     CCL_MASTER::wall_entry_list[v1] = (int)a1;

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?wall_entry_list@CCL_MASTER@@2AAPAHA ; CCL_MASTER::wall_entry_list
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 55 f8	 mov	 edx, DWORD PTR _v1$[ebp]
  00067	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0006a	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 331  :     return 1;

  0006d	b0 01		 mov	 al, 1
$LN1@EntryWallC:

; 332  : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?EntryWallCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ENDP	; CCL_MASTER::EntryWallCCL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?EntryItem2CCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z
_TEXT	SEGMENT
_v1$ = -8						; size = 4
_a1$ = 8						; size = 4
?EntryItem2CCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z PROC	; CCL_MASTER::EntryItem2CCL, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 313  :     int v1; // ecx
; 314  : 
; 315  :     if (CCL_MASTER::item2_entry_num >= 0x80u)

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?item2_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::item2_entry_num
  0002d	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00030	81 f9 80 00 00
	00		 cmp	 ecx, 128		; 00000080H
  00036	72 04		 jb	 SHORT $LN2@EntryItem2

; 316  :         return 0;

  00038	32 c0		 xor	 al, al
  0003a	eb 33		 jmp	 SHORT $LN1@EntryItem2
$LN2@EntryItem2:

; 317  :     v1 = CCL_MASTER::item2_entry_num++;

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?item2_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::item2_entry_num
  00041	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00044	89 4d f8	 mov	 DWORD PTR _v1$[ebp], ecx
  00047	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?item2_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::item2_entry_num
  0004d	66 8b 02	 mov	 ax, WORD PTR [edx]
  00050	66 83 c0 01	 add	 ax, 1
  00054	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?item2_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::item2_entry_num
  0005a	66 89 01	 mov	 WORD PTR [ecx], ax

; 318  :     CCL_MASTER::item2_entry_list[v1] = (int)a1;

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?item2_entry_list@CCL_MASTER@@2AAPAHA ; CCL_MASTER::item2_entry_list
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 55 f8	 mov	 edx, DWORD PTR _v1$[ebp]
  00067	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0006a	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 319  :     return 1;

  0006d	b0 01		 mov	 al, 1
$LN1@EntryItem2:

; 320  : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?EntryItem2CCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ENDP	; CCL_MASTER::EntryItem2CCL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?EntryItemCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z
_TEXT	SEGMENT
_v1$ = -8						; size = 4
_a1$ = 8						; size = 4
?EntryItemCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z PROC	; CCL_MASTER::EntryItemCCL, COMDAT

; 300  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 301  :     int v1; // ecx
; 302  : 
; 303  :     if (CCL_MASTER::item_entry_num >= 0x80u)

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?item_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::item_entry_num
  0002d	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00030	81 f9 80 00 00
	00		 cmp	 ecx, 128		; 00000080H
  00036	72 04		 jb	 SHORT $LN2@EntryItemC

; 304  :         return 0;

  00038	32 c0		 xor	 al, al
  0003a	eb 33		 jmp	 SHORT $LN1@EntryItemC
$LN2@EntryItemC:

; 305  :     v1 = CCL_MASTER::item_entry_num++;

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?item_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::item_entry_num
  00041	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00044	89 4d f8	 mov	 DWORD PTR _v1$[ebp], ecx
  00047	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?item_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::item_entry_num
  0004d	66 8b 02	 mov	 ax, WORD PTR [edx]
  00050	66 83 c0 01	 add	 ax, 1
  00054	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?item_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::item_entry_num
  0005a	66 89 01	 mov	 WORD PTR [ecx], ax

; 306  :     CCL_MASTER::item_entry_list[v1] = (int)a1;

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?item_entry_list@CCL_MASTER@@2AAPAHA ; CCL_MASTER::item_entry_list
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 55 f8	 mov	 edx, DWORD PTR _v1$[ebp]
  00067	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0006a	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 307  :     return 1;

  0006d	b0 01		 mov	 al, 1
$LN1@EntryItemC:

; 308  : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?EntryItemCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ENDP	; CCL_MASTER::EntryItemCCL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?EntryObject2CCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z
_TEXT	SEGMENT
_v1$ = -8						; size = 4
_a1$ = 8						; size = 4
?EntryObject2CCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z PROC	; CCL_MASTER::EntryObject2CCL, COMDAT

; 288  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 289  :     int v1; // ecx
; 290  : 
; 291  :     if (CCL_MASTER::object2_entry_num >= 128u)

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object2_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::object2_entry_num
  0002d	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00030	81 f9 80 00 00
	00		 cmp	 ecx, 128		; 00000080H
  00036	72 04		 jb	 SHORT $LN2@EntryObjec

; 292  :         return 0;

  00038	32 c0		 xor	 al, al
  0003a	eb 33		 jmp	 SHORT $LN1@EntryObjec
$LN2@EntryObjec:

; 293  :     v1 = CCL_MASTER::object2_entry_num++;

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object2_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::object2_entry_num
  00041	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00044	89 4d f8	 mov	 DWORD PTR _v1$[ebp], ecx
  00047	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?object2_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::object2_entry_num
  0004d	66 8b 02	 mov	 ax, WORD PTR [edx]
  00050	66 83 c0 01	 add	 ax, 1
  00054	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object2_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::object2_entry_num
  0005a	66 89 01	 mov	 WORD PTR [ecx], ax

; 294  :     CCL_MASTER::object2_entry_list[v1] = (int)a1;

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object2_entry_list@CCL_MASTER@@2AAPAHA ; CCL_MASTER::object2_entry_list
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 55 f8	 mov	 edx, DWORD PTR _v1$[ebp]
  00067	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0006a	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 295  :     return 1;

  0006d	b0 01		 mov	 al, 1
$LN1@EntryObjec:

; 296  : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?EntryObject2CCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ENDP	; CCL_MASTER::EntryObject2CCL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?EntryObjectCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z
_TEXT	SEGMENT
_v1$ = -8						; size = 4
_a1$ = 8						; size = 4
?EntryObjectCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z PROC	; CCL_MASTER::EntryObjectCCL, COMDAT

; 275  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 276  :     int v1; // ecx
; 277  : 
; 278  :     if (CCL_MASTER::object_entry_num >= 0x100u)

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::object_entry_num
  0002d	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00030	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00036	72 04		 jb	 SHORT $LN2@EntryObjec

; 279  :         return 0;

  00038	32 c0		 xor	 al, al
  0003a	eb 31		 jmp	 SHORT $LN1@EntryObjec
$LN2@EntryObjec:

; 280  :     v1 = CCL_MASTER::object_entry_num;

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::object_entry_num
  00041	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00044	89 4d f8	 mov	 DWORD PTR _v1$[ebp], ecx

; 281  :     CCL_MASTER::object_entry_num++;

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?object_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::object_entry_num
  0004c	66 8b 08	 mov	 cx, WORD PTR [eax]
  0004f	66 83 c1 01	 add	 cx, 1
  00053	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?object_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::object_entry_num
  00059	66 89 0a	 mov	 WORD PTR [edx], cx

; 282  :     object_entry_list[v1] = a1;

  0005c	8b 45 f8	 mov	 eax, DWORD PTR _v1$[ebp]
  0005f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?object_entry_list@CCL_MASTER@@2PAPAUC_COLLI@@A ; CCL_MASTER::object_entry_list
  00065	8b 55 08	 mov	 edx, DWORD PTR _a1$[ebp]
  00068	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 283  :     return 1;

  0006b	b0 01		 mov	 al, 1
$LN1@EntryObjec:

; 284  : }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx
  00070	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00076	3b ec		 cmp	 ebp, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?EntryObjectCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ENDP	; CCL_MASTER::EntryObjectCCL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?EntryEnemy2CCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z
_TEXT	SEGMENT
_v1$ = -8						; size = 4
_a1$ = 8						; size = 4
?EntryEnemy2CCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z PROC	; CCL_MASTER::EntryEnemy2CCL, COMDAT

; 263  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 264  :     int v1; // ecx
; 265  : 
; 266  :     if (CCL_MASTER::enemy2_entry_num >= 0x80u)

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?enemy2_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::enemy2_entry_num
  0002d	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00030	81 f9 80 00 00
	00		 cmp	 ecx, 128		; 00000080H
  00036	72 04		 jb	 SHORT $LN2@EntryEnemy

; 267  :         return 0;

  00038	32 c0		 xor	 al, al
  0003a	eb 33		 jmp	 SHORT $LN1@EntryEnemy
$LN2@EntryEnemy:

; 268  :     v1 = CCL_MASTER::enemy2_entry_num++;

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?enemy2_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::enemy2_entry_num
  00041	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00044	89 4d f8	 mov	 DWORD PTR _v1$[ebp], ecx
  00047	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?enemy2_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::enemy2_entry_num
  0004d	66 8b 02	 mov	 ax, WORD PTR [edx]
  00050	66 83 c0 01	 add	 ax, 1
  00054	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?enemy2_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::enemy2_entry_num
  0005a	66 89 01	 mov	 WORD PTR [ecx], ax

; 269  :     CCL_MASTER::enemy2_entry_list[v1] = (int)a1;

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?enemy2_entry_list@CCL_MASTER@@2AAPAHA ; CCL_MASTER::enemy2_entry_list
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 55 f8	 mov	 edx, DWORD PTR _v1$[ebp]
  00067	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0006a	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 270  :     return 1;

  0006d	b0 01		 mov	 al, 1
$LN1@EntryEnemy:

; 271  : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?EntryEnemy2CCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ENDP	; CCL_MASTER::EntryEnemy2CCL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?EntryEnemyCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z
_TEXT	SEGMENT
_v1$ = -8						; size = 4
_a1$ = 8						; size = 4
?EntryEnemyCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z PROC	; CCL_MASTER::EntryEnemyCCL, COMDAT

; 251  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 252  :     int v1; // ecx
; 253  : 
; 254  :     if (CCL_MASTER::enemy_entry_num >= 0x80u)

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?enemy_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::enemy_entry_num
  0002d	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00030	81 f9 80 00 00
	00		 cmp	 ecx, 128		; 00000080H
  00036	72 04		 jb	 SHORT $LN2@EntryEnemy

; 255  :         return 0;

  00038	32 c0		 xor	 al, al
  0003a	eb 33		 jmp	 SHORT $LN1@EntryEnemy
$LN2@EntryEnemy:

; 256  :     v1 = CCL_MASTER::enemy_entry_num++;

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?enemy_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::enemy_entry_num
  00041	0f bf 08	 movsx	 ecx, WORD PTR [eax]
  00044	89 4d f8	 mov	 DWORD PTR _v1$[ebp], ecx
  00047	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?enemy_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::enemy_entry_num
  0004d	66 8b 02	 mov	 ax, WORD PTR [edx]
  00050	66 83 c0 01	 add	 ax, 1
  00054	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?enemy_entry_num@CCL_MASTER@@2AAFA ; CCL_MASTER::enemy_entry_num
  0005a	66 89 01	 mov	 WORD PTR [ecx], ax

; 257  :     CCL_MASTER::enemy_entry_list[v1] = (int)a1;

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?enemy_entry_list@CCL_MASTER@@2AAPAHA ; CCL_MASTER::enemy_entry_list
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 55 f8	 mov	 edx, DWORD PTR _v1$[ebp]
  00067	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0006a	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 258  :     return 1;

  0006d	b0 01		 mov	 al, 1
$LN1@EntryEnemy:

; 259  : }

  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
?EntryEnemyCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ENDP	; CCL_MASTER::EntryEnemyCCL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?EntryBulletCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z
_TEXT	SEGMENT
_v1$ = -8						; size = 4
_a1$ = 8						; size = 4
?EntryBulletCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z PROC	; CCL_MASTER::EntryBulletCCL, COMDAT

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 239  :     int v1; // ecx
; 240  : 
; 241  :     if (CCL_MASTER::bullet_entry_num[0] >= 0x80u)

  00028	b8 02 00 00 00	 mov	 eax, 2
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bullet_entry_num@CCL_MASTER@@2AAPAFA ; CCL_MASTER::bullet_entry_num
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  0003c	81 f9 80 00 00
	00		 cmp	 ecx, 128		; 00000080H
  00042	72 04		 jb	 SHORT $LN2@EntryBulle

; 242  :         return 0;

  00044	32 c0		 xor	 al, al
  00046	eb 55		 jmp	 SHORT $LN1@EntryBulle
$LN2@EntryBulle:

; 243  :     v1 = CCL_MASTER::bullet_entry_num[0];

  00048	b8 02 00 00 00	 mov	 eax, 2
  0004d	6b c8 00	 imul	 ecx, eax, 0
  00050	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bullet_entry_num@CCL_MASTER@@2AAPAFA ; CCL_MASTER::bullet_entry_num
  00056	8b 02		 mov	 eax, DWORD PTR [edx]
  00058	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  0005c	89 4d f8	 mov	 DWORD PTR _v1$[ebp], ecx

; 244  :     ++CCL_MASTER::bullet_entry_num[0];

  0005f	b8 02 00 00 00	 mov	 eax, 2
  00064	6b c8 00	 imul	 ecx, eax, 0
  00067	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bullet_entry_num@CCL_MASTER@@2AAPAFA ; CCL_MASTER::bullet_entry_num
  0006d	8b 02		 mov	 eax, DWORD PTR [edx]
  0006f	66 8b 0c 08	 mov	 cx, WORD PTR [eax+ecx]
  00073	66 83 c1 01	 add	 cx, 1
  00077	ba 02 00 00 00	 mov	 edx, 2
  0007c	6b c2 00	 imul	 eax, edx, 0
  0007f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?bullet_entry_num@CCL_MASTER@@2AAPAFA ; CCL_MASTER::bullet_entry_num
  00085	8b 12		 mov	 edx, DWORD PTR [edx]
  00087	66 89 0c 10	 mov	 WORD PTR [eax+edx], cx

; 245  :     CCL_MASTER::bullet_entry_list[v1] = (int)a1;

  0008b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?bullet_entry_list@CCL_MASTER@@2AAPAHA ; CCL_MASTER::bullet_entry_list
  00090	8b 08		 mov	 ecx, DWORD PTR [eax]
  00092	8b 55 f8	 mov	 edx, DWORD PTR _v1$[ebp]
  00095	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  00098	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 246  :     return 1;

  0009b	b0 01		 mov	 al, 1
$LN1@EntryBulle:

; 247  : }

  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
?EntryBulletCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ENDP	; CCL_MASTER::EntryBulletCCL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?EntryPlayerCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z
_TEXT	SEGMENT
_a1$ = 8						; size = 4
?EntryPlayerCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z PROC	; CCL_MASTER::EntryPlayerCCL, COMDAT

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 227  :     if (CCL_MASTER::player_entry_num[0] >= 0x10u)

  00028	b8 02 00 00 00	 mov	 eax, 2
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?player_entry_num@CCL_MASTER@@2AAPAFA ; CCL_MASTER::player_entry_num
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  0003c	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0003f	72 04		 jb	 SHORT $LN2@EntryPlaye

; 228  :     {
; 229  :         return 0;

  00041	32 c0		 xor	 al, al
  00043	eb 4e		 jmp	 SHORT $LN1@EntryPlaye
$LN2@EntryPlaye:

; 230  :     }
; 231  :     ++CCL_MASTER::player_entry_num[0];

  00045	b8 02 00 00 00	 mov	 eax, 2
  0004a	6b c8 00	 imul	 ecx, eax, 0
  0004d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?player_entry_num@CCL_MASTER@@2AAPAFA ; CCL_MASTER::player_entry_num
  00053	8b 02		 mov	 eax, DWORD PTR [edx]
  00055	66 8b 0c 08	 mov	 cx, WORD PTR [eax+ecx]
  00059	66 83 c1 01	 add	 cx, 1
  0005d	ba 02 00 00 00	 mov	 edx, 2
  00062	6b c2 00	 imul	 eax, edx, 0
  00065	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?player_entry_num@CCL_MASTER@@2AAPAFA ; CCL_MASTER::player_entry_num
  0006b	8b 12		 mov	 edx, DWORD PTR [edx]
  0006d	66 89 0c 10	 mov	 WORD PTR [eax+edx], cx

; 232  :     CCL_MASTER::player_entry_list[CCL_MASTER::player_entry_num[0]] = a1;

  00071	b8 02 00 00 00	 mov	 eax, 2
  00076	6b c8 00	 imul	 ecx, eax, 0
  00079	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?player_entry_num@CCL_MASTER@@2AAPAFA ; CCL_MASTER::player_entry_num
  0007f	8b 02		 mov	 eax, DWORD PTR [edx]
  00081	0f bf 0c 08	 movsx	 ecx, WORD PTR [eax+ecx]
  00085	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?player_entry_list@CCL_MASTER@@2PAPAUC_COLLI@@A ; CCL_MASTER::player_entry_list
  0008b	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0008e	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 233  :     return 1;

  00091	b0 01		 mov	 al, 1
$LN1@EntryPlaye:

; 234  : }

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0009c	3b ec		 cmp	 ebp, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
?EntryPlayerCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ENDP	; CCL_MASTER::EntryPlayerCCL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?GetCurrSearchNum@CCL_MASTER@@SAHQBUC_COLLI@@HH@Z
_TEXT	SEGMENT
_result$ = -20						; size = 4
_v3$ = -8						; size = 4
_twp$ = 8						; size = 4
_kind$ = 12						; size = 4
_a3$ = 16						; size = 4
?GetCurrSearchNum@CCL_MASTER@@SAHQBUC_COLLI@@HH@Z PROC	; CCL_MASTER::GetCurrSearchNum, COMDAT

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 189  :     int v3; // eax
; 190  :     int result; // eax
; 191  : 
; 192  :     if ((C_COLLI*)CCL_MASTER::Search.pTaskwk == twp)

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	3b 4d 08	 cmp	 ecx, DWORD PTR _twp$[ebp]
  00032	75 0d		 jne	 SHORT $LN2@GetCurrSea

; 193  :     {
; 194  :         v3 = CCL_MASTER::Search.CurrNum;

  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  00039	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003c	89 4d f8	 mov	 DWORD PTR _v3$[ebp], ecx

; 195  :     }

  0003f	eb 29		 jmp	 SHORT $LN3@GetCurrSea
$LN2@GetCurrSea:

; 196  :     else
; 197  :     {
; 198  :         CCL_MASTER::Search.pTaskwk = (void**)twp;

  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _twp$[ebp]
  00049	89 08		 mov	 DWORD PTR [eax], ecx

; 199  :         CCL_MASTER::Search.FuncAddr = (void*)-1;

  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  00050	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1

; 200  :         CCL_MASTER::Search.Kind = -1;

  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  0005c	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [eax+12], -1

; 201  :         v3 = -1;

  00063	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _v3$[ebp], -1
$LN3@GetCurrSea:

; 202  :     }
; 203  :     if (CCL_MASTER::Search.FuncAddr != (void*)a3)

  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  0006f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00072	3b 4d 10	 cmp	 ecx, DWORD PTR _a3$[ebp]
  00075	74 1e		 je	 SHORT $LN4@GetCurrSea

; 204  :     {
; 205  :         CCL_MASTER::Search.FuncAddr = (void*)a3;

  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  0007c	8b 4d 10	 mov	 ecx, DWORD PTR _a3$[ebp]
  0007f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 206  :         CCL_MASTER::Search.Kind = -1;

  00082	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  00087	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [eax+12], -1

; 207  :         v3 = -1;

  0008e	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _v3$[ebp], -1
$LN4@GetCurrSea:

; 208  :     }
; 209  :     if (kind != -1 && CCL_MASTER::Search.Kind != kind)

  00095	83 7d 0c ff	 cmp	 DWORD PTR _kind$[ebp], -1
  00099	74 1f		 je	 SHORT $LN5@GetCurrSea
  0009b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  000a0	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000a3	3b 4d 0c	 cmp	 ecx, DWORD PTR _kind$[ebp]
  000a6	74 12		 je	 SHORT $LN5@GetCurrSea

; 210  :     {
; 211  :         CCL_MASTER::Search.Kind = kind;

  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  000ad	8b 4d 0c	 mov	 ecx, DWORD PTR _kind$[ebp]
  000b0	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 212  :         v3 = -1;

  000b3	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _v3$[ebp], -1
$LN5@GetCurrSea:

; 213  :     }
; 214  :     result = v3 + 1;

  000ba	8b 45 f8	 mov	 eax, DWORD PTR _v3$[ebp]
  000bd	83 c0 01	 add	 eax, 1
  000c0	89 45 ec	 mov	 DWORD PTR _result$[ebp], eax

; 215  :     CCL_MASTER::Search.CurrNum = result;

  000c3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  000c8	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp]
  000cb	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 216  :     if (result > 8)

  000ce	83 7d ec 08	 cmp	 DWORD PTR _result$[ebp], 8
  000d2	7e 13		 jle	 SHORT $LN6@GetCurrSea

; 217  :     {
; 218  :         result = 8;

  000d4	c7 45 ec 08 00
	00 00		 mov	 DWORD PTR _result$[ebp], 8

; 219  :         CCL_MASTER::Search.CurrNum = 8;

  000db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  000e0	c7 40 08 08 00
	00 00		 mov	 DWORD PTR [eax+8], 8
$LN6@GetCurrSea:

; 220  :     }
; 221  :     return result;

  000e7	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]

; 222  : }

  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx
  000ed	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000f3	3b ec		 cmp	 ebp, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
?GetCurrSearchNum@CCL_MASTER@@SAHQBUC_COLLI@@HH@Z ENDP	; CCL_MASTER::GetCurrSearchNum
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?ClearHoming@CCL_MASTER@@SAXXZ
_TEXT	SEGMENT
_i$ = -32						; size = 4
_around_enemy_list$ = -20				; size = 4
_around_ring_list$ = -8					; size = 4
?ClearHoming@CCL_MASTER@@SAXXZ PROC			; CCL_MASTER::ClearHoming, COMDAT

; 162  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 163  :     int* around_ring_list;
; 164  :     int* around_enemy_list;
; 165  : 
; 166  :     ael_num[0] = 0;

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	6b c8 00	 imul	 ecx, eax, 0
  00030	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ael_num@CCL_MASTER@@2AAPAHA ; CCL_MASTER::ael_num
  00036	8b 02		 mov	 eax, DWORD PTR [edx]
  00038	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [ecx+eax], 0

; 167  :     ael_num[1] = 0;

  0003f	b8 04 00 00 00	 mov	 eax, 4
  00044	c1 e0 00	 shl	 eax, 0
  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ael_num@CCL_MASTER@@2AAPAHA ; CCL_MASTER::ael_num
  0004d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004f	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], 0

; 168  :     ael_num[2] = 0;

  00056	b8 04 00 00 00	 mov	 eax, 4
  0005b	d1 e0		 shl	 eax, 1
  0005d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ael_num@CCL_MASTER@@2AAPAHA ; CCL_MASTER::ael_num
  00063	8b 11		 mov	 edx, DWORD PTR [ecx]
  00065	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], 0

; 169  :     ael_num[3] = 0;

  0006c	b8 04 00 00 00	 mov	 eax, 4
  00071	6b c8 03	 imul	 ecx, eax, 3
  00074	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ael_num@CCL_MASTER@@2AAPAHA ; CCL_MASTER::ael_num
  0007a	8b 02		 mov	 eax, DWORD PTR [edx]
  0007c	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [ecx+eax], 0

; 170  :     arl_num[0] = 0;

  00083	b8 04 00 00 00	 mov	 eax, 4
  00088	6b c8 00	 imul	 ecx, eax, 0
  0008b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?arl_num@CCL_MASTER@@2AAPAHA ; CCL_MASTER::arl_num
  00091	8b 02		 mov	 eax, DWORD PTR [edx]
  00093	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [ecx+eax], 0

; 171  :     arl_num[1] = 0;

  0009a	b8 04 00 00 00	 mov	 eax, 4
  0009f	c1 e0 00	 shl	 eax, 0
  000a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?arl_num@CCL_MASTER@@2AAPAHA ; CCL_MASTER::arl_num
  000a8	8b 11		 mov	 edx, DWORD PTR [ecx]
  000aa	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], 0

; 172  :     arl_num[2] = 0;

  000b1	b8 04 00 00 00	 mov	 eax, 4
  000b6	d1 e0		 shl	 eax, 1
  000b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?arl_num@CCL_MASTER@@2AAPAHA ; CCL_MASTER::arl_num
  000be	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c0	c7 04 10 00 00
	00 00		 mov	 DWORD PTR [eax+edx], 0

; 173  :     around_ring_list = CCL_MASTER::around_ring_list;

  000c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?around_ring_list@CCL_MASTER@@2AAPAHA ; CCL_MASTER::around_ring_list
  000cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ce	89 4d f8	 mov	 DWORD PTR _around_ring_list$[ebp], ecx

; 174  :     around_enemy_list = CCL_MASTER::around_enemy_list;

  000d1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?around_enemy_list@CCL_MASTER@@2AAPAHA ; CCL_MASTER::around_enemy_list
  000d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d8	89 4d ec	 mov	 DWORD PTR _around_enemy_list$[ebp], ecx

; 175  :     arl_num[3] = 0;

  000db	b8 04 00 00 00	 mov	 eax, 4
  000e0	6b c8 03	 imul	 ecx, eax, 3
  000e3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?arl_num@CCL_MASTER@@2AAPAHA ; CCL_MASTER::arl_num
  000e9	8b 02		 mov	 eax, DWORD PTR [edx]
  000eb	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [ecx+eax], 0

; 176  :     int i = 0;

  000f2	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
$LN4@ClearHomin:

; 177  :     do
; 178  :     {
; 179  :         *around_enemy_list = 0;

  000f9	8b 45 ec	 mov	 eax, DWORD PTR _around_enemy_list$[ebp]
  000fc	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 180  :         *around_ring_list = 0;

  00102	8b 45 f8	 mov	 eax, DWORD PTR _around_ring_list$[ebp]
  00105	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 181  :         around_enemy_list += 0x522;

  0010b	8b 45 ec	 mov	 eax, DWORD PTR _around_enemy_list$[ebp]
  0010e	05 88 14 00 00	 add	 eax, 5256		; 00001488H
  00113	89 45 ec	 mov	 DWORD PTR _around_enemy_list$[ebp], eax

; 182  :         around_ring_list += 0x202;

  00116	8b 45 f8	 mov	 eax, DWORD PTR _around_ring_list$[ebp]
  00119	05 08 08 00 00	 add	 eax, 2056		; 00000808H
  0011e	89 45 f8	 mov	 DWORD PTR _around_ring_list$[ebp], eax

; 183  :     } while (i < 20);

  00121	83 7d e0 14	 cmp	 DWORD PTR _i$[ebp], 20	; 00000014H
  00125	7c d2		 jl	 SHORT $LN4@ClearHomin

; 184  : }

  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00130	3b ec		 cmp	 ebp, esp
  00132	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c3		 ret	 0
?ClearHoming@CCL_MASTER@@SAXXZ ENDP			; CCL_MASTER::ClearHoming
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?ClearSearch@CCL_MASTER@@SAXXZ
_TEXT	SEGMENT
?ClearSearch@CCL_MASTER@@SAXXZ PROC			; CCL_MASTER::ClearSearch, COMDAT

; 153  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 154  :     Search.pTaskwk = 0;

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  0002d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 155  :     Search.FuncAddr = (void*)-1;

  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  00038	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1

; 156  :     Search.CurrNum = -1;

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  00044	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [eax+8], -1

; 157  :     Search.Kind = -1;

  0004b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  00050	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [eax+12], -1

; 158  : };

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
?ClearSearch@CCL_MASTER@@SAXXZ ENDP			; CCL_MASTER::ClearSearch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?Entry@C_COLLI@@QAEHPAURwV3d@@PAUsAngle@@@Z
_TEXT	SEGMENT
_v6$ = -44						; size = 4
_v5$ = -32						; size = 4
_v4$ = -20						; size = 4
_this$ = -8						; size = 4
_position$ = 8						; size = 4
_rotation$ = 12						; size = 4
?Entry@C_COLLI@@QAEHPAURwV3d@@PAUsAngle@@@Z PROC	; C_COLLI::Entry, COMDAT
; _this$ = ecx

; 461  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00013	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 462  :     RwV3d* v4;
; 463  :     RwV3d* v5;
; 464  :     RwReal v6;
; 465  : 
; 466  :     v4 = &this->normal;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 c0 60	 add	 eax, 96			; 00000060H
  00033	89 45 ec	 mov	 DWORD PTR _v4$[ebp], eax

; 467  :     v5 = &field_7C;

  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	83 c0 7c	 add	 eax, 124		; 0000007cH
  0003c	89 45 e0	 mov	 DWORD PTR _v5$[ebp], eax

; 468  :     v5->x = v4->x;

  0003f	8b 45 e0	 mov	 eax, DWORD PTR _v5$[ebp]
  00042	8b 4d ec	 mov	 ecx, DWORD PTR _v4$[ebp]
  00045	8b 11		 mov	 edx, DWORD PTR [ecx]
  00047	89 10		 mov	 DWORD PTR [eax], edx

; 469  :     v6 = v4->z;

  00049	8b 45 ec	 mov	 eax, DWORD PTR _v4$[ebp]
  0004c	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00051	f3 0f 11 45 d4	 movss	 DWORD PTR _v6$[ebp], xmm0

; 470  :     v5->y = v4->y;

  00056	8b 45 e0	 mov	 eax, DWORD PTR _v5$[ebp]
  00059	8b 4d ec	 mov	 ecx, DWORD PTR _v4$[ebp]
  0005c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0005f	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 471  :     v5->z = v6;

  00062	8b 45 e0	 mov	 eax, DWORD PTR _v5$[ebp]
  00065	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _v6$[ebp]
  0006a	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 472  :     *v4 = *position;

  0006f	8b 45 08	 mov	 eax, DWORD PTR _position$[ebp]
  00072	8b 4d ec	 mov	 ecx, DWORD PTR _v4$[ebp]
  00075	8b 10		 mov	 edx, DWORD PTR [eax]
  00077	89 11		 mov	 DWORD PTR [ecx], edx
  00079	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0007c	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0007f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00082	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 473  :     this->angle = *rotation;

  00085	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00088	83 c0 6c	 add	 eax, 108		; 0000006cH
  0008b	8b 4d 0c	 mov	 ecx, DWORD PTR _rotation$[ebp]
  0008e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00090	89 10		 mov	 DWORD PTR [eax], edx
  00092	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00095	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00098	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0009b	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 474  :     return Entry();

  0009e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	e8 00 00 00 00	 call	 ?Entry@C_COLLI@@QAEHXZ	; C_COLLI::Entry

; 475  : }

  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  000af	3b ec		 cmp	 ebp, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c2 08 00	 ret	 8
?Entry@C_COLLI@@QAEHPAURwV3d@@PAUsAngle@@@Z ENDP	; C_COLLI::Entry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?Entry@C_COLLI@@QAEHXZ
_TEXT	SEGMENT
tv67 = -220						; size = 4
_result$ = -20						; size = 4
_this$ = -8						; size = 4
?Entry@C_COLLI@@QAEHXZ PROC				; C_COLLI::Entry, COMDAT
; _this$ = ecx

; 384  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 385  :     int result;
; 386  : 
; 387  :     ClearInfo();

  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?ClearInfo@C_COLLI@@QAEPAUCCL_HIT_INFO@@XZ ; C_COLLI::ClearInfo

; 388  :     switch (this->id)

  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0003b	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv67[ebp], ecx
  00041	83 bd 24 ff ff
	ff 09		 cmp	 DWORD PTR tv67[ebp], 9
  00048	0f 87 eb 00 00
	00		 ja	 $LN14@Entry
  0004e	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv67[ebp]
  00054	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN16@Entry[edx*4]
$LN4@Entry:

; 389  :     {
; 390  :     case 0u:
; 391  :     {
; 392  :         CCL_MASTER::EntryPlayerCCL(this);

  0005b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ?EntryPlayerCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ; CCL_MASTER::EntryPlayerCCL
  00064	83 c4 04	 add	 esp, 4

; 393  :         result = 0;

  00067	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 394  :         break;

  0006e	e9 cd 00 00 00	 jmp	 $LN2@Entry
$LN5@Entry:

; 395  :     }
; 396  :     case 1u:
; 397  :     {
; 398  :         CCL_MASTER::EntryBulletCCL(this);

  00073	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ?EntryBulletCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ; CCL_MASTER::EntryBulletCCL
  0007c	83 c4 04	 add	 esp, 4

; 399  :         result = 0;

  0007f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 400  :         break;

  00086	e9 b5 00 00 00	 jmp	 $LN2@Entry
$LN6@Entry:

; 401  :     }
; 402  :     case 2u:
; 403  :     {
; 404  :         CCL_MASTER::EntryEnemyCCL(this);

  0008b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?EntryEnemyCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ; CCL_MASTER::EntryEnemyCCL
  00094	83 c4 04	 add	 esp, 4

; 405  :         result = 0;

  00097	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 406  :         break;

  0009e	e9 9d 00 00 00	 jmp	 $LN2@Entry
$LN7@Entry:

; 407  :     }
; 408  :     case 3u:
; 409  :     {
; 410  :         CCL_MASTER::EntryEnemy2CCL(this);

  000a3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 ?EntryEnemy2CCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ; CCL_MASTER::EntryEnemy2CCL
  000ac	83 c4 04	 add	 esp, 4

; 411  :         result = 0;

  000af	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 412  :         break;

  000b6	e9 85 00 00 00	 jmp	 $LN2@Entry
$LN8@Entry:

; 413  :     }
; 414  :     case 4u:
; 415  :     {
; 416  :         CCL_MASTER::EntryObjectCCL(this);

  000bb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ?EntryObjectCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ; CCL_MASTER::EntryObjectCCL
  000c4	83 c4 04	 add	 esp, 4

; 417  :         result = 0;

  000c7	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 418  :         break;

  000ce	eb 70		 jmp	 SHORT $LN2@Entry
$LN9@Entry:

; 419  :     }
; 420  :     case 5u:
; 421  :     {
; 422  :         CCL_MASTER::EntryObject2CCL(this);

  000d0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 ?EntryObject2CCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ; CCL_MASTER::EntryObject2CCL
  000d9	83 c4 04	 add	 esp, 4

; 423  :         result = 0;

  000dc	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 424  :         break;

  000e3	eb 5b		 jmp	 SHORT $LN2@Entry
$LN10@Entry:

; 425  :     }
; 426  :     case 6u:
; 427  :     {
; 428  :         CCL_MASTER::EntryItemCCL(this);

  000e5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 ?EntryItemCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ; CCL_MASTER::EntryItemCCL
  000ee	83 c4 04	 add	 esp, 4

; 429  :         result = 0;

  000f1	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 430  :         break;

  000f8	eb 46		 jmp	 SHORT $LN2@Entry
$LN11@Entry:

; 431  :     }
; 432  :     case 7u:
; 433  :     {
; 434  :         CCL_MASTER::EntryItem2CCL(this);

  000fa	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 ?EntryItem2CCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ; CCL_MASTER::EntryItem2CCL
  00103	83 c4 04	 add	 esp, 4

; 435  :         result = 0;

  00106	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 436  :         break;

  0010d	eb 31		 jmp	 SHORT $LN2@Entry
$LN12@Entry:

; 437  :     }
; 438  :     case 8u:
; 439  :     {
; 440  :         CCL_MASTER::EntryWallCCL(this);

  0010f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ?EntryWallCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ; CCL_MASTER::EntryWallCCL
  00118	83 c4 04	 add	 esp, 4

; 441  :         result = 0;

  0011b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 442  :         break;

  00122	eb 1c		 jmp	 SHORT $LN2@Entry
$LN13@Entry:

; 443  :     }
; 444  :     case 9u:
; 445  :     {
; 446  :         CCL_MASTER::EntryChaoCCL(this);

  00124	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 ?EntryChaoCCL@CCL_MASTER@@SA_NPAUC_COLLI@@@Z ; CCL_MASTER::EntryChaoCCL
  0012d	83 c4 04	 add	 esp, 4

; 447  :         result = 0;

  00130	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 448  :         break;

  00137	eb 07		 jmp	 SHORT $LN2@Entry
$LN14@Entry:

; 449  :     }
; 450  :     default:
; 451  :     {
; 452  :         result = 0;

  00139	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0
$LN2@Entry:

; 453  :         break;
; 454  :     }
; 455  :     }
; 456  :     return result;

  00140	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp]

; 457  : }

  00143	5f		 pop	 edi
  00144	5e		 pop	 esi
  00145	5b		 pop	 ebx
  00146	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0014c	3b ec		 cmp	 ebp, esp
  0014e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c3		 ret	 0
  00157	90		 npad	 1
$LN16@Entry:
  00158	00 00 00 00	 DD	 $LN4@Entry
  0015c	00 00 00 00	 DD	 $LN5@Entry
  00160	00 00 00 00	 DD	 $LN6@Entry
  00164	00 00 00 00	 DD	 $LN7@Entry
  00168	00 00 00 00	 DD	 $LN8@Entry
  0016c	00 00 00 00	 DD	 $LN9@Entry
  00170	00 00 00 00	 DD	 $LN10@Entry
  00174	00 00 00 00	 DD	 $LN11@Entry
  00178	00 00 00 00	 DD	 $LN12@Entry
  0017c	00 00 00 00	 DD	 $LN13@Entry
?Entry@C_COLLI@@QAEHXZ ENDP				; C_COLLI::Entry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?ClearInfo@C_COLLI@@QAEPAUCCL_HIT_INFO@@XZ
_TEXT	SEGMENT
_v5$ = -68						; size = 4
_v4$ = -56						; size = 4
_v3$ = -44						; size = 4
_result$ = -32						; size = 4
_v1$ = -20						; size = 2
_this$ = -8						; size = 4
?ClearInfo@C_COLLI@@QAEPAUCCL_HIT_INFO@@XZ PROC		; C_COLLI::ClearInfo, COMDAT
; _this$ = ecx

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00013	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 349  :     short v1; // edx
; 350  :     CCL_HIT_INFO* result; // eax
; 351  :     CCL_HIT_INFO* v3; // esi
; 352  :     ::CCL_INFO* v4; // ecx
; 353  :     char* v5; // ecx
; 354  : 
; 355  :     v1 = this->nbInfo;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	66 8b 48 0a	 mov	 cx, WORD PTR [eax+10]
  00034	66 89 4d ec	 mov	 WORD PTR _v1$[ebp], cx

; 356  :     this->flag &= ~0x13Fu;

  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  0003f	81 e1 c0 fe ff
	ff		 and	 ecx, -320		; fffffec0H
  00045	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00048	66 89 4a 08	 mov	 WORD PTR [edx+8], cx

; 357  :     result = this->hit_info;

  0004c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 c0 14	 add	 eax, 20			; 00000014H
  00052	89 45 e0	 mov	 DWORD PTR _result$[ebp], eax

; 358  :     v3 = &this->hit_info[8];

  00055	b8 08 00 00 00	 mov	 eax, 8
  0005a	c1 e0 03	 shl	 eax, 3
  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00064	89 55 d4	 mov	 DWORD PTR _v3$[ebp], edx

; 359  :     this->field_2 = 0;

  00067	33 c0		 xor	 eax, eax
  00069	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	66 89 41 02	 mov	 WORD PTR [ecx+2], ax

; 360  :     v4 = this->info;

  00070	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00076	89 4d c8	 mov	 DWORD PTR _v4$[ebp], ecx

; 361  :     if (v1)

  00079	0f bf 45 ec	 movsx	 eax, WORD PTR _v1$[ebp]
  0007d	85 c0		 test	 eax, eax
  0007f	74 3c		 je	 SHORT $LN8@ClearInfo

; 362  :     {
; 363  :         v5 = &v4->damage;

  00081	8b 45 c8	 mov	 eax, DWORD PTR _v4$[ebp]
  00084	83 c0 03	 add	 eax, 3
  00087	89 45 bc	 mov	 DWORD PTR _v5$[ebp], eax

; 364  :         v1 = (unsigned short)v1;

  0008a	66 8b 45 ec	 mov	 ax, WORD PTR _v1$[ebp]
  0008e	66 89 45 ec	 mov	 WORD PTR _v1$[ebp], ax
$LN4@ClearInfo:

; 365  :         do
; 366  :         {
; 367  :             *v5 &= ~0x10u;

  00092	8b 45 bc	 mov	 eax, DWORD PTR _v5$[ebp]
  00095	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00098	83 e1 ef	 and	 ecx, -17		; ffffffefH
  0009b	8b 55 bc	 mov	 edx, DWORD PTR _v5$[ebp]
  0009e	88 0a		 mov	 BYTE PTR [edx], cl

; 368  :             v5 += 0x30;

  000a0	8b 45 bc	 mov	 eax, DWORD PTR _v5$[ebp]
  000a3	83 c0 30	 add	 eax, 48			; 00000030H
  000a6	89 45 bc	 mov	 DWORD PTR _v5$[ebp], eax

; 369  :             --v1;

  000a9	66 8b 45 ec	 mov	 ax, WORD PTR _v1$[ebp]
  000ad	66 83 e8 01	 sub	 ax, 1
  000b1	66 89 45 ec	 mov	 WORD PTR _v1$[ebp], ax

; 370  :         } while (v1);

  000b5	0f bf 45 ec	 movsx	 eax, WORD PTR _v1$[ebp]
  000b9	85 c0		 test	 eax, eax
  000bb	75 d5		 jne	 SHORT $LN4@ClearInfo
$LN8@ClearInfo:

; 371  :     }
; 372  :     for (; result != (CCL_HIT_INFO*)v3; ++result)

  000bd	eb 09		 jmp	 SHORT $LN7@ClearInfo
$LN5@ClearInfo:
  000bf	8b 45 e0	 mov	 eax, DWORD PTR _result$[ebp]
  000c2	83 c0 08	 add	 eax, 8
  000c5	89 45 e0	 mov	 DWORD PTR _result$[ebp], eax
$LN7@ClearInfo:
  000c8	8b 45 e0	 mov	 eax, DWORD PTR _result$[ebp]
  000cb	3b 45 d4	 cmp	 eax, DWORD PTR _v3$[ebp]
  000ce	74 2a		 je	 SHORT $LN6@ClearInfo

; 373  :     {
; 374  :         result->flag &= ~3u;

  000d0	8b 45 e0	 mov	 eax, DWORD PTR _result$[ebp]
  000d3	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  000d7	83 e1 fc	 and	 ecx, -4			; fffffffcH
  000da	8b 55 e0	 mov	 edx, DWORD PTR _result$[ebp]
  000dd	66 89 4a 02	 mov	 WORD PTR [edx+2], cx

; 375  :         result->my_num = -1;

  000e1	8b 45 e0	 mov	 eax, DWORD PTR _result$[ebp]
  000e4	c6 00 ff	 mov	 BYTE PTR [eax], -1

; 376  :         result->hit_num = -1;

  000e7	8b 45 e0	 mov	 eax, DWORD PTR _result$[ebp]
  000ea	c6 40 01 ff	 mov	 BYTE PTR [eax+1], -1

; 377  :         result->hit_twp = 0;

  000ee	8b 45 e0	 mov	 eax, DWORD PTR _result$[ebp]
  000f1	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 378  :     }

  000f8	eb c5		 jmp	 SHORT $LN5@ClearInfo
$LN6@ClearInfo:

; 379  :     return result;

  000fa	8b 45 e0	 mov	 eax, DWORD PTR _result$[ebp]

; 380  : }

  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi
  000ff	5b		 pop	 ebx
  00100	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  00106	3b ec		 cmp	 ebp, esp
  00108	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c3		 ret	 0
?ClearInfo@C_COLLI@@QAEPAUCCL_HIT_INFO@@XZ ENDP		; C_COLLI::ClearInfo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?IsHitPlayerEx@C_COLLI@@QAEPAUCCL_HIT_INFO@@XZ
_TEXT	SEGMENT
_v5$ = -56						; size = 4
_result$ = -44						; size = 4
_v3$ = -32						; size = 4
_v2$ = -20						; size = 4
_this$ = -8						; size = 4
?IsHitPlayerEx@C_COLLI@@QAEPAUCCL_HIT_INFO@@XZ PROC	; C_COLLI::IsHitPlayerEx, COMDAT
; _this$ = ecx

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 102  :     int v2; // ecx
; 103  :     int v3; // ecx
; 104  :     CCL_HIT_INFO* result; // eax
; 105  :     CCL_HIT_INFO* v5; // edx
; 106  : 
; 107  :     if ((C_COLLI*)CCL_MASTER::Search.pTaskwk != this)// #inline CCL_MASTER::GetCurrSearchNum(const(C_COLLI const *, int, int))

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  00032	8b 08		 mov	 ecx, DWORD PTR [eax]
  00034	3b 4d f8	 cmp	 ecx, DWORD PTR _this$[ebp]
  00037	74 2d		 je	 SHORT $LN4@IsHitPlaye

; 108  :     {
; 109  :         CCL_MASTER::Search.pTaskwk = (void**)this;

  00039	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	89 08		 mov	 DWORD PTR [eax], ecx
$LABEL_4$12:

; 110  :     LABEL_4:
; 111  :         CCL_MASTER::Search.FuncAddr = (void*)0x22FC;

  00043	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  00048	c7 40 04 fc 22
	00 00		 mov	 DWORD PTR [eax+4], 8956	; 000022fcH

; 112  :         CCL_MASTER::Search.Kind = -1;

  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  00054	c7 40 0c ff ff
	ff ff		 mov	 DWORD PTR [eax+12], -1

; 113  :         v2 = -1;

  0005b	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _v2$[ebp], -1

; 114  :         goto LABEL_6;

  00062	eb 1d		 jmp	 SHORT $LABEL_6$13
  00064	eb 1b		 jmp	 SHORT $LABEL_6$13
$LN4@IsHitPlaye:

; 115  :     }
; 116  :     if (CCL_MASTER::Search.FuncAddr != (void*)0x22FC)

  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  0006b	81 78 04 fc 22
	00 00		 cmp	 DWORD PTR [eax+4], 8956	; 000022fcH
  00072	74 02		 je	 SHORT $LN6@IsHitPlaye

; 117  :     {
; 118  :         goto LABEL_4;

  00074	eb cd		 jmp	 SHORT $LABEL_4$12
$LN6@IsHitPlaye:

; 119  :     }
; 120  :     v2 = CCL_MASTER::Search.CurrNum;

  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  0007b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0007e	89 4d ec	 mov	 DWORD PTR _v2$[ebp], ecx
$LABEL_6$13:

; 121  : LABEL_6:
; 122  :     v3 = v2 + 1;

  00081	8b 45 ec	 mov	 eax, DWORD PTR _v2$[ebp]
  00084	83 c0 01	 add	 eax, 1
  00087	89 45 e0	 mov	 DWORD PTR _v3$[ebp], eax

; 123  :     CCL_MASTER::Search.CurrNum = v3;

  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  0008f	8b 4d e0	 mov	 ecx, DWORD PTR _v3$[ebp]
  00092	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 124  :     if (v3 > 8)

  00095	83 7d e0 08	 cmp	 DWORD PTR _v3$[ebp], 8
  00099	7e 13		 jle	 SHORT $LN7@IsHitPlaye

; 125  :     {
; 126  :         v3 = 8;

  0009b	c7 45 e0 08 00
	00 00		 mov	 DWORD PTR _v3$[ebp], 8

; 127  :         CCL_MASTER::Search.CurrNum = 8;

  000a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  000a7	c7 40 08 08 00
	00 00		 mov	 DWORD PTR [eax+8], 8
$LN7@IsHitPlaye:

; 128  :     }
; 129  :     result = &this->hit_info[v3];

  000ae	8b 45 e0	 mov	 eax, DWORD PTR _v3$[ebp]
  000b1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	8d 54 c1 14	 lea	 edx, DWORD PTR [ecx+eax*8+20]
  000b8	89 55 d4	 mov	 DWORD PTR _result$[ebp], edx

; 130  :     v5 = &this->hit_info[8];

  000bb	b8 08 00 00 00	 mov	 eax, 8
  000c0	c1 e0 03	 shl	 eax, 3
  000c3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c6	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  000ca	89 55 c8	 mov	 DWORD PTR _v5$[ebp], edx

; 131  :     if (result < v5)

  000cd	8b 45 d4	 mov	 eax, DWORD PTR _result$[ebp]
  000d0	3b 45 c8	 cmp	 eax, DWORD PTR _v5$[ebp]
  000d3	73 49		 jae	 SHORT $LN8@IsHitPlaye
$LN2@IsHitPlaye:

; 132  :     {
; 133  :         while (result->hit_num != -1)

  000d5	8b 45 d4	 mov	 eax, DWORD PTR _result$[ebp]
  000d8	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  000dc	83 f9 ff	 cmp	 ecx, -1
  000df	74 3d		 je	 SHORT $LN8@IsHitPlaye

; 134  :         {
; 135  :             if (!*(short*)result->hit_twp)         // #inline C_COLLI::GetID(const(void))

  000e1	8b 45 d4	 mov	 eax, DWORD PTR _result$[ebp]
  000e4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e7	0f bf 11	 movsx	 edx, WORD PTR [ecx]
  000ea	85 d2		 test	 edx, edx
  000ec	75 10		 jne	 SHORT $LN9@IsHitPlaye

; 136  :             {
; 137  :                 CCL_MASTER::Search.CurrNum = v3;        // #inline CCL_MASTER::SetCurrSearchNum((int))

  000ee	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  000f3	8b 4d e0	 mov	 ecx, DWORD PTR _v3$[ebp]
  000f6	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 138  :                 return result;

  000f9	8b 45 d4	 mov	 eax, DWORD PTR _result$[ebp]
  000fc	eb 22		 jmp	 SHORT $LN1@IsHitPlaye
$LN9@IsHitPlaye:

; 139  :             }
; 140  :             ++result;

  000fe	8b 45 d4	 mov	 eax, DWORD PTR _result$[ebp]
  00101	83 c0 08	 add	 eax, 8
  00104	89 45 d4	 mov	 DWORD PTR _result$[ebp], eax

; 141  :             ++v3;

  00107	8b 45 e0	 mov	 eax, DWORD PTR _v3$[ebp]
  0010a	83 c0 01	 add	 eax, 1
  0010d	89 45 e0	 mov	 DWORD PTR _v3$[ebp], eax

; 142  :             if (result >= v5)

  00110	8b 45 d4	 mov	 eax, DWORD PTR _result$[ebp]
  00113	3b 45 c8	 cmp	 eax, DWORD PTR _v5$[ebp]
  00116	72 04		 jb	 SHORT $LN10@IsHitPlaye

; 143  :             {
; 144  :                 return 0;

  00118	33 c0		 xor	 eax, eax
  0011a	eb 04		 jmp	 SHORT $LN1@IsHitPlaye
$LN10@IsHitPlaye:

; 145  :             }
; 146  :         }

  0011c	eb b7		 jmp	 SHORT $LN2@IsHitPlaye
$LN8@IsHitPlaye:

; 147  :     }
; 148  :     return 0;

  0011e	33 c0		 xor	 eax, eax
$LN1@IsHitPlaye:

; 149  : }

  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  00129	3b ec		 cmp	 ebp, esp
  0012b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c3		 ret	 0
?IsHitPlayerEx@C_COLLI@@QAEPAUCCL_HIT_INFO@@XZ ENDP	; C_COLLI::IsHitPlayerEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?IsHitPlayer@C_COLLI@@QAEPAU1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsHitPlayer@C_COLLI@@QAEPAU1@XZ PROC			; C_COLLI::IsHitPlayer, COMDAT
; _this$ = ecx

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 96   :     return GetHitTarget(IsHitPlayerEx());

  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?IsHitPlayerEx@C_COLLI@@QAEPAUCCL_HIT_INFO@@XZ ; C_COLLI::IsHitPlayerEx
  00035	50		 push	 eax
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?GetHitTarget@C_COLLI@@QAEPAU1@PAUCCL_HIT_INFO@@@Z ; C_COLLI::GetHitTarget

; 97   : }

  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi
  00040	5b		 pop	 ebx
  00041	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?IsHitPlayer@C_COLLI@@QAEPAU1@XZ ENDP			; C_COLLI::IsHitPlayer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?IsHitKindEx@C_COLLI@@QAEPAUCCL_HIT_INFO@@E@Z
_TEXT	SEGMENT
_v5$ = -56						; size = 4
_result$ = -44						; size = 4
_v3$ = -32						; size = 4
_v2$ = -20						; size = 4
_this$ = -8						; size = 4
_kind$ = 8						; size = 1
?IsHitKindEx@C_COLLI@@QAEPAUCCL_HIT_INFO@@E@Z PROC	; C_COLLI::IsHitKindEx, COMDAT
; _this$ = ecx

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00013	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 65   :     int v2; // eax
; 66   :     int v3; // edi
; 67   :     CCL_HIT_INFO* result; // eax
; 68   :     C_COLLI* v5; // edx
; 69   : 
; 70   :     v2 = CCL_MASTER::GetCurrSearchNum(this, kind, 0x23B4);

  0002d	68 b4 23 00 00	 push	 9140			; 000023b4H
  00032	0f b6 45 08	 movzx	 eax, BYTE PTR _kind$[ebp]
  00036	50		 push	 eax
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 ?GetCurrSearchNum@CCL_MASTER@@SAHQBUC_COLLI@@HH@Z ; CCL_MASTER::GetCurrSearchNum
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	89 45 ec	 mov	 DWORD PTR _v2$[ebp], eax

; 71   :     v3 = v2;

  00046	8b 45 ec	 mov	 eax, DWORD PTR _v2$[ebp]
  00049	89 45 e0	 mov	 DWORD PTR _v3$[ebp], eax

; 72   :     if (!(flag & 1))

  0004c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	0f bf 48 08	 movsx	 ecx, WORD PTR [eax+8]
  00053	83 e1 01	 and	 ecx, 1
  00056	75 07		 jne	 SHORT $LN5@IsHitKindE

; 73   :     {
; 74   :         return 0;

  00058	33 c0		 xor	 eax, eax
  0005a	e9 82 00 00 00	 jmp	 $LN1@IsHitKindE
$LN5@IsHitKindE:

; 75   :     }
; 76   :     for (result = &hit_info[v2]; result < &hit_info[8]; ++v3)

  0005f	8b 45 ec	 mov	 eax, DWORD PTR _v2$[ebp]
  00062	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	8d 54 c1 14	 lea	 edx, DWORD PTR [ecx+eax*8+20]
  00069	89 55 d4	 mov	 DWORD PTR _result$[ebp], edx
  0006c	eb 09		 jmp	 SHORT $LN4@IsHitKindE
$LN2@IsHitKindE:
  0006e	8b 45 e0	 mov	 eax, DWORD PTR _v3$[ebp]
  00071	83 c0 01	 add	 eax, 1
  00074	89 45 e0	 mov	 DWORD PTR _v3$[ebp], eax
$LN4@IsHitKindE:
  00077	b8 08 00 00 00	 mov	 eax, 8
  0007c	c1 e0 03	 shl	 eax, 3
  0007f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00082	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00086	39 55 d4	 cmp	 DWORD PTR _result$[ebp], edx
  00089	73 54		 jae	 SHORT $LN3@IsHitKindE

; 77   :     {
; 78   :         v5 = (C_COLLI*)result->hit_twp;

  0008b	8b 45 d4	 mov	 eax, DWORD PTR _result$[ebp]
  0008e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00091	89 4d c8	 mov	 DWORD PTR _v5$[ebp], ecx

; 79   :         if (result->hit_num == -1)

  00094	8b 45 d4	 mov	 eax, DWORD PTR _result$[ebp]
  00097	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  0009b	83 f9 ff	 cmp	 ecx, -1
  0009e	75 02		 jne	 SHORT $LN6@IsHitKindE

; 80   :         {
; 81   :             break;

  000a0	eb 3d		 jmp	 SHORT $LN3@IsHitKindE
$LN6@IsHitKindE:

; 82   :         }
; 83   :         if (v5 && info[result->hit_num].kind == kind)

  000a2	83 7d c8 00	 cmp	 DWORD PTR _v5$[ebp], 0
  000a6	74 2c		 je	 SHORT $LN7@IsHitKindE
  000a8	8b 45 d4	 mov	 eax, DWORD PTR _result$[ebp]
  000ab	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  000af	6b d1 60	 imul	 edx, ecx, 96
  000b2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b8	0f be 14 11	 movsx	 edx, BYTE PTR [ecx+edx]
  000bc	0f b6 45 08	 movzx	 eax, BYTE PTR _kind$[ebp]
  000c0	3b d0		 cmp	 edx, eax
  000c2	75 10		 jne	 SHORT $LN7@IsHitKindE

; 84   :         {
; 85   :             CCL_MASTER::Search.CurrNum = v3;

  000c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Search@CCL_MASTER@@2AAUCCL_SEARCH@@A ; CCL_MASTER::Search
  000c9	8b 4d e0	 mov	 ecx, DWORD PTR _v3$[ebp]
  000cc	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 86   :             return result;

  000cf	8b 45 d4	 mov	 eax, DWORD PTR _result$[ebp]
  000d2	eb 0d		 jmp	 SHORT $LN1@IsHitKindE
$LN7@IsHitKindE:

; 87   :         }
; 88   :         ++result;

  000d4	8b 45 d4	 mov	 eax, DWORD PTR _result$[ebp]
  000d7	83 c0 08	 add	 eax, 8
  000da	89 45 d4	 mov	 DWORD PTR _result$[ebp], eax

; 89   :     }

  000dd	eb 8f		 jmp	 SHORT $LN2@IsHitKindE
$LN3@IsHitKindE:

; 90   :     return 0;

  000df	33 c0		 xor	 eax, eax
$LN1@IsHitKindE:

; 91   : }

  000e1	5f		 pop	 edi
  000e2	5e		 pop	 esi
  000e3	5b		 pop	 ebx
  000e4	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000ea	3b ec		 cmp	 ebp, esp
  000ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c2 04 00	 ret	 4
?IsHitKindEx@C_COLLI@@QAEPAUCCL_HIT_INFO@@E@Z ENDP	; C_COLLI::IsHitKindEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?IsHitKind@C_COLLI@@QAEPAU1@E@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_kind$ = 8						; size = 1
?IsHitKind@C_COLLI@@QAEPAU1@E@Z PROC			; C_COLLI::IsHitKind, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 59   :     return GetHitTarget(IsHitKindEx(kind));

  0002d	0f b6 45 08	 movzx	 eax, BYTE PTR _kind$[ebp]
  00031	50		 push	 eax
  00032	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?IsHitKindEx@C_COLLI@@QAEPAUCCL_HIT_INFO@@E@Z ; C_COLLI::IsHitKindEx
  0003a	50		 push	 eax
  0003b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?GetHitTarget@C_COLLI@@QAEPAU1@PAUCCL_HIT_INFO@@@Z ; C_COLLI::GetHitTarget

; 60   : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
?IsHitKind@C_COLLI@@QAEPAU1@E@Z ENDP			; C_COLLI::IsHitKind
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?GetCharacterId@C_COLLI@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetCharacterId@C_COLLI@@QAEHXZ PROC			; C_COLLI::GetCharacterId, COMDAT
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 53   :     return my_num;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 40 78	 mov	 eax, DWORD PTR [eax+120]

; 54   : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?GetCharacterId@C_COLLI@@QAEHXZ ENDP			; C_COLLI::GetCharacterId
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DonutStopGaming\Desktop\Mod\_CCL.cpp
;	COMDAT ?GetHitTarget@C_COLLI@@QAEPAU1@PAUCCL_HIT_INFO@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_a1$ = 8						; size = 4
?GetHitTarget@C_COLLI@@QAEPAU1@PAUCCL_HIT_INFO@@@Z PROC	; C_COLLI::GetHitTarget, COMDAT
; _this$ = ecx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __207763C7__CCL@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 43   :     if (!a1)

  0002d	83 7d 08 00	 cmp	 DWORD PTR _a1$[ebp], 0
  00031	75 04		 jne	 SHORT $LN2@GetHitTarg

; 44   :     {
; 45   :         return 0;

  00033	33 c0		 xor	 eax, eax
  00035	eb 06		 jmp	 SHORT $LN1@GetHitTarg
$LN2@GetHitTarg:

; 46   :     }
; 47   :     return (C_COLLI*)a1->hit_twp;

  00037	8b 45 08	 mov	 eax, DWORD PTR _a1$[ebp]
  0003a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$LN1@GetHitTarg:

; 48   : }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00046	3b ec		 cmp	 ebp, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?GetHitTarget@C_COLLI@@QAEPAU1@PAUCCL_HIT_INFO@@@Z ENDP	; C_COLLI::GetHitTarget
_TEXT	ENDS
END
